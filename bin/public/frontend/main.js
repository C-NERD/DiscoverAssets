/* Generated by the Nim Compiler v1.4.2 */
var framePtr = null;
var excHandler = 0;
var lastJSError = null;
var NTI10500125 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI12826015 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI9705015 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI11705253 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI5635232 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI5890011 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI1194635 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1194621 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1194643 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI12052202 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI12052204 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI12052206 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI12052208 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI12052210 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI12171031 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI12171017 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI12171021 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI12171015 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI12171133 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI1194651 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI11956107 = {size: 0,kind: 19,base: null,node: null,finalizer: null};
var NTI2335020 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI1194653 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI11920250 = {size: 0,kind: 19,base: null,node: null,finalizer: null};
var NTI1188011 = {size: 0,kind: 2,base: null,node: null,finalizer: null};
var NTI11811054 = {size: 0,kind: 19,base: null,node: null,finalizer: null};
var NTI11541164 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI11541158 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI11541152 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI11541146 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI11541140 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI11541129 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI11541125 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI11541120 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI11541116 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI11541112 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI11541111 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI11541109 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI11811046 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI11956021 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI11956065 = {size: 0,kind: 19,base: null,node: null,finalizer: null};
var NTI11956019 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI11956017 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI11956015 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI11956023 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI10897211 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI10416096 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI10416097 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI10465076 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI10465074 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI10462152 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI10465030 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI10465018 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI10465039 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI10465037 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI10462028 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI10465031 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI10465022 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI1853476 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI1853472 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI1853468 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI1853464 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI1853460 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI1853456 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI1853452 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI1853448 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI1853444 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI1853440 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI1853436 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI1853432 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI1853428 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI1853424 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI1853420 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI1853416 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI1853412 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI1853408 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI1853404 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI1853400 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI1853396 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI1853392 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI1853388 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI1853205 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1853291 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI1854628 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI1854619 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI1854618 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI1853385 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI1854626 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI1853387 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI1853269 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1853267 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI1853661 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI1853273 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1853271 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI1853659 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI1853657 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI1853289 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1853287 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI1853655 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI1853653 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI1853277 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1853275 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI1853651 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI1853675 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI1853281 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1853279 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI1853673 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI1188044 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI1853767 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI1853285 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1853283 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI1853231 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1853229 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI1853245 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1853243 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI1853241 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1853239 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI1853233 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI1853614 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI1853612 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI1853610 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI1853237 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1853235 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI10897207 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI10897209 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI1853293 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1194641 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1194633 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1194637 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI12826017 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1188064 = {size: 0,kind: 1,base: null,node: null,finalizer: null};
var NTI12826027 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1194408 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1194728 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI1188015 = {size: 0,kind: 29,base: null,node: null,finalizer: null};
var NTI1194723 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI1194617 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1194619 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1194649 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1188013 = {size: 0,kind: 28,base: null,node: null,finalizer: null};
var NNI1194649 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI1194649.node = NNI1194649;
var NNI1194619 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI1194619.node = NNI1194619;
NTI1194723.base = NTI1194617;
NTI1194728.base = NTI1194617;
var NNI1194617 = {kind: 2, len: 5, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "parent", len: 0, typ: NTI1194723, name: "parent", sons: null}, 
{kind: 1, offset: "name", len: 0, typ: NTI1188015, name: "name", sons: null}, 
{kind: 1, offset: "message", len: 0, typ: NTI1188013, name: "msg", sons: null}, 
{kind: 1, offset: "trace", len: 0, typ: NTI1188013, name: "trace", sons: null}, 
{kind: 1, offset: "up", len: 0, typ: NTI1194728, name: "up", sons: null}]};
NTI1194617.node = NNI1194617;
var NNI1194408 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI1194408.node = NNI1194408;
NTI1194617.base = NTI1194408;
NTI1194619.base = NTI1194617;
NTI1194649.base = NTI1194619;
var NNI12826027 = {kind: 1, offset: "cond", len: 0, typ: NTI1188064, name: "cond", sons: null};
NTI12826027.node = NNI12826027;
var NNI12826017 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "name", len: 0, typ: NTI1188015, name: "name", sons: null}, 
{kind: 1, offset: "url", len: 0, typ: NTI1188015, name: "url", sons: null}]};
NTI12826017.node = NNI12826017;
NTI12826017.base = NTI1194408;
NTI12826027.base = NTI12826017;
var NNI1194637 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI1194637.node = NNI1194637;
var NNI1194633 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI1194633.node = NNI1194633;
NTI1194633.base = NTI1194619;
NTI1194637.base = NTI1194633;
var NNI1194641 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI1194641.node = NNI1194641;
NTI1194641.base = NTI1194619;
var NNI1853293 = {kind: 2, len: 368, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "alignContent", len: 0, typ: NTI1188015, name: "alignContent", sons: null}, 
{kind: 1, offset: "alignItems", len: 0, typ: NTI1188015, name: "alignItems", sons: null}, 
{kind: 1, offset: "alignSelf", len: 0, typ: NTI1188015, name: "alignSelf", sons: null}, 
{kind: 1, offset: "all", len: 0, typ: NTI1188015, name: "all", sons: null}, 
{kind: 1, offset: "animation", len: 0, typ: NTI1188015, name: "animation", sons: null}, 
{kind: 1, offset: "animationDelay", len: 0, typ: NTI1188015, name: "animationDelay", sons: null}, 
{kind: 1, offset: "animationDirection", len: 0, typ: NTI1188015, name: "animationDirection", sons: null}, 
{kind: 1, offset: "animationDuration", len: 0, typ: NTI1188015, name: "animationDuration", sons: null}, 
{kind: 1, offset: "animationFillMode", len: 0, typ: NTI1188015, name: "animationFillMode", sons: null}, 
{kind: 1, offset: "animationIterationCount", len: 0, typ: NTI1188015, name: "animationIterationCount", sons: null}, 
{kind: 1, offset: "animationName", len: 0, typ: NTI1188015, name: "animationName", sons: null}, 
{kind: 1, offset: "animationPlayState", len: 0, typ: NTI1188015, name: "animationPlayState", sons: null}, 
{kind: 1, offset: "animationTimingFunction", len: 0, typ: NTI1188015, name: "animationTimingFunction", sons: null}, 
{kind: 1, offset: "backdropFilter", len: 0, typ: NTI1188015, name: "backdropFilter", sons: null}, 
{kind: 1, offset: "backfaceVisibility", len: 0, typ: NTI1188015, name: "backfaceVisibility", sons: null}, 
{kind: 1, offset: "background", len: 0, typ: NTI1188015, name: "background", sons: null}, 
{kind: 1, offset: "backgroundAttachment", len: 0, typ: NTI1188015, name: "backgroundAttachment", sons: null}, 
{kind: 1, offset: "backgroundBlendMode", len: 0, typ: NTI1188015, name: "backgroundBlendMode", sons: null}, 
{kind: 1, offset: "backgroundClip", len: 0, typ: NTI1188015, name: "backgroundClip", sons: null}, 
{kind: 1, offset: "backgroundColor", len: 0, typ: NTI1188015, name: "backgroundColor", sons: null}, 
{kind: 1, offset: "backgroundImage", len: 0, typ: NTI1188015, name: "backgroundImage", sons: null}, 
{kind: 1, offset: "backgroundOrigin", len: 0, typ: NTI1188015, name: "backgroundOrigin", sons: null}, 
{kind: 1, offset: "backgroundPosition", len: 0, typ: NTI1188015, name: "backgroundPosition", sons: null}, 
{kind: 1, offset: "backgroundRepeat", len: 0, typ: NTI1188015, name: "backgroundRepeat", sons: null}, 
{kind: 1, offset: "backgroundSize", len: 0, typ: NTI1188015, name: "backgroundSize", sons: null}, 
{kind: 1, offset: "blockSize", len: 0, typ: NTI1188015, name: "blockSize", sons: null}, 
{kind: 1, offset: "border", len: 0, typ: NTI1188015, name: "border", sons: null}, 
{kind: 1, offset: "borderBlock", len: 0, typ: NTI1188015, name: "borderBlock", sons: null}, 
{kind: 1, offset: "borderBlockColor", len: 0, typ: NTI1188015, name: "borderBlockColor", sons: null}, 
{kind: 1, offset: "borderBlockEnd", len: 0, typ: NTI1188015, name: "borderBlockEnd", sons: null}, 
{kind: 1, offset: "borderBlockEndColor", len: 0, typ: NTI1188015, name: "borderBlockEndColor", sons: null}, 
{kind: 1, offset: "borderBlockEndStyle", len: 0, typ: NTI1188015, name: "borderBlockEndStyle", sons: null}, 
{kind: 1, offset: "borderBlockEndWidth", len: 0, typ: NTI1188015, name: "borderBlockEndWidth", sons: null}, 
{kind: 1, offset: "borderBlockStart", len: 0, typ: NTI1188015, name: "borderBlockStart", sons: null}, 
{kind: 1, offset: "borderBlockStartColor", len: 0, typ: NTI1188015, name: "borderBlockStartColor", sons: null}, 
{kind: 1, offset: "borderBlockStartStyle", len: 0, typ: NTI1188015, name: "borderBlockStartStyle", sons: null}, 
{kind: 1, offset: "borderBlockStartWidth", len: 0, typ: NTI1188015, name: "borderBlockStartWidth", sons: null}, 
{kind: 1, offset: "borderBlockStyle", len: 0, typ: NTI1188015, name: "borderBlockStyle", sons: null}, 
{kind: 1, offset: "borderBlockWidth", len: 0, typ: NTI1188015, name: "borderBlockWidth", sons: null}, 
{kind: 1, offset: "borderBottom", len: 0, typ: NTI1188015, name: "borderBottom", sons: null}, 
{kind: 1, offset: "borderBottomColor", len: 0, typ: NTI1188015, name: "borderBottomColor", sons: null}, 
{kind: 1, offset: "borderBottomLeftRadius", len: 0, typ: NTI1188015, name: "borderBottomLeftRadius", sons: null}, 
{kind: 1, offset: "borderBottomRightRadius", len: 0, typ: NTI1188015, name: "borderBottomRightRadius", sons: null}, 
{kind: 1, offset: "borderBottomStyle", len: 0, typ: NTI1188015, name: "borderBottomStyle", sons: null}, 
{kind: 1, offset: "borderBottomWidth", len: 0, typ: NTI1188015, name: "borderBottomWidth", sons: null}, 
{kind: 1, offset: "borderCollapse", len: 0, typ: NTI1188015, name: "borderCollapse", sons: null}, 
{kind: 1, offset: "borderColor", len: 0, typ: NTI1188015, name: "borderColor", sons: null}, 
{kind: 1, offset: "borderEndEndRadius", len: 0, typ: NTI1188015, name: "borderEndEndRadius", sons: null}, 
{kind: 1, offset: "borderEndStartRadius", len: 0, typ: NTI1188015, name: "borderEndStartRadius", sons: null}, 
{kind: 1, offset: "borderImage", len: 0, typ: NTI1188015, name: "borderImage", sons: null}, 
{kind: 1, offset: "borderImageOutset", len: 0, typ: NTI1188015, name: "borderImageOutset", sons: null}, 
{kind: 1, offset: "borderImageRepeat", len: 0, typ: NTI1188015, name: "borderImageRepeat", sons: null}, 
{kind: 1, offset: "borderImageSlice", len: 0, typ: NTI1188015, name: "borderImageSlice", sons: null}, 
{kind: 1, offset: "borderImageSource", len: 0, typ: NTI1188015, name: "borderImageSource", sons: null}, 
{kind: 1, offset: "borderImageWidth", len: 0, typ: NTI1188015, name: "borderImageWidth", sons: null}, 
{kind: 1, offset: "borderInline", len: 0, typ: NTI1188015, name: "borderInline", sons: null}, 
{kind: 1, offset: "borderInlineColor", len: 0, typ: NTI1188015, name: "borderInlineColor", sons: null}, 
{kind: 1, offset: "borderInlineEnd", len: 0, typ: NTI1188015, name: "borderInlineEnd", sons: null}, 
{kind: 1, offset: "borderInlineEndColor", len: 0, typ: NTI1188015, name: "borderInlineEndColor", sons: null}, 
{kind: 1, offset: "borderInlineEndStyle", len: 0, typ: NTI1188015, name: "borderInlineEndStyle", sons: null}, 
{kind: 1, offset: "borderInlineEndWidth", len: 0, typ: NTI1188015, name: "borderInlineEndWidth", sons: null}, 
{kind: 1, offset: "borderInlineStart", len: 0, typ: NTI1188015, name: "borderInlineStart", sons: null}, 
{kind: 1, offset: "borderInlineStartColor", len: 0, typ: NTI1188015, name: "borderInlineStartColor", sons: null}, 
{kind: 1, offset: "borderInlineStartStyle", len: 0, typ: NTI1188015, name: "borderInlineStartStyle", sons: null}, 
{kind: 1, offset: "borderInlineStartWidth", len: 0, typ: NTI1188015, name: "borderInlineStartWidth", sons: null}, 
{kind: 1, offset: "borderInlineStyle", len: 0, typ: NTI1188015, name: "borderInlineStyle", sons: null}, 
{kind: 1, offset: "borderInlineWidth", len: 0, typ: NTI1188015, name: "borderInlineWidth", sons: null}, 
{kind: 1, offset: "borderLeft", len: 0, typ: NTI1188015, name: "borderLeft", sons: null}, 
{kind: 1, offset: "borderLeftColor", len: 0, typ: NTI1188015, name: "borderLeftColor", sons: null}, 
{kind: 1, offset: "borderLeftStyle", len: 0, typ: NTI1188015, name: "borderLeftStyle", sons: null}, 
{kind: 1, offset: "borderLeftWidth", len: 0, typ: NTI1188015, name: "borderLeftWidth", sons: null}, 
{kind: 1, offset: "borderRadius", len: 0, typ: NTI1188015, name: "borderRadius", sons: null}, 
{kind: 1, offset: "borderRight", len: 0, typ: NTI1188015, name: "borderRight", sons: null}, 
{kind: 1, offset: "borderRightColor", len: 0, typ: NTI1188015, name: "borderRightColor", sons: null}, 
{kind: 1, offset: "borderRightStyle", len: 0, typ: NTI1188015, name: "borderRightStyle", sons: null}, 
{kind: 1, offset: "borderRightWidth", len: 0, typ: NTI1188015, name: "borderRightWidth", sons: null}, 
{kind: 1, offset: "borderSpacing", len: 0, typ: NTI1188015, name: "borderSpacing", sons: null}, 
{kind: 1, offset: "borderStartEndRadius", len: 0, typ: NTI1188015, name: "borderStartEndRadius", sons: null}, 
{kind: 1, offset: "borderStartStartRadius", len: 0, typ: NTI1188015, name: "borderStartStartRadius", sons: null}, 
{kind: 1, offset: "borderStyle", len: 0, typ: NTI1188015, name: "borderStyle", sons: null}, 
{kind: 1, offset: "borderTop", len: 0, typ: NTI1188015, name: "borderTop", sons: null}, 
{kind: 1, offset: "borderTopColor", len: 0, typ: NTI1188015, name: "borderTopColor", sons: null}, 
{kind: 1, offset: "borderTopLeftRadius", len: 0, typ: NTI1188015, name: "borderTopLeftRadius", sons: null}, 
{kind: 1, offset: "borderTopRightRadius", len: 0, typ: NTI1188015, name: "borderTopRightRadius", sons: null}, 
{kind: 1, offset: "borderTopStyle", len: 0, typ: NTI1188015, name: "borderTopStyle", sons: null}, 
{kind: 1, offset: "borderTopWidth", len: 0, typ: NTI1188015, name: "borderTopWidth", sons: null}, 
{kind: 1, offset: "borderWidth", len: 0, typ: NTI1188015, name: "borderWidth", sons: null}, 
{kind: 1, offset: "bottom", len: 0, typ: NTI1188015, name: "bottom", sons: null}, 
{kind: 1, offset: "boxDecorationBreak", len: 0, typ: NTI1188015, name: "boxDecorationBreak", sons: null}, 
{kind: 1, offset: "boxShadow", len: 0, typ: NTI1188015, name: "boxShadow", sons: null}, 
{kind: 1, offset: "boxSizing", len: 0, typ: NTI1188015, name: "boxSizing", sons: null}, 
{kind: 1, offset: "breakAfter", len: 0, typ: NTI1188015, name: "breakAfter", sons: null}, 
{kind: 1, offset: "breakBefore", len: 0, typ: NTI1188015, name: "breakBefore", sons: null}, 
{kind: 1, offset: "breakInside", len: 0, typ: NTI1188015, name: "breakInside", sons: null}, 
{kind: 1, offset: "captionSide", len: 0, typ: NTI1188015, name: "captionSide", sons: null}, 
{kind: 1, offset: "caretColor", len: 0, typ: NTI1188015, name: "caretColor", sons: null}, 
{kind: 1, offset: "clear", len: 0, typ: NTI1188015, name: "clear", sons: null}, 
{kind: 1, offset: "clip", len: 0, typ: NTI1188015, name: "clip", sons: null}, 
{kind: 1, offset: "clipPath", len: 0, typ: NTI1188015, name: "clipPath", sons: null}, 
{kind: 1, offset: "color", len: 0, typ: NTI1188015, name: "color", sons: null}, 
{kind: 1, offset: "colorAdjust", len: 0, typ: NTI1188015, name: "colorAdjust", sons: null}, 
{kind: 1, offset: "columnCount", len: 0, typ: NTI1188015, name: "columnCount", sons: null}, 
{kind: 1, offset: "columnFill", len: 0, typ: NTI1188015, name: "columnFill", sons: null}, 
{kind: 1, offset: "columnGap", len: 0, typ: NTI1188015, name: "columnGap", sons: null}, 
{kind: 1, offset: "columnRule", len: 0, typ: NTI1188015, name: "columnRule", sons: null}, 
{kind: 1, offset: "columnRuleColor", len: 0, typ: NTI1188015, name: "columnRuleColor", sons: null}, 
{kind: 1, offset: "columnRuleStyle", len: 0, typ: NTI1188015, name: "columnRuleStyle", sons: null}, 
{kind: 1, offset: "columnRuleWidth", len: 0, typ: NTI1188015, name: "columnRuleWidth", sons: null}, 
{kind: 1, offset: "columnSpan", len: 0, typ: NTI1188015, name: "columnSpan", sons: null}, 
{kind: 1, offset: "columnWidth", len: 0, typ: NTI1188015, name: "columnWidth", sons: null}, 
{kind: 1, offset: "columns", len: 0, typ: NTI1188015, name: "columns", sons: null}, 
{kind: 1, offset: "contain", len: 0, typ: NTI1188015, name: "contain", sons: null}, 
{kind: 1, offset: "content", len: 0, typ: NTI1188015, name: "content", sons: null}, 
{kind: 1, offset: "counterIncrement", len: 0, typ: NTI1188015, name: "counterIncrement", sons: null}, 
{kind: 1, offset: "counterReset", len: 0, typ: NTI1188015, name: "counterReset", sons: null}, 
{kind: 1, offset: "counterSet", len: 0, typ: NTI1188015, name: "counterSet", sons: null}, 
{kind: 1, offset: "cursor", len: 0, typ: NTI1188015, name: "cursor", sons: null}, 
{kind: 1, offset: "direction", len: 0, typ: NTI1188015, name: "direction", sons: null}, 
{kind: 1, offset: "display", len: 0, typ: NTI1188015, name: "display", sons: null}, 
{kind: 1, offset: "emptyCells", len: 0, typ: NTI1188015, name: "emptyCells", sons: null}, 
{kind: 1, offset: "filter", len: 0, typ: NTI1188015, name: "filter", sons: null}, 
{kind: 1, offset: "flex", len: 0, typ: NTI1188015, name: "flex", sons: null}, 
{kind: 1, offset: "flexBasis", len: 0, typ: NTI1188015, name: "flexBasis", sons: null}, 
{kind: 1, offset: "flexDirection", len: 0, typ: NTI1188015, name: "flexDirection", sons: null}, 
{kind: 1, offset: "flexFlow", len: 0, typ: NTI1188015, name: "flexFlow", sons: null}, 
{kind: 1, offset: "flexGrow", len: 0, typ: NTI1188015, name: "flexGrow", sons: null}, 
{kind: 1, offset: "flexShrink", len: 0, typ: NTI1188015, name: "flexShrink", sons: null}, 
{kind: 1, offset: "flexWrap", len: 0, typ: NTI1188015, name: "flexWrap", sons: null}, 
{kind: 1, offset: "cssFloat", len: 0, typ: NTI1188015, name: "cssFloat", sons: null}, 
{kind: 1, offset: "font", len: 0, typ: NTI1188015, name: "font", sons: null}, 
{kind: 1, offset: "fontFamily", len: 0, typ: NTI1188015, name: "fontFamily", sons: null}, 
{kind: 1, offset: "fontFeatureSettings", len: 0, typ: NTI1188015, name: "fontFeatureSettings", sons: null}, 
{kind: 1, offset: "fontKerning", len: 0, typ: NTI1188015, name: "fontKerning", sons: null}, 
{kind: 1, offset: "fontLanguageOverride", len: 0, typ: NTI1188015, name: "fontLanguageOverride", sons: null}, 
{kind: 1, offset: "fontOpticalSizing", len: 0, typ: NTI1188015, name: "fontOpticalSizing", sons: null}, 
{kind: 1, offset: "fontSize", len: 0, typ: NTI1188015, name: "fontSize", sons: null}, 
{kind: 1, offset: "fontSizeAdjust", len: 0, typ: NTI1188015, name: "fontSizeAdjust", sons: null}, 
{kind: 1, offset: "fontStretch", len: 0, typ: NTI1188015, name: "fontStretch", sons: null}, 
{kind: 1, offset: "fontStyle", len: 0, typ: NTI1188015, name: "fontStyle", sons: null}, 
{kind: 1, offset: "fontSynthesis", len: 0, typ: NTI1188015, name: "fontSynthesis", sons: null}, 
{kind: 1, offset: "fontVariant", len: 0, typ: NTI1188015, name: "fontVariant", sons: null}, 
{kind: 1, offset: "fontVariantAlternates", len: 0, typ: NTI1188015, name: "fontVariantAlternates", sons: null}, 
{kind: 1, offset: "fontVariantCaps", len: 0, typ: NTI1188015, name: "fontVariantCaps", sons: null}, 
{kind: 1, offset: "fontVariantEastAsian", len: 0, typ: NTI1188015, name: "fontVariantEastAsian", sons: null}, 
{kind: 1, offset: "fontVariantLigatures", len: 0, typ: NTI1188015, name: "fontVariantLigatures", sons: null}, 
{kind: 1, offset: "fontVariantNumeric", len: 0, typ: NTI1188015, name: "fontVariantNumeric", sons: null}, 
{kind: 1, offset: "fontVariantPosition", len: 0, typ: NTI1188015, name: "fontVariantPosition", sons: null}, 
{kind: 1, offset: "fontVariationSettings", len: 0, typ: NTI1188015, name: "fontVariationSettings", sons: null}, 
{kind: 1, offset: "fontWeight", len: 0, typ: NTI1188015, name: "fontWeight", sons: null}, 
{kind: 1, offset: "gap", len: 0, typ: NTI1188015, name: "gap", sons: null}, 
{kind: 1, offset: "grid", len: 0, typ: NTI1188015, name: "grid", sons: null}, 
{kind: 1, offset: "gridArea", len: 0, typ: NTI1188015, name: "gridArea", sons: null}, 
{kind: 1, offset: "gridAutoColumns", len: 0, typ: NTI1188015, name: "gridAutoColumns", sons: null}, 
{kind: 1, offset: "gridAutoFlow", len: 0, typ: NTI1188015, name: "gridAutoFlow", sons: null}, 
{kind: 1, offset: "gridAutoRows", len: 0, typ: NTI1188015, name: "gridAutoRows", sons: null}, 
{kind: 1, offset: "gridColumn", len: 0, typ: NTI1188015, name: "gridColumn", sons: null}, 
{kind: 1, offset: "gridColumnEnd", len: 0, typ: NTI1188015, name: "gridColumnEnd", sons: null}, 
{kind: 1, offset: "gridColumnStart", len: 0, typ: NTI1188015, name: "gridColumnStart", sons: null}, 
{kind: 1, offset: "gridRow", len: 0, typ: NTI1188015, name: "gridRow", sons: null}, 
{kind: 1, offset: "gridRowEnd", len: 0, typ: NTI1188015, name: "gridRowEnd", sons: null}, 
{kind: 1, offset: "gridRowStart", len: 0, typ: NTI1188015, name: "gridRowStart", sons: null}, 
{kind: 1, offset: "gridTemplate", len: 0, typ: NTI1188015, name: "gridTemplate", sons: null}, 
{kind: 1, offset: "gridTemplateAreas", len: 0, typ: NTI1188015, name: "gridTemplateAreas", sons: null}, 
{kind: 1, offset: "gridTemplateColumns", len: 0, typ: NTI1188015, name: "gridTemplateColumns", sons: null}, 
{kind: 1, offset: "gridTemplateRows", len: 0, typ: NTI1188015, name: "gridTemplateRows", sons: null}, 
{kind: 1, offset: "hangingPunctuation", len: 0, typ: NTI1188015, name: "hangingPunctuation", sons: null}, 
{kind: 1, offset: "height", len: 0, typ: NTI1188015, name: "height", sons: null}, 
{kind: 1, offset: "hyphens", len: 0, typ: NTI1188015, name: "hyphens", sons: null}, 
{kind: 1, offset: "imageOrientation", len: 0, typ: NTI1188015, name: "imageOrientation", sons: null}, 
{kind: 1, offset: "imageRendering", len: 0, typ: NTI1188015, name: "imageRendering", sons: null}, 
{kind: 1, offset: "inlineSize", len: 0, typ: NTI1188015, name: "inlineSize", sons: null}, 
{kind: 1, offset: "inset", len: 0, typ: NTI1188015, name: "inset", sons: null}, 
{kind: 1, offset: "insetBlock", len: 0, typ: NTI1188015, name: "insetBlock", sons: null}, 
{kind: 1, offset: "insetBlockEnd", len: 0, typ: NTI1188015, name: "insetBlockEnd", sons: null}, 
{kind: 1, offset: "insetBlockStart", len: 0, typ: NTI1188015, name: "insetBlockStart", sons: null}, 
{kind: 1, offset: "insetInline", len: 0, typ: NTI1188015, name: "insetInline", sons: null}, 
{kind: 1, offset: "insetInlineEnd", len: 0, typ: NTI1188015, name: "insetInlineEnd", sons: null}, 
{kind: 1, offset: "insetInlineStart", len: 0, typ: NTI1188015, name: "insetInlineStart", sons: null}, 
{kind: 1, offset: "isolation", len: 0, typ: NTI1188015, name: "isolation", sons: null}, 
{kind: 1, offset: "justifyContent", len: 0, typ: NTI1188015, name: "justifyContent", sons: null}, 
{kind: 1, offset: "justifyItems", len: 0, typ: NTI1188015, name: "justifyItems", sons: null}, 
{kind: 1, offset: "justifySelf", len: 0, typ: NTI1188015, name: "justifySelf", sons: null}, 
{kind: 1, offset: "left", len: 0, typ: NTI1188015, name: "left", sons: null}, 
{kind: 1, offset: "letterSpacing", len: 0, typ: NTI1188015, name: "letterSpacing", sons: null}, 
{kind: 1, offset: "lineBreak", len: 0, typ: NTI1188015, name: "lineBreak", sons: null}, 
{kind: 1, offset: "lineHeight", len: 0, typ: NTI1188015, name: "lineHeight", sons: null}, 
{kind: 1, offset: "listStyle", len: 0, typ: NTI1188015, name: "listStyle", sons: null}, 
{kind: 1, offset: "listStyleImage", len: 0, typ: NTI1188015, name: "listStyleImage", sons: null}, 
{kind: 1, offset: "listStylePosition", len: 0, typ: NTI1188015, name: "listStylePosition", sons: null}, 
{kind: 1, offset: "listStyleType", len: 0, typ: NTI1188015, name: "listStyleType", sons: null}, 
{kind: 1, offset: "margin", len: 0, typ: NTI1188015, name: "margin", sons: null}, 
{kind: 1, offset: "marginBlock", len: 0, typ: NTI1188015, name: "marginBlock", sons: null}, 
{kind: 1, offset: "marginBlockEnd", len: 0, typ: NTI1188015, name: "marginBlockEnd", sons: null}, 
{kind: 1, offset: "marginBlockStart", len: 0, typ: NTI1188015, name: "marginBlockStart", sons: null}, 
{kind: 1, offset: "marginBottom", len: 0, typ: NTI1188015, name: "marginBottom", sons: null}, 
{kind: 1, offset: "marginInline", len: 0, typ: NTI1188015, name: "marginInline", sons: null}, 
{kind: 1, offset: "marginInlineEnd", len: 0, typ: NTI1188015, name: "marginInlineEnd", sons: null}, 
{kind: 1, offset: "marginInlineStart", len: 0, typ: NTI1188015, name: "marginInlineStart", sons: null}, 
{kind: 1, offset: "marginLeft", len: 0, typ: NTI1188015, name: "marginLeft", sons: null}, 
{kind: 1, offset: "marginRight", len: 0, typ: NTI1188015, name: "marginRight", sons: null}, 
{kind: 1, offset: "marginTop", len: 0, typ: NTI1188015, name: "marginTop", sons: null}, 
{kind: 1, offset: "mask", len: 0, typ: NTI1188015, name: "mask", sons: null}, 
{kind: 1, offset: "maskBorder", len: 0, typ: NTI1188015, name: "maskBorder", sons: null}, 
{kind: 1, offset: "maskBorderMode", len: 0, typ: NTI1188015, name: "maskBorderMode", sons: null}, 
{kind: 1, offset: "maskBorderOutset", len: 0, typ: NTI1188015, name: "maskBorderOutset", sons: null}, 
{kind: 1, offset: "maskBorderRepeat", len: 0, typ: NTI1188015, name: "maskBorderRepeat", sons: null}, 
{kind: 1, offset: "maskBorderSlice", len: 0, typ: NTI1188015, name: "maskBorderSlice", sons: null}, 
{kind: 1, offset: "maskBorderSource", len: 0, typ: NTI1188015, name: "maskBorderSource", sons: null}, 
{kind: 1, offset: "maskBorderWidth", len: 0, typ: NTI1188015, name: "maskBorderWidth", sons: null}, 
{kind: 1, offset: "maskClip", len: 0, typ: NTI1188015, name: "maskClip", sons: null}, 
{kind: 1, offset: "maskComposite", len: 0, typ: NTI1188015, name: "maskComposite", sons: null}, 
{kind: 1, offset: "maskImage", len: 0, typ: NTI1188015, name: "maskImage", sons: null}, 
{kind: 1, offset: "maskMode", len: 0, typ: NTI1188015, name: "maskMode", sons: null}, 
{kind: 1, offset: "maskOrigin", len: 0, typ: NTI1188015, name: "maskOrigin", sons: null}, 
{kind: 1, offset: "maskPosition", len: 0, typ: NTI1188015, name: "maskPosition", sons: null}, 
{kind: 1, offset: "maskRepeat", len: 0, typ: NTI1188015, name: "maskRepeat", sons: null}, 
{kind: 1, offset: "maskSize", len: 0, typ: NTI1188015, name: "maskSize", sons: null}, 
{kind: 1, offset: "maskType", len: 0, typ: NTI1188015, name: "maskType", sons: null}, 
{kind: 1, offset: "maxBlockSize", len: 0, typ: NTI1188015, name: "maxBlockSize", sons: null}, 
{kind: 1, offset: "maxHeight", len: 0, typ: NTI1188015, name: "maxHeight", sons: null}, 
{kind: 1, offset: "maxInlineSize", len: 0, typ: NTI1188015, name: "maxInlineSize", sons: null}, 
{kind: 1, offset: "maxWidth", len: 0, typ: NTI1188015, name: "maxWidth", sons: null}, 
{kind: 1, offset: "minBlockSize", len: 0, typ: NTI1188015, name: "minBlockSize", sons: null}, 
{kind: 1, offset: "minHeight", len: 0, typ: NTI1188015, name: "minHeight", sons: null}, 
{kind: 1, offset: "minInlineSize", len: 0, typ: NTI1188015, name: "minInlineSize", sons: null}, 
{kind: 1, offset: "minWidth", len: 0, typ: NTI1188015, name: "minWidth", sons: null}, 
{kind: 1, offset: "mixBlendMode", len: 0, typ: NTI1188015, name: "mixBlendMode", sons: null}, 
{kind: 1, offset: "objectFit", len: 0, typ: NTI1188015, name: "objectFit", sons: null}, 
{kind: 1, offset: "objectPosition", len: 0, typ: NTI1188015, name: "objectPosition", sons: null}, 
{kind: 1, offset: "offset", len: 0, typ: NTI1188015, name: "offset", sons: null}, 
{kind: 1, offset: "offsetAnchor", len: 0, typ: NTI1188015, name: "offsetAnchor", sons: null}, 
{kind: 1, offset: "offsetDistance", len: 0, typ: NTI1188015, name: "offsetDistance", sons: null}, 
{kind: 1, offset: "offsetPath", len: 0, typ: NTI1188015, name: "offsetPath", sons: null}, 
{kind: 1, offset: "offsetRotate", len: 0, typ: NTI1188015, name: "offsetRotate", sons: null}, 
{kind: 1, offset: "opacity", len: 0, typ: NTI1188015, name: "opacity", sons: null}, 
{kind: 1, offset: "order", len: 0, typ: NTI1188015, name: "order", sons: null}, 
{kind: 1, offset: "orphans", len: 0, typ: NTI1188015, name: "orphans", sons: null}, 
{kind: 1, offset: "outline", len: 0, typ: NTI1188015, name: "outline", sons: null}, 
{kind: 1, offset: "outlineColor", len: 0, typ: NTI1188015, name: "outlineColor", sons: null}, 
{kind: 1, offset: "outlineOffset", len: 0, typ: NTI1188015, name: "outlineOffset", sons: null}, 
{kind: 1, offset: "outlineStyle", len: 0, typ: NTI1188015, name: "outlineStyle", sons: null}, 
{kind: 1, offset: "outlineWidth", len: 0, typ: NTI1188015, name: "outlineWidth", sons: null}, 
{kind: 1, offset: "overflow", len: 0, typ: NTI1188015, name: "overflow", sons: null}, 
{kind: 1, offset: "overflowAnchor", len: 0, typ: NTI1188015, name: "overflowAnchor", sons: null}, 
{kind: 1, offset: "overflowBlock", len: 0, typ: NTI1188015, name: "overflowBlock", sons: null}, 
{kind: 1, offset: "overflowInline", len: 0, typ: NTI1188015, name: "overflowInline", sons: null}, 
{kind: 1, offset: "overflowWrap", len: 0, typ: NTI1188015, name: "overflowWrap", sons: null}, 
{kind: 1, offset: "overflowX", len: 0, typ: NTI1188015, name: "overflowX", sons: null}, 
{kind: 1, offset: "overflowY", len: 0, typ: NTI1188015, name: "overflowY", sons: null}, 
{kind: 1, offset: "overscrollBehavior", len: 0, typ: NTI1188015, name: "overscrollBehavior", sons: null}, 
{kind: 1, offset: "overscrollBehaviorBlock", len: 0, typ: NTI1188015, name: "overscrollBehaviorBlock", sons: null}, 
{kind: 1, offset: "overscrollBehaviorInline", len: 0, typ: NTI1188015, name: "overscrollBehaviorInline", sons: null}, 
{kind: 1, offset: "overscrollBehaviorX", len: 0, typ: NTI1188015, name: "overscrollBehaviorX", sons: null}, 
{kind: 1, offset: "overscrollBehaviorY", len: 0, typ: NTI1188015, name: "overscrollBehaviorY", sons: null}, 
{kind: 1, offset: "padding", len: 0, typ: NTI1188015, name: "padding", sons: null}, 
{kind: 1, offset: "paddingBlock", len: 0, typ: NTI1188015, name: "paddingBlock", sons: null}, 
{kind: 1, offset: "paddingBlockEnd", len: 0, typ: NTI1188015, name: "paddingBlockEnd", sons: null}, 
{kind: 1, offset: "paddingBlockStart", len: 0, typ: NTI1188015, name: "paddingBlockStart", sons: null}, 
{kind: 1, offset: "paddingBottom", len: 0, typ: NTI1188015, name: "paddingBottom", sons: null}, 
{kind: 1, offset: "paddingInline", len: 0, typ: NTI1188015, name: "paddingInline", sons: null}, 
{kind: 1, offset: "paddingInlineEnd", len: 0, typ: NTI1188015, name: "paddingInlineEnd", sons: null}, 
{kind: 1, offset: "paddingInlineStart", len: 0, typ: NTI1188015, name: "paddingInlineStart", sons: null}, 
{kind: 1, offset: "paddingLeft", len: 0, typ: NTI1188015, name: "paddingLeft", sons: null}, 
{kind: 1, offset: "paddingRight", len: 0, typ: NTI1188015, name: "paddingRight", sons: null}, 
{kind: 1, offset: "paddingTop", len: 0, typ: NTI1188015, name: "paddingTop", sons: null}, 
{kind: 1, offset: "pageBreakAfter", len: 0, typ: NTI1188015, name: "pageBreakAfter", sons: null}, 
{kind: 1, offset: "pageBreakBefore", len: 0, typ: NTI1188015, name: "pageBreakBefore", sons: null}, 
{kind: 1, offset: "pageBreakInside", len: 0, typ: NTI1188015, name: "pageBreakInside", sons: null}, 
{kind: 1, offset: "paintOrder", len: 0, typ: NTI1188015, name: "paintOrder", sons: null}, 
{kind: 1, offset: "perspective", len: 0, typ: NTI1188015, name: "perspective", sons: null}, 
{kind: 1, offset: "perspectiveOrigin", len: 0, typ: NTI1188015, name: "perspectiveOrigin", sons: null}, 
{kind: 1, offset: "placeContent", len: 0, typ: NTI1188015, name: "placeContent", sons: null}, 
{kind: 1, offset: "placeItems", len: 0, typ: NTI1188015, name: "placeItems", sons: null}, 
{kind: 1, offset: "placeSelf", len: 0, typ: NTI1188015, name: "placeSelf", sons: null}, 
{kind: 1, offset: "pointerEvents", len: 0, typ: NTI1188015, name: "pointerEvents", sons: null}, 
{kind: 1, offset: "position", len: 0, typ: NTI1188015, name: "position", sons: null}, 
{kind: 1, offset: "quotes", len: 0, typ: NTI1188015, name: "quotes", sons: null}, 
{kind: 1, offset: "resize", len: 0, typ: NTI1188015, name: "resize", sons: null}, 
{kind: 1, offset: "right", len: 0, typ: NTI1188015, name: "right", sons: null}, 
{kind: 1, offset: "rotate", len: 0, typ: NTI1188015, name: "rotate", sons: null}, 
{kind: 1, offset: "rowGap", len: 0, typ: NTI1188015, name: "rowGap", sons: null}, 
{kind: 1, offset: "scale", len: 0, typ: NTI1188015, name: "scale", sons: null}, 
{kind: 1, offset: "scrollBehavior", len: 0, typ: NTI1188015, name: "scrollBehavior", sons: null}, 
{kind: 1, offset: "scrollMargin", len: 0, typ: NTI1188015, name: "scrollMargin", sons: null}, 
{kind: 1, offset: "scrollMarginBlock", len: 0, typ: NTI1188015, name: "scrollMarginBlock", sons: null}, 
{kind: 1, offset: "scrollMarginBlockEnd", len: 0, typ: NTI1188015, name: "scrollMarginBlockEnd", sons: null}, 
{kind: 1, offset: "scrollMarginBlockStart", len: 0, typ: NTI1188015, name: "scrollMarginBlockStart", sons: null}, 
{kind: 1, offset: "scrollMarginBottom", len: 0, typ: NTI1188015, name: "scrollMarginBottom", sons: null}, 
{kind: 1, offset: "scrollMarginInline", len: 0, typ: NTI1188015, name: "scrollMarginInline", sons: null}, 
{kind: 1, offset: "scrollMarginInlineEnd", len: 0, typ: NTI1188015, name: "scrollMarginInlineEnd", sons: null}, 
{kind: 1, offset: "scrollMarginInlineStart", len: 0, typ: NTI1188015, name: "scrollMarginInlineStart", sons: null}, 
{kind: 1, offset: "scrollMarginLeft", len: 0, typ: NTI1188015, name: "scrollMarginLeft", sons: null}, 
{kind: 1, offset: "scrollMarginRight", len: 0, typ: NTI1188015, name: "scrollMarginRight", sons: null}, 
{kind: 1, offset: "scrollMarginTop", len: 0, typ: NTI1188015, name: "scrollMarginTop", sons: null}, 
{kind: 1, offset: "scrollPadding", len: 0, typ: NTI1188015, name: "scrollPadding", sons: null}, 
{kind: 1, offset: "scrollPaddingBlock", len: 0, typ: NTI1188015, name: "scrollPaddingBlock", sons: null}, 
{kind: 1, offset: "scrollPaddingBlockEnd", len: 0, typ: NTI1188015, name: "scrollPaddingBlockEnd", sons: null}, 
{kind: 1, offset: "scrollPaddingBlockStart", len: 0, typ: NTI1188015, name: "scrollPaddingBlockStart", sons: null}, 
{kind: 1, offset: "scrollPaddingBottom", len: 0, typ: NTI1188015, name: "scrollPaddingBottom", sons: null}, 
{kind: 1, offset: "scrollPaddingInline", len: 0, typ: NTI1188015, name: "scrollPaddingInline", sons: null}, 
{kind: 1, offset: "scrollPaddingInlineEnd", len: 0, typ: NTI1188015, name: "scrollPaddingInlineEnd", sons: null}, 
{kind: 1, offset: "scrollPaddingInlineStart", len: 0, typ: NTI1188015, name: "scrollPaddingInlineStart", sons: null}, 
{kind: 1, offset: "scrollPaddingLeft", len: 0, typ: NTI1188015, name: "scrollPaddingLeft", sons: null}, 
{kind: 1, offset: "scrollPaddingRight", len: 0, typ: NTI1188015, name: "scrollPaddingRight", sons: null}, 
{kind: 1, offset: "scrollPaddingTop", len: 0, typ: NTI1188015, name: "scrollPaddingTop", sons: null}, 
{kind: 1, offset: "scrollSnapAlign", len: 0, typ: NTI1188015, name: "scrollSnapAlign", sons: null}, 
{kind: 1, offset: "scrollSnapStop", len: 0, typ: NTI1188015, name: "scrollSnapStop", sons: null}, 
{kind: 1, offset: "scrollSnapType", len: 0, typ: NTI1188015, name: "scrollSnapType", sons: null}, 
{kind: 1, offset: "scrollbar3dLightColor", len: 0, typ: NTI1188015, name: "scrollbar3dLightColor", sons: null}, 
{kind: 1, offset: "scrollbarArrowColor", len: 0, typ: NTI1188015, name: "scrollbarArrowColor", sons: null}, 
{kind: 1, offset: "scrollbarBaseColor", len: 0, typ: NTI1188015, name: "scrollbarBaseColor", sons: null}, 
{kind: 1, offset: "scrollbarColor", len: 0, typ: NTI1188015, name: "scrollbarColor", sons: null}, 
{kind: 1, offset: "scrollbarDarkshadowColor", len: 0, typ: NTI1188015, name: "scrollbarDarkshadowColor", sons: null}, 
{kind: 1, offset: "scrollbarFaceColor", len: 0, typ: NTI1188015, name: "scrollbarFaceColor", sons: null}, 
{kind: 1, offset: "scrollbarHighlightColor", len: 0, typ: NTI1188015, name: "scrollbarHighlightColor", sons: null}, 
{kind: 1, offset: "scrollbarShadowColor", len: 0, typ: NTI1188015, name: "scrollbarShadowColor", sons: null}, 
{kind: 1, offset: "scrollbarTrackColor", len: 0, typ: NTI1188015, name: "scrollbarTrackColor", sons: null}, 
{kind: 1, offset: "scrollbarWidth", len: 0, typ: NTI1188015, name: "scrollbarWidth", sons: null}, 
{kind: 1, offset: "shapeImageThreshold", len: 0, typ: NTI1188015, name: "shapeImageThreshold", sons: null}, 
{kind: 1, offset: "shapeMargin", len: 0, typ: NTI1188015, name: "shapeMargin", sons: null}, 
{kind: 1, offset: "shapeOutside", len: 0, typ: NTI1188015, name: "shapeOutside", sons: null}, 
{kind: 1, offset: "tabSize", len: 0, typ: NTI1188015, name: "tabSize", sons: null}, 
{kind: 1, offset: "tableLayout", len: 0, typ: NTI1188015, name: "tableLayout", sons: null}, 
{kind: 1, offset: "textAlign", len: 0, typ: NTI1188015, name: "textAlign", sons: null}, 
{kind: 1, offset: "textAlignLast", len: 0, typ: NTI1188015, name: "textAlignLast", sons: null}, 
{kind: 1, offset: "textCombineUpright", len: 0, typ: NTI1188015, name: "textCombineUpright", sons: null}, 
{kind: 1, offset: "textDecoration", len: 0, typ: NTI1188015, name: "textDecoration", sons: null}, 
{kind: 1, offset: "textDecorationColor", len: 0, typ: NTI1188015, name: "textDecorationColor", sons: null}, 
{kind: 1, offset: "textDecorationLine", len: 0, typ: NTI1188015, name: "textDecorationLine", sons: null}, 
{kind: 1, offset: "textDecorationSkipInk", len: 0, typ: NTI1188015, name: "textDecorationSkipInk", sons: null}, 
{kind: 1, offset: "textDecorationStyle", len: 0, typ: NTI1188015, name: "textDecorationStyle", sons: null}, 
{kind: 1, offset: "textDecorationThickness", len: 0, typ: NTI1188015, name: "textDecorationThickness", sons: null}, 
{kind: 1, offset: "textEmphasis", len: 0, typ: NTI1188015, name: "textEmphasis", sons: null}, 
{kind: 1, offset: "textEmphasisColor", len: 0, typ: NTI1188015, name: "textEmphasisColor", sons: null}, 
{kind: 1, offset: "textEmphasisPosition", len: 0, typ: NTI1188015, name: "textEmphasisPosition", sons: null}, 
{kind: 1, offset: "textEmphasisStyle", len: 0, typ: NTI1188015, name: "textEmphasisStyle", sons: null}, 
{kind: 1, offset: "textIndent", len: 0, typ: NTI1188015, name: "textIndent", sons: null}, 
{kind: 1, offset: "textJustify", len: 0, typ: NTI1188015, name: "textJustify", sons: null}, 
{kind: 1, offset: "textOrientation", len: 0, typ: NTI1188015, name: "textOrientation", sons: null}, 
{kind: 1, offset: "textOverflow", len: 0, typ: NTI1188015, name: "textOverflow", sons: null}, 
{kind: 1, offset: "textRendering", len: 0, typ: NTI1188015, name: "textRendering", sons: null}, 
{kind: 1, offset: "textShadow", len: 0, typ: NTI1188015, name: "textShadow", sons: null}, 
{kind: 1, offset: "textTransform", len: 0, typ: NTI1188015, name: "textTransform", sons: null}, 
{kind: 1, offset: "textUnderlineOffset", len: 0, typ: NTI1188015, name: "textUnderlineOffset", sons: null}, 
{kind: 1, offset: "textUnderlinePosition", len: 0, typ: NTI1188015, name: "textUnderlinePosition", sons: null}, 
{kind: 1, offset: "top", len: 0, typ: NTI1188015, name: "top", sons: null}, 
{kind: 1, offset: "touchAction", len: 0, typ: NTI1188015, name: "touchAction", sons: null}, 
{kind: 1, offset: "transform", len: 0, typ: NTI1188015, name: "transform", sons: null}, 
{kind: 1, offset: "transformBox", len: 0, typ: NTI1188015, name: "transformBox", sons: null}, 
{kind: 1, offset: "transformOrigin", len: 0, typ: NTI1188015, name: "transformOrigin", sons: null}, 
{kind: 1, offset: "transformStyle", len: 0, typ: NTI1188015, name: "transformStyle", sons: null}, 
{kind: 1, offset: "transition", len: 0, typ: NTI1188015, name: "transition", sons: null}, 
{kind: 1, offset: "transitionDelay", len: 0, typ: NTI1188015, name: "transitionDelay", sons: null}, 
{kind: 1, offset: "transitionDuration", len: 0, typ: NTI1188015, name: "transitionDuration", sons: null}, 
{kind: 1, offset: "transitionProperty", len: 0, typ: NTI1188015, name: "transitionProperty", sons: null}, 
{kind: 1, offset: "transitionTimingFunction", len: 0, typ: NTI1188015, name: "transitionTimingFunction", sons: null}, 
{kind: 1, offset: "translate", len: 0, typ: NTI1188015, name: "translate", sons: null}, 
{kind: 1, offset: "unicodeBidi", len: 0, typ: NTI1188015, name: "unicodeBidi", sons: null}, 
{kind: 1, offset: "verticalAlign", len: 0, typ: NTI1188015, name: "verticalAlign", sons: null}, 
{kind: 1, offset: "visibility", len: 0, typ: NTI1188015, name: "visibility", sons: null}, 
{kind: 1, offset: "whiteSpace", len: 0, typ: NTI1188015, name: "whiteSpace", sons: null}, 
{kind: 1, offset: "widows", len: 0, typ: NTI1188015, name: "widows", sons: null}, 
{kind: 1, offset: "width", len: 0, typ: NTI1188015, name: "width", sons: null}, 
{kind: 1, offset: "willChange", len: 0, typ: NTI1188015, name: "willChange", sons: null}, 
{kind: 1, offset: "wordBreak", len: 0, typ: NTI1188015, name: "wordBreak", sons: null}, 
{kind: 1, offset: "wordSpacing", len: 0, typ: NTI1188015, name: "wordSpacing", sons: null}, 
{kind: 1, offset: "writingMode", len: 0, typ: NTI1188015, name: "writingMode", sons: null}, 
{kind: 1, offset: "zIndex", len: 0, typ: NTI1188015, name: "zIndex", sons: null}]};
NTI1853293.node = NNI1853293;
NTI1853293.base = NTI1194408;
var NNI10897207 = {kind: 2, offset: 0, typ: null, name: null, len: 6, sons: {"0": {kind: 1, offset: 0, typ: NTI10897207, name: "pkReplace", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI10897207, name: "pkRemove", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI10897207, name: "pkAppend", len: 0, sons: null}, 
"3": {kind: 1, offset: 3, typ: NTI10897207, name: "pkInsertBefore", len: 0, sons: null}, 
"4": {kind: 1, offset: 4, typ: NTI10897207, name: "pkDetach", len: 0, sons: null}, 
"5": {kind: 1, offset: 5, typ: NTI10897207, name: "pkSame", len: 0, sons: null}}};
NTI10897207.node = NNI10897207;
NTI1853610.base = NTI1853235;
NTI1853612.base = NTI1853235;
NTI1853614.base = NTI1853235;
var NNI1853233 = {kind: 2, offset: 0, typ: null, name: null, len: 12, sons: {"1": {kind: 1, offset: 1, typ: NTI1853233, name: "ElementNode", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI1853233, name: "AttributeNode", len: 0, sons: null}, 
"3": {kind: 1, offset: 3, typ: NTI1853233, name: "TextNode", len: 0, sons: null}, 
"4": {kind: 1, offset: 4, typ: NTI1853233, name: "CDATANode", len: 0, sons: null}, 
"5": {kind: 1, offset: 5, typ: NTI1853233, name: "EntityRefNode", len: 0, sons: null}, 
"6": {kind: 1, offset: 6, typ: NTI1853233, name: "EntityNode", len: 0, sons: null}, 
"7": {kind: 1, offset: 7, typ: NTI1853233, name: "ProcessingInstructionNode", len: 0, sons: null}, 
"8": {kind: 1, offset: 8, typ: NTI1853233, name: "CommentNode", len: 0, sons: null}, 
"9": {kind: 1, offset: 9, typ: NTI1853233, name: "DocumentNode", len: 0, sons: null}, 
"10": {kind: 1, offset: 10, typ: NTI1853233, name: "DocumentTypeNode", len: 0, sons: null}, 
"11": {kind: 1, offset: 11, typ: NTI1853233, name: "DocumentFragmentNode", len: 0, sons: null}, 
"12": {kind: 1, offset: 12, typ: NTI1853233, name: "NotationNode", len: 0, sons: null}}};
NTI1853233.node = NNI1853233;
var NNI1853231 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI1853231.node = NNI1853231;
NTI1853231.base = NTI1194408;
NTI1853229.base = NTI1853231;
NTI1853767.base = NTI1853243;
var NNI1853285 = {kind: 2, len: 10, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "acceptCharset", len: 0, typ: NTI1188015, name: "acceptCharset", sons: null}, 
{kind: 1, offset: "action", len: 0, typ: NTI1188015, name: "action", sons: null}, 
{kind: 1, offset: "autocomplete", len: 0, typ: NTI1188015, name: "autocomplete", sons: null}, 
{kind: 1, offset: "elements", len: 0, typ: NTI1853767, name: "elements", sons: null}, 
{kind: 1, offset: "encoding", len: 0, typ: NTI1188015, name: "encoding", sons: null}, 
{kind: 1, offset: "enctype", len: 0, typ: NTI1188015, name: "enctype", sons: null}, 
{kind: 1, offset: "length", len: 0, typ: NTI1188044, name: "length", sons: null}, 
{kind: 1, offset: "method", len: 0, typ: NTI1188015, name: "method", sons: null}, 
{kind: 1, offset: "noValidate", len: 0, typ: NTI1188064, name: "noValidate", sons: null}, 
{kind: 1, offset: "target", len: 0, typ: NTI1188015, name: "target", sons: null}]};
NTI1853285.node = NNI1853285;
NTI1853285.base = NTI1853245;
NTI1853283.base = NTI1853285;
var NNI1853281 = {kind: 2, len: 5, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "defaultSelected", len: 0, typ: NTI1188064, name: "defaultSelected", sons: null}, 
{kind: 1, offset: "selected", len: 0, typ: NTI1188064, name: "selected", sons: null}, 
{kind: 1, offset: "selectedIndex", len: 0, typ: NTI1188044, name: "selectedIndex", sons: null}, 
{kind: 1, offset: "text", len: 0, typ: NTI1188015, name: "text", sons: null}, 
{kind: 1, offset: "value", len: 0, typ: NTI1188015, name: "value", sons: null}]};
NTI1853281.node = NNI1853281;
NTI1853281.base = NTI1853245;
NTI1853279.base = NTI1853281;
NTI1853673.base = NTI1853279;
NTI1853675.base = NTI1853279;
var NNI1853245 = {kind: 2, len: 20, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "className", len: 0, typ: NTI1188015, name: "className", sons: null}, 
{kind: 1, offset: "classList", len: 0, typ: NTI1853229, name: "classList", sons: null}, 
{kind: 1, offset: "checked", len: 0, typ: NTI1188064, name: "checked", sons: null}, 
{kind: 1, offset: "defaultChecked", len: 0, typ: NTI1188064, name: "defaultChecked", sons: null}, 
{kind: 1, offset: "defaultValue", len: 0, typ: NTI1188015, name: "defaultValue", sons: null}, 
{kind: 1, offset: "disabled", len: 0, typ: NTI1188064, name: "disabled", sons: null}, 
{kind: 1, offset: "form", len: 0, typ: NTI1853283, name: "form", sons: null}, 
{kind: 1, offset: "name", len: 0, typ: NTI1188015, name: "name", sons: null}, 
{kind: 1, offset: "readOnly", len: 0, typ: NTI1188064, name: "readOnly", sons: null}, 
{kind: 1, offset: "options", len: 0, typ: NTI1853673, name: "options", sons: null}, 
{kind: 1, offset: "selectedOptions", len: 0, typ: NTI1853675, name: "selectedOptions", sons: null}, 
{kind: 1, offset: "clientWidth", len: 0, typ: NTI1188044, name: "clientWidth", sons: null}, 
{kind: 1, offset: "clientHeight", len: 0, typ: NTI1188044, name: "clientHeight", sons: null}, 
{kind: 1, offset: "contentEditable", len: 0, typ: NTI1188015, name: "contentEditable", sons: null}, 
{kind: 1, offset: "isContentEditable", len: 0, typ: NTI1188064, name: "isContentEditable", sons: null}, 
{kind: 1, offset: "dir", len: 0, typ: NTI1188015, name: "dir", sons: null}, 
{kind: 1, offset: "offsetHeight", len: 0, typ: NTI1188044, name: "offsetHeight", sons: null}, 
{kind: 1, offset: "offsetWidth", len: 0, typ: NTI1188044, name: "offsetWidth", sons: null}, 
{kind: 1, offset: "offsetLeft", len: 0, typ: NTI1188044, name: "offsetLeft", sons: null}, 
{kind: 1, offset: "offsetTop", len: 0, typ: NTI1188044, name: "offsetTop", sons: null}]};
NTI1853245.node = NNI1853245;
NTI1853245.base = NTI1853237;
NTI1853243.base = NTI1853245;
var NNI1853277 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "text", len: 0, typ: NTI1188015, name: "text", sons: null}, 
{kind: 1, offset: "x", len: 0, typ: NTI1188044, name: "x", sons: null}, 
{kind: 1, offset: "y", len: 0, typ: NTI1188044, name: "y", sons: null}]};
NTI1853277.node = NNI1853277;
NTI1853277.base = NTI1853245;
NTI1853275.base = NTI1853277;
NTI1853651.base = NTI1853275;
NTI1853653.base = NTI1853283;
var NNI1853289 = {kind: 2, len: 8, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "border", len: 0, typ: NTI1188044, name: "border", sons: null}, 
{kind: 1, offset: "complete", len: 0, typ: NTI1188064, name: "complete", sons: null}, 
{kind: 1, offset: "height", len: 0, typ: NTI1188044, name: "height", sons: null}, 
{kind: 1, offset: "hspace", len: 0, typ: NTI1188044, name: "hspace", sons: null}, 
{kind: 1, offset: "lowsrc", len: 0, typ: NTI1188015, name: "lowsrc", sons: null}, 
{kind: 1, offset: "src", len: 0, typ: NTI1188015, name: "src", sons: null}, 
{kind: 1, offset: "vspace", len: 0, typ: NTI1188044, name: "vspace", sons: null}, 
{kind: 1, offset: "width", len: 0, typ: NTI1188044, name: "width", sons: null}]};
NTI1853289.node = NNI1853289;
NTI1853289.base = NTI1853245;
NTI1853287.base = NTI1853289;
NTI1853655.base = NTI1853287;
NTI1853657.base = NTI1853243;
var NNI1853273 = {kind: 2, len: 6, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "height", len: 0, typ: NTI1188044, name: "height", sons: null}, 
{kind: 1, offset: "hspace", len: 0, typ: NTI1188044, name: "hspace", sons: null}, 
{kind: 1, offset: "src", len: 0, typ: NTI1188015, name: "src", sons: null}, 
{kind: 1, offset: "width", len: 0, typ: NTI1188044, name: "width", sons: null}, 
{kind: 1, offset: "type", len: 0, typ: NTI1188015, name: "type", sons: null}, 
{kind: 1, offset: "vspace", len: 0, typ: NTI1188044, name: "vspace", sons: null}]};
NTI1853273.node = NNI1853273;
NTI1853273.base = NTI1853245;
NTI1853271.base = NTI1853273;
NTI1853659.base = NTI1853271;
var NNI1853269 = {kind: 2, len: 4, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "target", len: 0, typ: NTI1188015, name: "target", sons: null}, 
{kind: 1, offset: "text", len: 0, typ: NTI1188015, name: "text", sons: null}, 
{kind: 1, offset: "x", len: 0, typ: NTI1188044, name: "x", sons: null}, 
{kind: 1, offset: "y", len: 0, typ: NTI1188044, name: "y", sons: null}]};
NTI1853269.node = NNI1853269;
NTI1853269.base = NTI1853245;
NTI1853267.base = NTI1853269;
NTI1853661.base = NTI1853267;
var NNI1854618 = {kind: 1, offset: "then", len: 0, typ: NTI1854619, name: "then", sons: null};
NTI1854618.node = NNI1854618;
NTI1853385.base = NTI1854618;
var NNI1854626 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "ready", len: 0, typ: NTI1853385, name: "ready", sons: null}, 
{kind: 1, offset: "onloadingdone", len: 0, typ: NTI1854628, name: "onloadingdone", sons: null}]};
NTI1854626.node = NNI1854626;
NTI1853387.base = NTI1854626;
var NNI1853241 = {kind: 2, len: 23, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "activeElement", len: 0, typ: NTI1853243, name: "activeElement", sons: null}, 
{kind: 1, offset: "documentElement", len: 0, typ: NTI1853243, name: "documentElement", sons: null}, 
{kind: 1, offset: "alinkColor", len: 0, typ: NTI1188015, name: "alinkColor", sons: null}, 
{kind: 1, offset: "bgColor", len: 0, typ: NTI1188015, name: "bgColor", sons: null}, 
{kind: 1, offset: "body", len: 0, typ: NTI1853243, name: "body", sons: null}, 
{kind: 1, offset: "charset", len: 0, typ: NTI1188015, name: "charset", sons: null}, 
{kind: 1, offset: "cookie", len: 0, typ: NTI1188015, name: "cookie", sons: null}, 
{kind: 1, offset: "defaultCharset", len: 0, typ: NTI1188015, name: "defaultCharset", sons: null}, 
{kind: 1, offset: "fgColor", len: 0, typ: NTI1188015, name: "fgColor", sons: null}, 
{kind: 1, offset: "head", len: 0, typ: NTI1853243, name: "head", sons: null}, 
{kind: 1, offset: "lastModified", len: 0, typ: NTI1188015, name: "lastModified", sons: null}, 
{kind: 1, offset: "linkColor", len: 0, typ: NTI1188015, name: "linkColor", sons: null}, 
{kind: 1, offset: "referrer", len: 0, typ: NTI1188015, name: "referrer", sons: null}, 
{kind: 1, offset: "title", len: 0, typ: NTI1188015, name: "title", sons: null}, 
{kind: 1, offset: "URL", len: 0, typ: NTI1188015, name: "URL", sons: null}, 
{kind: 1, offset: "vlinkColor", len: 0, typ: NTI1188015, name: "vlinkColor", sons: null}, 
{kind: 1, offset: "anchors", len: 0, typ: NTI1853651, name: "anchors", sons: null}, 
{kind: 1, offset: "forms", len: 0, typ: NTI1853653, name: "forms", sons: null}, 
{kind: 1, offset: "images", len: 0, typ: NTI1853655, name: "images", sons: null}, 
{kind: 1, offset: "applets", len: 0, typ: NTI1853657, name: "applets", sons: null}, 
{kind: 1, offset: "embeds", len: 0, typ: NTI1853659, name: "embeds", sons: null}, 
{kind: 1, offset: "links", len: 0, typ: NTI1853661, name: "links", sons: null}, 
{kind: 1, offset: "fonts", len: 0, typ: NTI1853387, name: "fonts", sons: null}]};
NTI1853241.node = NNI1853241;
NTI1853241.base = NTI1853237;
NTI1853239.base = NTI1853241;
NTI1853291.base = NTI1853293;
var NNI1853237 = {kind: 2, len: 22, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "attributes", len: 0, typ: NTI1853610, name: "attributes", sons: null}, 
{kind: 1, offset: "childNodes", len: 0, typ: NTI1853612, name: "childNodes", sons: null}, 
{kind: 1, offset: "children", len: 0, typ: NTI1853614, name: "children", sons: null}, 
{kind: 1, offset: "data", len: 0, typ: NTI1188015, name: "data", sons: null}, 
{kind: 1, offset: "firstChild", len: 0, typ: NTI1853235, name: "firstChild", sons: null}, 
{kind: 1, offset: "lastChild", len: 0, typ: NTI1853235, name: "lastChild", sons: null}, 
{kind: 1, offset: "nextSibling", len: 0, typ: NTI1853235, name: "nextSibling", sons: null}, 
{kind: 1, offset: "nodeName", len: 0, typ: NTI1188015, name: "nodeName", sons: null}, 
{kind: 1, offset: "nodeType", len: 0, typ: NTI1853233, name: "nodeType", sons: null}, 
{kind: 1, offset: "nodeValue", len: 0, typ: NTI1188015, name: "nodeValue", sons: null}, 
{kind: 1, offset: "parentNode", len: 0, typ: NTI1853235, name: "parentNode", sons: null}, 
{kind: 1, offset: "content", len: 0, typ: NTI1853235, name: "content", sons: null}, 
{kind: 1, offset: "previousSibling", len: 0, typ: NTI1853235, name: "previousSibling", sons: null}, 
{kind: 1, offset: "ownerDocument", len: 0, typ: NTI1853239, name: "ownerDocument", sons: null}, 
{kind: 1, offset: "innerHTML", len: 0, typ: NTI1188015, name: "innerHTML", sons: null}, 
{kind: 1, offset: "outerHTML", len: 0, typ: NTI1188015, name: "outerHTML", sons: null}, 
{kind: 1, offset: "innerText", len: 0, typ: NTI1188015, name: "innerText", sons: null}, 
{kind: 1, offset: "textContent", len: 0, typ: NTI1188015, name: "textContent", sons: null}, 
{kind: 1, offset: "style", len: 0, typ: NTI1853291, name: "style", sons: null}, 
{kind: 1, offset: "baseURI", len: 0, typ: NTI1188015, name: "baseURI", sons: null}, 
{kind: 1, offset: "parentElement", len: 0, typ: NTI1853243, name: "parentElement", sons: null}, 
{kind: 1, offset: "isConnected", len: 0, typ: NTI1188064, name: "isConnected", sons: null}]};
NTI1853237.node = NNI1853237;
var NNI1853205 = {kind: 2, len: 23, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "onabort", len: 0, typ: NTI1853388, name: "onabort", sons: null}, 
{kind: 1, offset: "onblur", len: 0, typ: NTI1853392, name: "onblur", sons: null}, 
{kind: 1, offset: "onchange", len: 0, typ: NTI1853396, name: "onchange", sons: null}, 
{kind: 1, offset: "onclick", len: 0, typ: NTI1853400, name: "onclick", sons: null}, 
{kind: 1, offset: "ondblclick", len: 0, typ: NTI1853404, name: "ondblclick", sons: null}, 
{kind: 1, offset: "onerror", len: 0, typ: NTI1853408, name: "onerror", sons: null}, 
{kind: 1, offset: "onfocus", len: 0, typ: NTI1853412, name: "onfocus", sons: null}, 
{kind: 1, offset: "onkeydown", len: 0, typ: NTI1853416, name: "onkeydown", sons: null}, 
{kind: 1, offset: "onkeypress", len: 0, typ: NTI1853420, name: "onkeypress", sons: null}, 
{kind: 1, offset: "onkeyup", len: 0, typ: NTI1853424, name: "onkeyup", sons: null}, 
{kind: 1, offset: "onload", len: 0, typ: NTI1853428, name: "onload", sons: null}, 
{kind: 1, offset: "onmousedown", len: 0, typ: NTI1853432, name: "onmousedown", sons: null}, 
{kind: 1, offset: "onmousemove", len: 0, typ: NTI1853436, name: "onmousemove", sons: null}, 
{kind: 1, offset: "onmouseout", len: 0, typ: NTI1853440, name: "onmouseout", sons: null}, 
{kind: 1, offset: "onmouseover", len: 0, typ: NTI1853444, name: "onmouseover", sons: null}, 
{kind: 1, offset: "onmouseup", len: 0, typ: NTI1853448, name: "onmouseup", sons: null}, 
{kind: 1, offset: "onreset", len: 0, typ: NTI1853452, name: "onreset", sons: null}, 
{kind: 1, offset: "onselect", len: 0, typ: NTI1853456, name: "onselect", sons: null}, 
{kind: 1, offset: "onsubmit", len: 0, typ: NTI1853460, name: "onsubmit", sons: null}, 
{kind: 1, offset: "onunload", len: 0, typ: NTI1853464, name: "onunload", sons: null}, 
{kind: 1, offset: "onloadstart", len: 0, typ: NTI1853468, name: "onloadstart", sons: null}, 
{kind: 1, offset: "onprogress", len: 0, typ: NTI1853472, name: "onprogress", sons: null}, 
{kind: 1, offset: "onloadend", len: 0, typ: NTI1853476, name: "onloadend", sons: null}]};
NTI1853205.node = NNI1853205;
NTI1853205.base = NTI1194408;
NTI1853237.base = NTI1853205;
NTI1853235.base = NTI1853237;
var NNI10462028 = {kind: 2, offset: 0, typ: null, name: null, len: 120, sons: {"0": {kind: 1, offset: 0, typ: NTI10462028, name: "#text", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI10462028, name: "#int", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI10462028, name: "#bool", len: 0, sons: null}, 
"3": {kind: 1, offset: 3, typ: NTI10462028, name: "#vthunk", len: 0, sons: null}, 
"4": {kind: 1, offset: 4, typ: NTI10462028, name: "#dthunk", len: 0, sons: null}, 
"5": {kind: 1, offset: 5, typ: NTI10462028, name: "#component", len: 0, sons: null}, 
"6": {kind: 1, offset: 6, typ: NTI10462028, name: "#verbatim", len: 0, sons: null}, 
"7": {kind: 1, offset: 7, typ: NTI10462028, name: "html", len: 0, sons: null}, 
"8": {kind: 1, offset: 8, typ: NTI10462028, name: "head", len: 0, sons: null}, 
"9": {kind: 1, offset: 9, typ: NTI10462028, name: "title", len: 0, sons: null}, 
"10": {kind: 1, offset: 10, typ: NTI10462028, name: "base", len: 0, sons: null}, 
"11": {kind: 1, offset: 11, typ: NTI10462028, name: "link", len: 0, sons: null}, 
"12": {kind: 1, offset: 12, typ: NTI10462028, name: "meta", len: 0, sons: null}, 
"13": {kind: 1, offset: 13, typ: NTI10462028, name: "style", len: 0, sons: null}, 
"14": {kind: 1, offset: 14, typ: NTI10462028, name: "script", len: 0, sons: null}, 
"15": {kind: 1, offset: 15, typ: NTI10462028, name: "noscript", len: 0, sons: null}, 
"16": {kind: 1, offset: 16, typ: NTI10462028, name: "body", len: 0, sons: null}, 
"17": {kind: 1, offset: 17, typ: NTI10462028, name: "section", len: 0, sons: null}, 
"18": {kind: 1, offset: 18, typ: NTI10462028, name: "nav", len: 0, sons: null}, 
"19": {kind: 1, offset: 19, typ: NTI10462028, name: "article", len: 0, sons: null}, 
"20": {kind: 1, offset: 20, typ: NTI10462028, name: "aside", len: 0, sons: null}, 
"21": {kind: 1, offset: 21, typ: NTI10462028, name: "h1", len: 0, sons: null}, 
"22": {kind: 1, offset: 22, typ: NTI10462028, name: "h2", len: 0, sons: null}, 
"23": {kind: 1, offset: 23, typ: NTI10462028, name: "h3", len: 0, sons: null}, 
"24": {kind: 1, offset: 24, typ: NTI10462028, name: "h4", len: 0, sons: null}, 
"25": {kind: 1, offset: 25, typ: NTI10462028, name: "h5", len: 0, sons: null}, 
"26": {kind: 1, offset: 26, typ: NTI10462028, name: "h6", len: 0, sons: null}, 
"27": {kind: 1, offset: 27, typ: NTI10462028, name: "header", len: 0, sons: null}, 
"28": {kind: 1, offset: 28, typ: NTI10462028, name: "footer", len: 0, sons: null}, 
"29": {kind: 1, offset: 29, typ: NTI10462028, name: "address", len: 0, sons: null}, 
"30": {kind: 1, offset: 30, typ: NTI10462028, name: "main", len: 0, sons: null}, 
"31": {kind: 1, offset: 31, typ: NTI10462028, name: "p", len: 0, sons: null}, 
"32": {kind: 1, offset: 32, typ: NTI10462028, name: "hr", len: 0, sons: null}, 
"33": {kind: 1, offset: 33, typ: NTI10462028, name: "pre", len: 0, sons: null}, 
"34": {kind: 1, offset: 34, typ: NTI10462028, name: "blockquote", len: 0, sons: null}, 
"35": {kind: 1, offset: 35, typ: NTI10462028, name: "ol", len: 0, sons: null}, 
"36": {kind: 1, offset: 36, typ: NTI10462028, name: "ul", len: 0, sons: null}, 
"37": {kind: 1, offset: 37, typ: NTI10462028, name: "li", len: 0, sons: null}, 
"38": {kind: 1, offset: 38, typ: NTI10462028, name: "dl", len: 0, sons: null}, 
"39": {kind: 1, offset: 39, typ: NTI10462028, name: "dt", len: 0, sons: null}, 
"40": {kind: 1, offset: 40, typ: NTI10462028, name: "dd", len: 0, sons: null}, 
"41": {kind: 1, offset: 41, typ: NTI10462028, name: "figure", len: 0, sons: null}, 
"42": {kind: 1, offset: 42, typ: NTI10462028, name: "figcaption", len: 0, sons: null}, 
"43": {kind: 1, offset: 43, typ: NTI10462028, name: "div", len: 0, sons: null}, 
"44": {kind: 1, offset: 44, typ: NTI10462028, name: "a", len: 0, sons: null}, 
"45": {kind: 1, offset: 45, typ: NTI10462028, name: "em", len: 0, sons: null}, 
"46": {kind: 1, offset: 46, typ: NTI10462028, name: "strong", len: 0, sons: null}, 
"47": {kind: 1, offset: 47, typ: NTI10462028, name: "small", len: 0, sons: null}, 
"48": {kind: 1, offset: 48, typ: NTI10462028, name: "s", len: 0, sons: null}, 
"49": {kind: 1, offset: 49, typ: NTI10462028, name: "cite", len: 0, sons: null}, 
"50": {kind: 1, offset: 50, typ: NTI10462028, name: "quote", len: 0, sons: null}, 
"51": {kind: 1, offset: 51, typ: NTI10462028, name: "dfn", len: 0, sons: null}, 
"52": {kind: 1, offset: 52, typ: NTI10462028, name: "abbr", len: 0, sons: null}, 
"53": {kind: 1, offset: 53, typ: NTI10462028, name: "data", len: 0, sons: null}, 
"54": {kind: 1, offset: 54, typ: NTI10462028, name: "time", len: 0, sons: null}, 
"55": {kind: 1, offset: 55, typ: NTI10462028, name: "code", len: 0, sons: null}, 
"56": {kind: 1, offset: 56, typ: NTI10462028, name: "var", len: 0, sons: null}, 
"57": {kind: 1, offset: 57, typ: NTI10462028, name: "samp", len: 0, sons: null}, 
"58": {kind: 1, offset: 58, typ: NTI10462028, name: "kdb", len: 0, sons: null}, 
"59": {kind: 1, offset: 59, typ: NTI10462028, name: "sub", len: 0, sons: null}, 
"60": {kind: 1, offset: 60, typ: NTI10462028, name: "sup", len: 0, sons: null}, 
"61": {kind: 1, offset: 61, typ: NTI10462028, name: "i", len: 0, sons: null}, 
"62": {kind: 1, offset: 62, typ: NTI10462028, name: "b", len: 0, sons: null}, 
"63": {kind: 1, offset: 63, typ: NTI10462028, name: "u", len: 0, sons: null}, 
"64": {kind: 1, offset: 64, typ: NTI10462028, name: "mark", len: 0, sons: null}, 
"65": {kind: 1, offset: 65, typ: NTI10462028, name: "ruby", len: 0, sons: null}, 
"66": {kind: 1, offset: 66, typ: NTI10462028, name: "rt", len: 0, sons: null}, 
"67": {kind: 1, offset: 67, typ: NTI10462028, name: "rp", len: 0, sons: null}, 
"68": {kind: 1, offset: 68, typ: NTI10462028, name: "bdi", len: 0, sons: null}, 
"69": {kind: 1, offset: 69, typ: NTI10462028, name: "dbo", len: 0, sons: null}, 
"70": {kind: 1, offset: 70, typ: NTI10462028, name: "span", len: 0, sons: null}, 
"71": {kind: 1, offset: 71, typ: NTI10462028, name: "br", len: 0, sons: null}, 
"72": {kind: 1, offset: 72, typ: NTI10462028, name: "wbr", len: 0, sons: null}, 
"73": {kind: 1, offset: 73, typ: NTI10462028, name: "ins", len: 0, sons: null}, 
"74": {kind: 1, offset: 74, typ: NTI10462028, name: "del", len: 0, sons: null}, 
"75": {kind: 1, offset: 75, typ: NTI10462028, name: "img", len: 0, sons: null}, 
"76": {kind: 1, offset: 76, typ: NTI10462028, name: "iframe", len: 0, sons: null}, 
"77": {kind: 1, offset: 77, typ: NTI10462028, name: "embed", len: 0, sons: null}, 
"78": {kind: 1, offset: 78, typ: NTI10462028, name: "object", len: 0, sons: null}, 
"79": {kind: 1, offset: 79, typ: NTI10462028, name: "param", len: 0, sons: null}, 
"80": {kind: 1, offset: 80, typ: NTI10462028, name: "video", len: 0, sons: null}, 
"81": {kind: 1, offset: 81, typ: NTI10462028, name: "audio", len: 0, sons: null}, 
"82": {kind: 1, offset: 82, typ: NTI10462028, name: "source", len: 0, sons: null}, 
"83": {kind: 1, offset: 83, typ: NTI10462028, name: "track", len: 0, sons: null}, 
"84": {kind: 1, offset: 84, typ: NTI10462028, name: "canvas", len: 0, sons: null}, 
"85": {kind: 1, offset: 85, typ: NTI10462028, name: "map", len: 0, sons: null}, 
"86": {kind: 1, offset: 86, typ: NTI10462028, name: "area", len: 0, sons: null}, 
"87": {kind: 1, offset: 87, typ: NTI10462028, name: "svg", len: 0, sons: null}, 
"88": {kind: 1, offset: 88, typ: NTI10462028, name: "math", len: 0, sons: null}, 
"89": {kind: 1, offset: 89, typ: NTI10462028, name: "path", len: 0, sons: null}, 
"90": {kind: 1, offset: 90, typ: NTI10462028, name: "circle", len: 0, sons: null}, 
"91": {kind: 1, offset: 91, typ: NTI10462028, name: "table", len: 0, sons: null}, 
"92": {kind: 1, offset: 92, typ: NTI10462028, name: "caption", len: 0, sons: null}, 
"93": {kind: 1, offset: 93, typ: NTI10462028, name: "colgroup", len: 0, sons: null}, 
"94": {kind: 1, offset: 94, typ: NTI10462028, name: "col", len: 0, sons: null}, 
"95": {kind: 1, offset: 95, typ: NTI10462028, name: "tbody", len: 0, sons: null}, 
"96": {kind: 1, offset: 96, typ: NTI10462028, name: "thead", len: 0, sons: null}, 
"97": {kind: 1, offset: 97, typ: NTI10462028, name: "tfoot", len: 0, sons: null}, 
"98": {kind: 1, offset: 98, typ: NTI10462028, name: "tr", len: 0, sons: null}, 
"99": {kind: 1, offset: 99, typ: NTI10462028, name: "td", len: 0, sons: null}, 
"100": {kind: 1, offset: 100, typ: NTI10462028, name: "th", len: 0, sons: null}, 
"101": {kind: 1, offset: 101, typ: NTI10462028, name: "form", len: 0, sons: null}, 
"102": {kind: 1, offset: 102, typ: NTI10462028, name: "fieldset", len: 0, sons: null}, 
"103": {kind: 1, offset: 103, typ: NTI10462028, name: "legend", len: 0, sons: null}, 
"104": {kind: 1, offset: 104, typ: NTI10462028, name: "label", len: 0, sons: null}, 
"105": {kind: 1, offset: 105, typ: NTI10462028, name: "input", len: 0, sons: null}, 
"106": {kind: 1, offset: 106, typ: NTI10462028, name: "button", len: 0, sons: null}, 
"107": {kind: 1, offset: 107, typ: NTI10462028, name: "select", len: 0, sons: null}, 
"108": {kind: 1, offset: 108, typ: NTI10462028, name: "datalist", len: 0, sons: null}, 
"109": {kind: 1, offset: 109, typ: NTI10462028, name: "optgroup", len: 0, sons: null}, 
"110": {kind: 1, offset: 110, typ: NTI10462028, name: "option", len: 0, sons: null}, 
"111": {kind: 1, offset: 111, typ: NTI10462028, name: "textarea", len: 0, sons: null}, 
"112": {kind: 1, offset: 112, typ: NTI10462028, name: "keygen", len: 0, sons: null}, 
"113": {kind: 1, offset: 113, typ: NTI10462028, name: "output", len: 0, sons: null}, 
"114": {kind: 1, offset: 114, typ: NTI10462028, name: "progress", len: 0, sons: null}, 
"115": {kind: 1, offset: 115, typ: NTI10462028, name: "meter", len: 0, sons: null}, 
"116": {kind: 1, offset: 116, typ: NTI10462028, name: "details", len: 0, sons: null}, 
"117": {kind: 1, offset: 117, typ: NTI10462028, name: "summary", len: 0, sons: null}, 
"118": {kind: 1, offset: 118, typ: NTI10462028, name: "command", len: 0, sons: null}, 
"119": {kind: 1, offset: 119, typ: NTI10462028, name: "menu", len: 0, sons: null}}};
NTI10462028.node = NNI10462028;
NTI10465037.base = NTI10465022;
NTI10465039.base = NTI1188015;
var NNI10462152 = {kind: 2, offset: 0, typ: null, name: null, len: 37, sons: {"0": {kind: 1, offset: 0, typ: NTI10462152, name: "onclick", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI10462152, name: "oncontextmenu", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI10462152, name: "ondblclick", len: 0, sons: null}, 
"3": {kind: 1, offset: 3, typ: NTI10462152, name: "onkeyup", len: 0, sons: null}, 
"4": {kind: 1, offset: 4, typ: NTI10462152, name: "onkeydown", len: 0, sons: null}, 
"5": {kind: 1, offset: 5, typ: NTI10462152, name: "onkeypressed", len: 0, sons: null}, 
"6": {kind: 1, offset: 6, typ: NTI10462152, name: "onfocus", len: 0, sons: null}, 
"7": {kind: 1, offset: 7, typ: NTI10462152, name: "onblur", len: 0, sons: null}, 
"8": {kind: 1, offset: 8, typ: NTI10462152, name: "onchange", len: 0, sons: null}, 
"9": {kind: 1, offset: 9, typ: NTI10462152, name: "onscroll", len: 0, sons: null}, 
"10": {kind: 1, offset: 10, typ: NTI10462152, name: "onmousedown", len: 0, sons: null}, 
"11": {kind: 1, offset: 11, typ: NTI10462152, name: "onmouseenter", len: 0, sons: null}, 
"12": {kind: 1, offset: 12, typ: NTI10462152, name: "onmouseleave", len: 0, sons: null}, 
"13": {kind: 1, offset: 13, typ: NTI10462152, name: "onmousemove", len: 0, sons: null}, 
"14": {kind: 1, offset: 14, typ: NTI10462152, name: "onmouseout", len: 0, sons: null}, 
"15": {kind: 1, offset: 15, typ: NTI10462152, name: "onmouseover", len: 0, sons: null}, 
"16": {kind: 1, offset: 16, typ: NTI10462152, name: "onmouseup", len: 0, sons: null}, 
"17": {kind: 1, offset: 17, typ: NTI10462152, name: "ondrag", len: 0, sons: null}, 
"18": {kind: 1, offset: 18, typ: NTI10462152, name: "ondragend", len: 0, sons: null}, 
"19": {kind: 1, offset: 19, typ: NTI10462152, name: "ondragenter", len: 0, sons: null}, 
"20": {kind: 1, offset: 20, typ: NTI10462152, name: "ondragleave", len: 0, sons: null}, 
"21": {kind: 1, offset: 21, typ: NTI10462152, name: "ondragover", len: 0, sons: null}, 
"22": {kind: 1, offset: 22, typ: NTI10462152, name: "ondragstart", len: 0, sons: null}, 
"23": {kind: 1, offset: 23, typ: NTI10462152, name: "ondrop", len: 0, sons: null}, 
"24": {kind: 1, offset: 24, typ: NTI10462152, name: "onsubmit", len: 0, sons: null}, 
"25": {kind: 1, offset: 25, typ: NTI10462152, name: "oninput", len: 0, sons: null}, 
"26": {kind: 1, offset: 26, typ: NTI10462152, name: "onanimationstart", len: 0, sons: null}, 
"27": {kind: 1, offset: 27, typ: NTI10462152, name: "onanimationend", len: 0, sons: null}, 
"28": {kind: 1, offset: 28, typ: NTI10462152, name: "onanimationiteration", len: 0, sons: null}, 
"29": {kind: 1, offset: 29, typ: NTI10462152, name: "onkeyupenter", len: 0, sons: null}, 
"30": {kind: 1, offset: 30, typ: NTI10462152, name: "onkeyuplater", len: 0, sons: null}, 
"31": {kind: 1, offset: 31, typ: NTI10462152, name: "onload", len: 0, sons: null}, 
"32": {kind: 1, offset: 32, typ: NTI10462152, name: "ontransitioncancel", len: 0, sons: null}, 
"33": {kind: 1, offset: 33, typ: NTI10462152, name: "ontransitionend", len: 0, sons: null}, 
"34": {kind: 1, offset: 34, typ: NTI10462152, name: "ontransitionrun", len: 0, sons: null}, 
"35": {kind: 1, offset: 35, typ: NTI10462152, name: "ontransitionstart", len: 0, sons: null}, 
"36": {kind: 1, offset: 36, typ: NTI10462152, name: "onwheel", len: 0, sons: null}}};
NTI10462152.node = NNI10462152;
var NNI10465030 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI10462152, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI10465074, name: "Field1", sons: null}, 
{kind: 1, offset: "Field2", len: 0, typ: NTI10465076, name: "Field2", sons: null}]};
NTI10465030.node = NNI10465030;
NTI10465018.base = NTI10465030;
var NNI10416096 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI10416096.node = NNI10416096;
NTI10416097.base = NTI10416096;
var NNI10465031 = {kind: 2, len: 10, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "kind", len: 0, typ: NTI10462028, name: "kind", sons: null}, 
{kind: 1, offset: "index", len: 0, typ: NTI1188044, name: "index", sons: null}, 
{kind: 1, offset: "id", len: 0, typ: NTI1188015, name: "id", sons: null}, 
{kind: 1, offset: "class", len: 0, typ: NTI1188015, name: "class", sons: null}, 
{kind: 1, offset: "text", len: 0, typ: NTI1188015, name: "text", sons: null}, 
{kind: 1, offset: "kids", len: 0, typ: NTI10465037, name: "kids", sons: null}, 
{kind: 1, offset: "attrs", len: 0, typ: NTI10465039, name: "attrs", sons: null}, 
{kind: 1, offset: "events", len: 0, typ: NTI10465018, name: "events", sons: null}, 
{kind: 1, offset: "style", len: 0, typ: NTI10416097, name: "style", sons: null}, 
{kind: 1, offset: "dom", len: 0, typ: NTI1853235, name: "dom", sons: null}]};
NTI10465031.node = NNI10465031;
NTI10465031.base = NTI1194408;
NTI10465022.base = NTI10465031;
var NNI10897209 = {kind: 2, len: 5, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "k", len: 0, typ: NTI10897207, name: "k", sons: null}, 
{kind: 1, offset: "parent", len: 0, typ: NTI1853235, name: "parent", sons: null}, 
{kind: 1, offset: "current", len: 0, typ: NTI1853235, name: "current", sons: null}, 
{kind: 1, offset: "newNode", len: 0, typ: NTI10465022, name: "newNode", sons: null}, 
{kind: 1, offset: "oldNode", len: 0, typ: NTI10465022, name: "oldNode", sons: null}]};
NTI10897209.node = NNI10897209;
var NNI10897211 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "parent", len: 0, typ: NTI10465022, name: "parent", sons: null}, 
{kind: 1, offset: "newChild", len: 0, typ: NTI10465022, name: "newChild", sons: null}, 
{kind: 1, offset: "pos", len: 0, typ: NTI1188044, name: "pos", sons: null}]};
NTI10897211.node = NNI10897211;
var NNI11956015 = {kind: 2, offset: 0, typ: null, name: null, len: 14, sons: {"0": {kind: 1, offset: 0, typ: NTI11956015, name: "xmlError", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI11956015, name: "xmlEof", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI11956015, name: "xmlCharData", len: 0, sons: null}, 
"3": {kind: 1, offset: 3, typ: NTI11956015, name: "xmlWhitespace", len: 0, sons: null}, 
"4": {kind: 1, offset: 4, typ: NTI11956015, name: "xmlComment", len: 0, sons: null}, 
"5": {kind: 1, offset: 5, typ: NTI11956015, name: "xmlPI", len: 0, sons: null}, 
"6": {kind: 1, offset: 6, typ: NTI11956015, name: "xmlElementStart", len: 0, sons: null}, 
"7": {kind: 1, offset: 7, typ: NTI11956015, name: "xmlElementEnd", len: 0, sons: null}, 
"8": {kind: 1, offset: 8, typ: NTI11956015, name: "xmlElementOpen", len: 0, sons: null}, 
"9": {kind: 1, offset: 9, typ: NTI11956015, name: "xmlAttribute", len: 0, sons: null}, 
"10": {kind: 1, offset: 10, typ: NTI11956015, name: "xmlElementClose", len: 0, sons: null}, 
"11": {kind: 1, offset: 11, typ: NTI11956015, name: "xmlCData", len: 0, sons: null}, 
"12": {kind: 1, offset: 12, typ: NTI11956015, name: "xmlEntity", len: 0, sons: null}, 
"13": {kind: 1, offset: 13, typ: NTI11956015, name: "xmlSpecial", len: 0, sons: null}}};
NTI11956015.node = NNI11956015;
var NNI11956017 = {kind: 2, offset: 0, typ: null, name: null, len: 10, sons: {"0": {kind: 1, offset: 0, typ: NTI11956017, name: "errNone", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI11956017, name: "errEndOfCDataExpected", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI11956017, name: "errNameExpected", len: 0, sons: null}, 
"3": {kind: 1, offset: 3, typ: NTI11956017, name: "errSemicolonExpected", len: 0, sons: null}, 
"4": {kind: 1, offset: 4, typ: NTI11956017, name: "errQmGtExpected", len: 0, sons: null}, 
"5": {kind: 1, offset: 5, typ: NTI11956017, name: "errGtExpected", len: 0, sons: null}, 
"6": {kind: 1, offset: 6, typ: NTI11956017, name: "errEqExpected", len: 0, sons: null}, 
"7": {kind: 1, offset: 7, typ: NTI11956017, name: "errQuoteExpected", len: 0, sons: null}, 
"8": {kind: 1, offset: 8, typ: NTI11956017, name: "errEndOfCommentExpected", len: 0, sons: null}, 
"9": {kind: 1, offset: 9, typ: NTI11956017, name: "errAttributeValueExpected", len: 0, sons: null}}};
NTI11956017.node = NNI11956017;
var NNI11956019 = {kind: 2, offset: 0, typ: null, name: null, len: 5, sons: {"0": {kind: 1, offset: 0, typ: NTI11956019, name: "stateStart", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI11956019, name: "stateNormal", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI11956019, name: "stateAttr", len: 0, sons: null}, 
"3": {kind: 1, offset: 3, typ: NTI11956019, name: "stateEmptyElementTag", len: 0, sons: null}, 
"4": {kind: 1, offset: 4, typ: NTI11956019, name: "stateError", len: 0, sons: null}}};
NTI11956019.node = NNI11956019;
var NNI11956021 = {kind: 2, offset: 0, typ: null, name: null, len: 4, sons: {"0": {kind: 1, offset: 0, typ: NTI11956021, name: "reportWhitespace", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI11956021, name: "reportComments", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI11956021, name: "allowUnquotedAttribs", len: 0, sons: null}, 
"3": {kind: 1, offset: 3, typ: NTI11956021, name: "allowEmptyAttribs", len: 0, sons: null}}};
NTI11956021.node = NNI11956021;
NTI11956065.base = NTI11956021;
var NNI11956023 = {kind: 2, len: 9, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "a", len: 0, typ: NTI1188013, name: "a", sons: null}, 
{kind: 1, offset: "b", len: 0, typ: NTI1188013, name: "b", sons: null}, 
{kind: 1, offset: "c", len: 0, typ: NTI1188013, name: "c", sons: null}, 
{kind: 1, offset: "kind", len: 0, typ: NTI11956015, name: "kind", sons: null}, 
{kind: 1, offset: "err", len: 0, typ: NTI11956017, name: "err", sons: null}, 
{kind: 1, offset: "state", len: 0, typ: NTI11956019, name: "state", sons: null}, 
{kind: 1, offset: "cIsEmpty", len: 0, typ: NTI1188064, name: "cIsEmpty", sons: null}, 
{kind: 1, offset: "filename", len: 0, typ: NTI1188013, name: "filename", sons: null}, 
{kind: 1, offset: "options", len: 0, typ: NTI11956065, name: "options", sons: null}]};
NTI11956023.node = NNI11956023;
var NNI11541111 = {kind: 2, len: 10, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "closeImpl", len: 0, typ: NTI11541112, name: "closeImpl", sons: null}, 
{kind: 1, offset: "atEndImpl", len: 0, typ: NTI11541116, name: "atEndImpl", sons: null}, 
{kind: 1, offset: "setPositionImpl", len: 0, typ: NTI11541120, name: "setPositionImpl", sons: null}, 
{kind: 1, offset: "getPositionImpl", len: 0, typ: NTI11541125, name: "getPositionImpl", sons: null}, 
{kind: 1, offset: "readDataStrImpl", len: 0, typ: NTI11541129, name: "readDataStrImpl", sons: null}, 
{kind: 1, offset: "readLineImpl", len: 0, typ: NTI11541140, name: "readLineImpl", sons: null}, 
{kind: 1, offset: "readDataImpl", len: 0, typ: NTI11541146, name: "readDataImpl", sons: null}, 
{kind: 1, offset: "peekDataImpl", len: 0, typ: NTI11541152, name: "peekDataImpl", sons: null}, 
{kind: 1, offset: "writeDataImpl", len: 0, typ: NTI11541158, name: "writeDataImpl", sons: null}, 
{kind: 1, offset: "flushImpl", len: 0, typ: NTI11541164, name: "flushImpl", sons: null}]};
NTI11541111.node = NNI11541111;
NTI11541111.base = NTI1194408;
NTI11541109.base = NTI11541111;
NTI11811054.base = NTI1188011;
var NNI11811046 = {kind: 2, len: 8, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "bufpos", len: 0, typ: NTI1188044, name: "bufpos", sons: null}, 
{kind: 1, offset: "buf", len: 0, typ: NTI1188013, name: "buf", sons: null}, 
{kind: 1, offset: "input", len: 0, typ: NTI11541109, name: "input", sons: null}, 
{kind: 1, offset: "lineNumber", len: 0, typ: NTI1188044, name: "lineNumber", sons: null}, 
{kind: 1, offset: "sentinel", len: 0, typ: NTI1188044, name: "sentinel", sons: null}, 
{kind: 1, offset: "lineStart", len: 0, typ: NTI1188044, name: "lineStart", sons: null}, 
{kind: 1, offset: "offsetBase", len: 0, typ: NTI1188044, name: "offsetBase", sons: null}, 
{kind: 1, offset: "refillChars", len: 0, typ: NTI11811054, name: "refillChars", sons: null}]};
NTI11811046.node = NNI11811046;
NTI11811046.base = NTI1194408;
NTI11956023.base = NTI11811046;
NTI11920250.base = NTI1188011;
var NNI1194653 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI1194653.node = NNI1194653;
NTI1194653.base = NTI1194619;
var NNI2335020 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "a", len: 0, typ: NTI1188044, name: "a", sons: null}, 
{kind: 1, offset: "b", len: 0, typ: NTI1188044, name: "b", sons: null}]};
NTI2335020.node = NNI2335020;
NTI11956107.base = NTI11956021;
var NNI1194651 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI1194651.node = NNI1194651;
NTI1194651.base = NTI1194619;
var NNI12171017 = {kind: 2, offset: 0, typ: null, name: null, len: 6, sons: {"0": {kind: 1, offset: 0, typ: NTI12171017, name: "xnText", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI12171017, name: "xnVerbatimText", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI12171017, name: "xnElement", len: 0, sons: null}, 
"3": {kind: 1, offset: 3, typ: NTI12171017, name: "xnCData", len: 0, sons: null}, 
"4": {kind: 1, offset: 4, typ: NTI12171017, name: "xnEntity", len: 0, sons: null}, 
"5": {kind: 1, offset: 5, typ: NTI12171017, name: "xnComment", len: 0, sons: null}}};
NTI12171017.node = NNI12171017;
NTI12171031.base = NTI12171015;
var NNI12052204 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI1188013, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI1188013, name: "Field1", sons: null}, 
{kind: 1, offset: "Field2", len: 0, typ: NTI1188064, name: "Field2", sons: null}]};
NTI12052204.node = NNI12052204;
NTI12052206.base = NTI12052204;
var NNI12052202 = {kind: 2, offset: 0, typ: null, name: null, len: 3, sons: {"0": {kind: 1, offset: 0, typ: NTI12052202, name: "modeCaseSensitive", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI12052202, name: "modeCaseInsensitive", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI12052202, name: "modeStyleInsensitive", len: 0, sons: null}}};
NTI12052202.node = NNI12052202;
var NNI12052208 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "counter", len: 0, typ: NTI1188044, name: "counter", sons: null}, 
{kind: 1, offset: "data", len: 0, typ: NTI12052206, name: "data", sons: null}, 
{kind: 1, offset: "mode", len: 0, typ: NTI12052202, name: "mode", sons: null}]};
NTI12052208.node = NNI12052208;
NTI12052208.base = NTI1194408;
NTI12052210.base = NTI12052208;
var NNI12171021 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 3, offset: "k", len: 6, typ: NTI12171017, name: "k", sons: [[setConstr(0, 1, 5, 3, 4), {kind: 1, offset: "fText", len: 0, typ: NTI1188013, name: "fText", sons: null}], 
[setConstr(2), {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "fTag", len: 0, typ: NTI1188013, name: "fTag", sons: null}, 
{kind: 1, offset: "s", len: 0, typ: NTI12171031, name: "s", sons: null}, 
{kind: 1, offset: "fAttr", len: 0, typ: NTI12052210, name: "fAttr", sons: null}]}]]}, 
{kind: 1, offset: "fClientData", len: 0, typ: NTI1188044, name: "fClientData", sons: null}]};
NTI12171021.node = NNI12171021;
NTI12171015.base = NTI12171021;
NTI12171133.base = NTI12171015;
var NNI1194643 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI1194643.node = NNI1194643;
var NNI1194621 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI1194621.node = NNI1194621;
NTI1194621.base = NTI1194617;
NTI1194643.base = NTI1194621;
var NNI1194635 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI1194635.node = NNI1194635;
NTI1194635.base = NTI1194633;
var NNI5890011 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "a", len: 0, typ: NTI5635232, name: "a", sons: null}, 
{kind: 1, offset: "b", len: 0, typ: NTI1188044, name: "b", sons: null}]};
NTI5890011.node = NNI5890011;
var NNI11705253 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "data", len: 0, typ: NTI1188013, name: "data", sons: null}, 
{kind: 1, offset: "pos", len: 0, typ: NTI1188044, name: "pos", sons: null}]};
NTI11705253.node = NNI11705253;
NTI11705253.base = NTI11541111;
NTI9705015.base = NTI1188013;
var NNI12826015 = {kind: 2, len: 5, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "img", len: 0, typ: NTI1188013, name: "img", sons: null}, 
{kind: 1, offset: "name", len: 0, typ: NTI1188013, name: "name", sons: null}, 
{kind: 1, offset: "website", len: 0, typ: NTI1188013, name: "website", sons: null}, 
{kind: 1, offset: "link", len: 0, typ: NTI1188013, name: "link", sons: null}, 
{kind: 1, offset: "dimension", len: 0, typ: NTI1188013, name: "dimension", sons: null}]};
NTI12826015.node = NNI12826015;
NTI10500125.base = NTI1188015;
function makeNimstrLit(c_1455062) {
      var ln = c_1455062.length;
  var result = new Array(ln);
  for (var i = 0; i < ln; ++i) {
    result[i] = c_1455062.charCodeAt(i);
  }
  return result;
  

  
}
function cstrToNimstr(c_1455079) {
      var ln = c_1455079.length;
  var result = new Array(ln);
  var r = 0;
  for (var i = 0; i < ln; ++i) {
    var ch = c_1455079.charCodeAt(i);

    if (ch < 128) {
      result[r] = ch;
    }
    else {
      if (ch < 2048) {
        result[r] = (ch >> 6) | 192;
      }
      else {
        if (ch < 55296 || ch >= 57344) {
          result[r] = (ch >> 12) | 224;
        }
        else {
            ++i;
            ch = 65536 + (((ch & 1023) << 10) | (c_1455079.charCodeAt(i) & 1023));
            result[r] = (ch >> 18) | 240;
            ++r;
            result[r] = ((ch >> 12) & 63) | 128;
        }
        ++r;
        result[r] = ((ch >> 6) & 63) | 128;
      }
      ++r;
      result[r] = (ch & 63) | 128;
    }
    ++r;
  }
  return result;
  

  
}
function setConstr() {
        var result = {};
    for (var i = 0; i < arguments.length; ++i) {
      var x = arguments[i];
      if (typeof(x) == "object") {
        for (var j = x[0]; j <= x[1]; ++j) {
          result[j] = true;
        }
      } else {
        result[x] = true;
      }
    }
    return result;
  

  
}
var ConstSet1 = setConstr(17, 16, 4, 18, 27, 19, 23, 22, 21);
function nimCopy(dest_1470023, src_1470024, ti_1470025) {
  var result_1475219 = null;

    switch (ti_1470025.kind) {
    case 21:
    case 22:
    case 23:
    case 5:
      if (!(isFatPointer_1465401(ti_1470025))) {
      result_1475219 = src_1470024;
      }
      else {
        result_1475219 = [src_1470024[0], src_1470024[1]];
      }
      
      break;
    case 19:
            if (dest_1470023 === null || dest_1470023 === undefined) {
        dest_1470023 = {};
      }
      else {
        for (var key in dest_1470023) { delete dest_1470023[key]; }
      }
      for (var key in src_1470024) { dest_1470023[key] = src_1470024[key]; }
      result_1475219 = dest_1470023;
    
      break;
    case 18:
    case 17:
      if (!((ti_1470025.base == null))) {
      result_1475219 = nimCopy(dest_1470023, src_1470024, ti_1470025.base);
      }
      else {
      if ((ti_1470025.kind == 17)) {
      result_1475219 = (dest_1470023 === null || dest_1470023 === undefined) ? {m_type: ti_1470025} : dest_1470023;
      }
      else {
        result_1475219 = (dest_1470023 === null || dest_1470023 === undefined) ? {} : dest_1470023;
      }
      }
      nimCopyAux(result_1475219, src_1470024, ti_1470025.node);
      break;
    case 24:
    case 4:
    case 27:
    case 16:
            if (src_1470024 === null) {
        result_1475219 = null;
      }
      else {
        if (dest_1470023 === null || dest_1470023 === undefined) {
          dest_1470023 = new Array(src_1470024.length);
        }
        else {
          dest_1470023.length = src_1470024.length;
        }
        result_1475219 = dest_1470023;
        for (var i = 0; i < src_1470024.length; ++i) {
          result_1475219[i] = nimCopy(result_1475219[i], src_1470024[i], ti_1470025.base);
        }
      }
    
      break;
    case 28:
            if (src_1470024 !== null) {
        result_1475219 = src_1470024.slice(0);
      }
    
      break;
    default: 
      result_1475219 = src_1470024;
      break;
    }

  return result_1475219;

}
function toJSStr(s_1455096) {
                    var Tmp5;
            var Tmp7;

  var result_1455097 = null;

    var res_1455170 = newSeq_1455128((s_1455096).length);
    var i_1455172 = 0;
    var j_1455174 = 0;
    L1: do {
        L2: while (true) {
        if (!(i_1455172 < (s_1455096).length)) break L2;
          var c_1455175 = s_1455096[i_1455172];
          if ((c_1455175 < 128)) {
          res_1455170[j_1455174] = String.fromCharCode(c_1455175);
          i_1455172 += 1;
          }
          else {
            var helper_1455198 = newSeq_1455128(0);
            L3: do {
                L4: while (true) {
                if (!true) break L4;
                  var code_1455199 = c_1455175.toString(16);
                  if (((code_1455199).length == 1)) {
                  helper_1455198.push("%0");;
                  }
                  else {
                  helper_1455198.push("%");;
                  }
                  
                  helper_1455198.push(code_1455199);;
                  i_1455172 += 1;
                    if (((s_1455096).length <= i_1455172)) Tmp5 = true; else {                      Tmp5 = (s_1455096[i_1455172] < 128);                    }                  if (Tmp5) {
                  break L3;
                  }
                  
                  c_1455175 = s_1455096[i_1455172];
                }
            } while(false);
++excHandler;
            Tmp7 = framePtr;
            try {
            res_1455170[j_1455174] = decodeURIComponent(helper_1455198.join(""));
--excHandler;
} catch (EXC) {
 var prevJSError = lastJSError;
 lastJSError = EXC;
 --excHandler;
            framePtr = Tmp7;
            res_1455170[j_1455174] = helper_1455198.join("");
            lastJSError = prevJSError;
            } finally {
            framePtr = Tmp7;
            }
          }
          
          j_1455174 += 1;
        }
    } while(false);
    if (res_1455170.length < j_1455174) { for (var i=res_1455170.length;i<j_1455174;++i) res_1455170.push(null); }
               else { res_1455170.length = j_1455174; };
    result_1455097 = res_1455170.join("");

  return result_1455097;

}
function raiseException(e_1420218, ename_1420219) {
    e_1420218.name = ename_1420219;
    if ((excHandler == 0)) {
    unhandledException(e_1420218);
    }
    
    throw e_1420218;

  
}
function chckIndx(i_1480086, a_1480087, b_1480088) {
      var Tmp1;

  var result_1480089 = 0;

  BeforeRet: do {
      if (!(a_1480087 <= i_1480086)) Tmp1 = false; else {        Tmp1 = (i_1480086 <= b_1480088);      }    if (Tmp1) {
    result_1480089 = i_1480086;
    break BeforeRet;
    }
    else {
    raiseIndexError(i_1480086, a_1480087, b_1480088);
    }
    
  } while (false);

  return result_1480089;

}
function addInt(a_1460419, b_1460420) {
        var result = a_1460419 + b_1460420;
    checkOverflowInt(result);
    return result;
  

  
}
      var toTag_10465006 = ["#text", "#int", "#bool", "#vthunk", "#dthunk", "#component", "#verbatim", "HTML", "HEAD", "TITLE", "BASE", "LINK", "META", "STYLE", "SCRIPT", "NOSCRIPT", "BODY", "SECTION", "NAV", "ARTICLE", "ASIDE", "H1", "H2", "H3", "H4", "H5", "H6", "HEADER", "FOOTER", "ADDRESS", "MAIN", "P", "HR", "PRE", "BLOCKQUOTE", "OL", "UL", "LI", "DL", "DT", "DD", "FIGURE", "FIGCAPTION", "DIV", "A", "EM", "STRONG", "SMALL", "S", "CITE", "QUOTE", "DFN", "ABBR", "DATA", "TIME", "CODE", "VAR", "SAMP", "KDB", "SUB", "SUP", "I", "B", "U", "MARK", "RUBY", "RT", "RP", "BDI", "DBO", "SPAN", "BR", "WBR", "INS", "DEL", "IMG", "IFRAME", "EMBED", "OBJECT", "PARAM", "VIDEO", "AUDIO", "SOURCE", "TRACK", "CANVAS", "MAP", "AREA", "SVG", "MATH", "PATH", "CIRCLE", "TABLE", "CAPTION", "COLGROUP", "COL", "TBODY", "THEAD", "TFOOT", "TR", "TD", "TH", "FORM", "FIELDSET", "LEGEND", "LABEL", "INPUT", "BUTTON", "SELECT", "DATALIST", "OPTGROUP", "OPTION", "TEXTAREA", "KEYGEN", "OUTPUT", "PROGRESS", "METER", "DETAILS", "SUMMARY", "COMMAND", "MENU"];
function subInt(a_1460437, b_1460438) {
        var result = a_1460437 - b_1460438;
    checkOverflowInt(result);
    return result;
  

  
}
      var toEventName_10465012 = ["click", "contextmenu", "dblclick", "keyup", "keydown", "keypressed", "focus", "blur", "change", "scroll", "mousedown", "mouseenter", "mouseleave", "mousemove", "mouseout", "mouseover", "mouseup", "drag", "dragend", "dragenter", "dragleave", "dragover", "dragstart", "drop", "submit", "input", "animationstart", "animationend", "animationiteration", "keyupenter", "keyuplater", "load", "transitioncancel", "transitionend", "transitionrun", "transitionstart", "wheel"];
function rawEcho() {
          var buf = "";
      for (var i = 0; i < arguments.length; ++i) {
        buf += toJSStr(arguments[i]);
      }
      console.log(buf);
    

  
}
function nimMin(a_1460803, b_1460804) {
    var Tmp1;

  var result_1460805 = 0;

  BeforeRet: do {
    if ((a_1460803 <= b_1460804)) {
    Tmp1 = a_1460803;
    }
    else {
    Tmp1 = b_1460804;
    }
    
    result_1460805 = Tmp1;
    break BeforeRet;
  } while (false);

  return result_1460805;

}
function mnewString(len_1460044) {
        return new Array(len_1460044);
  

  
}
function chckRange(i_1485016, a_1485017, b_1485018) {
      var Tmp1;

  var result_1485019 = 0;

  BeforeRet: do {
      if (!(a_1485017 <= i_1485016)) Tmp1 = false; else {        Tmp1 = (i_1485016 <= b_1485018);      }    if (Tmp1) {
    result_1485019 = i_1485016;
    break BeforeRet;
    }
    else {
    raiseRangeError();
    }
    
  } while (false);

  return result_1485019;

}
function mulInt(a_1460455, b_1460456) {
        var result = a_1460455 * b_1460456;
    checkOverflowInt(result);
    return result;
  

  
}
var ConstSet2 = setConstr(13, 10, 47);
var ConstSet3 = setConstr(1, 0, 2, 3);
var ConstSet4 = setConstr([65, 90], [97, 122], 95, 58, [128, 255]);
function addChar(x_1505031, c_1505032) {
    x_1505031.push(c_1505032);

  
}
var ConstSet5 = setConstr([65, 90], [97, 122], [48, 57], 46, 45, 95, 58, [128, 255]);
var ConstSet6 = setConstr([65, 90], [97, 122], 95, 58, [128, 255]);
var ConstSet7 = setConstr([48, 57]);
var ConstSet8 = setConstr(2, 4, 12);
function eqStrings(a_1460222, b_1460223) {
        if (a_1460222 == b_1460223) return true;
    if (a_1460222 === null && b_1460223.length == 0) return true;
    if (b_1460223 === null && a_1460222.length == 0) return true;
    if ((!a_1460222) || (!b_1460223)) return false;
    var alen = a_1460222.length;
    if (alen != b_1460223.length) return false;
    for (var i = 0; i < alen; ++i)
      if (a_1460222[i] != b_1460223[i]) return false;
    return true;
  

  
}
var ConstSet9 = setConstr(39, 34);
var ConstSet10 = setConstr(34, 39, 96, 61, 60, 62, 32, 0, 9, 10, 12, 12);
var ConstSet11 = setConstr(2);
function raiseFieldError(f_1450047) {
    raiseException({message: nimCopy(null, f_1450047, NTI1188013), parent: null, m_type: NTI1194651, name: null, trace: [], up: null}, "FieldDefect");

  
}
var ConstSet12 = setConstr(2);
var ConstSet13 = setConstr(2);
var ConstSet14 = setConstr(0, 1, 5, 3, 4);
var ConstSet15 = setConstr(0, 1, 5, 3, 4);
var ConstSet16 = setConstr([48, 57]);
var ConstSet17 = setConstr(0, 125);
var ConstSet18 = setConstr([48, 57]);
var ConstSet19 = setConstr([65, 90]);
function nimMax(a_1460821, b_1460822) {
    var Tmp1;

  var result_1460823 = 0;

  BeforeRet: do {
    if ((b_1460822 <= a_1460821)) {
    Tmp1 = a_1460821;
    }
    else {
    Tmp1 = b_1460822;
    }
    
    result_1460823 = Tmp1;
    break BeforeRet;
  } while (false);

  return result_1460823;

}
var ConstSet20 = setConstr([97, 122], [65, 90], [48, 57], [128, 255], 95);
function absInt(a_1460666) {
    var Tmp1;

  var result_1460667 = 0;

    if ((a_1460666 < 0)) {
    Tmp1 = (a_1460666 * -1);
    }
    else {
    Tmp1 = a_1460666;
    }
    
    result_1460667 = Tmp1;

  return result_1460667;

}
    var errorMessages_11956072 = [makeNimstrLit("no error"), makeNimstrLit("\']]>\' expected"), makeNimstrLit("name expected"), makeNimstrLit("\';\' expected"), makeNimstrLit("\'?>\' expected"), makeNimstrLit("\'>\' expected"), makeNimstrLit("\'=\' expected"), makeNimstrLit("\'\"\' or \"\'\" expected"), makeNimstrLit("\'-->\' expected"), makeNimstrLit("attribute value expected")];
var ConstSet21 = setConstr(6, 11, 14, 18, 25, 46, 58, 61, 64, 70, 74, 86, 123);
var ConstSet22 = setConstr(2);
var ConstSet23 = setConstr(69, 85, 37, 29, 62, 83);
var ConstSet24 = setConstr(69, 37, 29, 62, 83);
var ConstSet25 = setConstr(116, 109, 112, 111, 113);
var ConstSet26 = setConstr(83, 82);
var ConstSet27 = setConstr(7, 3);
var ConstSet28 = setConstr(2);
function divInt(a_1460473, b_1460474) {
        if (b_1460474 == 0) raiseDivByZero();
    if (b_1460474 == -1 && a_1460473 == 2147483647) raiseOverflow();
    return Math.trunc(a_1460473 / b_1460474);
  

  
}
function modInt(a_1460491, b_1460492) {
        if (b_1460492 == 0) raiseDivByZero();
    if (b_1460492 == -1 && a_1460491 == 2147483647) raiseOverflow();
    return Math.trunc(a_1460491 % b_1460492);
  

  
}
var ConstSet29 = setConstr([65, 90]);
var ConstSet30 = setConstr([65, 90]);
function genericReset(x_1480044, ti_1480045) {
  var result_1480046 = null;

    result_1480046 = null;
    switch (ti_1480045.kind) {
    case 21:
    case 22:
    case 23:
    case 5:
      if (isFatPointer_1465401(ti_1480045)) {
              result_1480046 = [null, 0];
      
      }
      
      break;
    case 19:
            result_1480046 = {};
    
      break;
    case 18:
    case 17:
      if ((ti_1480045.kind == 17)) {
      result_1480046 = {m_type: ti_1480045};
      }
      else {
        result_1480046 = {};
      }
      
      break;
    case 24:
    case 27:
            result_1480046 = [];
    
      break;
    case 4:
    case 16:
            result_1480046 = new Array(x_1480044.length);
      for (var i = 0; i < x_1480044.length; ++i) {
        result_1480046[i] = genericReset(x_1480044[i], ti_1480045.base);
      }
    
      break;
    default: 
      break;
    }

  return result_1480046;

}
var ConstSet31 = setConstr(2);
var ConstSet32 = setConstr(0, 1, 5, 3, 4);
var ConstSet33 = setConstr([48, 57]);
var ConstSet34 = setConstr([48, 57]);
var ConstSet35 = setConstr(120, 88);
var ConstSet36 = setConstr(2);
var ConstSet37 = setConstr(2);
var ConstSet38 = setConstr(2);
var ConstSet39 = setConstr(0, 1, 5, 3, 4);
var ConstSet40 = setConstr(2);
var ConstSet41 = setConstr(32, 9, 11, 13, 10, 12);
var ConstSet42 = setConstr([65, 90]);
if (!Math.trunc) {
  Math.trunc = function(v) {
    v = +v;
    if (!isFinite(v)) return v;
    return (v - v % 1) || (v < 0 ? -0 : v === 0 ? v : 0);
  };
}

var gid_10500032 = [0];
var objectID_10635031 = [0];
var vcomponents_10806026 = [{}];
var kxi_10897284 = [null];
var count_12826030 = [0];
var pos_12826031 = [1];
var condition_12826032 = [true];
var fluke_12826037 = [{Field0: [], Field1: 0}];
function isFatPointer_1465401(ti_1465403) {
  var result_1465404 = false;

  BeforeRet: do {
    result_1465404 = !((ConstSet1[ti_1465403.base.kind] != undefined));
    break BeforeRet;
  } while (false);

  return result_1465404;

}
function nimCopyAux(dest_1470028, src_1470029, n_1470031) {
    switch (n_1470031.kind) {
    case 0:
      break;
    case 1:
            dest_1470028[n_1470031.offset] = nimCopy(dest_1470028[n_1470031.offset], src_1470029[n_1470031.offset], n_1470031.typ);
    
      break;
    case 2:
          for (var i = 0; i < n_1470031.sons.length; i++) {
      nimCopyAux(dest_1470028, src_1470029, n_1470031.sons[i]);
    }
    
      break;
    case 3:
            dest_1470028[n_1470031.offset] = nimCopy(dest_1470028[n_1470031.offset], src_1470029[n_1470031.offset], n_1470031.typ);
      for (var i = 0; i < n_1470031.sons.length; ++i) {
        nimCopyAux(dest_1470028, src_1470029, n_1470031.sons[i][1]);
      }
    
      break;
    }

  
}
function add_1357211(x_1357214, x_1357214_Idx, y_1357215) {
          if (x_1357214[x_1357214_Idx] === null) { x_1357214[x_1357214_Idx] = []; }
      var off = x_1357214[x_1357214_Idx].length;
      x_1357214[x_1357214_Idx].length += y_1357215.length;
      for (var i = 0; i < y_1357215.length; ++i) {
        x_1357214[x_1357214_Idx][off+i] = y_1357215.charCodeAt(i);
      }
    

  
}
function newSeq_1455128(len_1455131) {
  var result_1455133 = [];

    result_1455133 = new Array(len_1455131); for (var i=0;i<len_1455131;++i) {result_1455133[i]=null;}
  return result_1455133;

}
function unhandledException(e_1415059) {
    var buf_1415060 = [[]];
    if (!(((e_1415059.message).length == 0))) {
    buf_1415060[0].push.apply(buf_1415060[0], makeNimstrLit("Error: unhandled exception: "));;
    buf_1415060[0].push.apply(buf_1415060[0], e_1415059.message);;
    }
    else {
    buf_1415060[0].push.apply(buf_1415060[0], makeNimstrLit("Error: unhandled exception"));;
    }
    
    buf_1415060[0].push.apply(buf_1415060[0], makeNimstrLit(" ["));;
    add_1357211(buf_1415060, 0, e_1415059.name);
    buf_1415060[0].push.apply(buf_1415060[0], makeNimstrLit("]\x0A"));;
    var cbuf_1420201 = toJSStr(buf_1415060[0]);
    framePtr = null;
      if (typeof(Error) !== "undefined") {
    throw new Error(cbuf_1420201);
  }
  else {
    throw cbuf_1420201;
  }
  

  
}
function raiseIndexError(i_1440047, a_1440048, b_1440049) {
    var Tmp1;

    if ((b_1440049 < a_1440048)) {
    Tmp1 = makeNimstrLit("index out of bounds, the container is empty");
    }
    else {
    Tmp1 = (makeNimstrLit("index ") || []).concat(cstrToNimstr((i_1440047)+"") || [],makeNimstrLit(" not in ") || [],cstrToNimstr((a_1440048)+"") || [],makeNimstrLit(" .. ") || [],cstrToNimstr((b_1440049)+"") || []);
    }
    
    raiseException({message: nimCopy(null, Tmp1, NTI1188013), parent: null, m_type: NTI1194649, name: null, trace: [], up: null}, "IndexDefect");

  
}
function raiseOverflow() {
    raiseException({message: makeNimstrLit("over- or underflow"), parent: null, m_type: NTI1194637, name: null, trace: [], up: null}, "OverflowDefect");

  
}
function checkOverflowInt(a_1460403) {
        if (a_1460403 > 2147483647 || a_1460403 < -2147483648) raiseOverflow();
  

  
}
function sysFatal_1305418(message_1305422) {
    raiseException({message: nimCopy(null, message_1305422, NTI1188013), m_type: NTI1194641, parent: null, name: null, trace: [], up: null}, "AssertionDefect");

  
}
function raiseAssert_1305414(msg_1305416) {
    sysFatal_1305418(msg_1305416);

  
}
function failedAssertImpl_1305480(msg_1305482) {
    raiseAssert_1305414(msg_1305482);

  
}
var url_12826073 = [geturl()];
var statuss_12826075 = [[]];
L1: do {
  var item_12835214 = [null];
  var i_12835315 = 0;
  var L_12835316 = (url_12826073[0]).length;
  L2: do {
      L3: while (true) {
      if (!(i_12835315 < L_12835316)) break L3;
        item_12835214[0] = url_12826073[0][chckIndx(i_12835315, 0, (url_12826073[0]).length-1)];
        var stats_12835215 = [{name: item_12835214[0].name, url: item_12835214[0].url, cond: true, m_type: NTI12826027}];
        statuss_12826075[0].push(stats_12835215[0]);;
        i_12835315 = addInt(i_12835315, 1);
        if (!(((url_12826073[0]).length == L_12835316))) {
        failedAssertImpl_1305480(makeNimstrLit("iterators.nim(204, 11) `len(a) == L` the length of the seq changed while iterating over it"));
        }
        
      }
  } while(false);
} while(false);
var height_12911014 = [window.innerHeight];
function valueHEX3D_10465140(n_10465142, v_10465143) {
    n_10465142.text = v_10465143;

  
}
function value_10465123(n_10465125) {
  var result_10465126 = null;

    result_10465126 = n_10465125.text;

  return result_10465126;

}
function addEventShell_10897375(d_10897377, name_10897378, h_10897379) {
    d_10897377.addEventListener(name_10897378, h_10897379, false);
    if ((d_10897377.karaxEvents == null)) {
    d_10897377.karaxEvents = new Array(0);
    }
    
    d_10897377.karaxEvents.push({Field0: name_10897378, Field1: h_10897379});

  
}
function wrapEvent_10900097(d_10900099, n_10900100, k_10900101, action_10900102) {
      function laterWrapper_10970042() {
          function HEX3Aanonymous_10970048(ev_10970050) {
              function wrapper_10970051() {
                  var vHEX60gensym15_10980001 = ev_10970050.target.value;
                  valueHEX3D_10465140(n_10970046, vHEX60gensym15_10980001);
                  if (!(!((action_10970045 == null)))) {
                  failedAssertImpl_1305480(makeNimstrLit("karax.nim(74, 10) `action != nil` "));
                  }
                  
                  action_10970045(ev_10970050, n_10970046);
                  if (!((value_10465123(n_10970046) == vHEX60gensym15_10980001))) {
                  ev_10970050.target.value = value_10465123(n_10970046);
                  }
                  

                
              }

              if (!((timer_10970047 == null))) {
              clearTimeout(timer_10970047);
              }
              
              timer_10970047 = setTimeout(wrapper_10970051, 400);

            
          }

        var result_10970044 = null;

          var action_10970045 = action_10900102;
          var n_10970046 = n_10900100;
          var timer_10970047 = null;
          result_10970044 = HEX3Aanonymous_10970048;

        return result_10970044;

      }
      function enterWrapper_10935042() {
          function HEX3Aanonymous_10935047(ev_10935049) {
              if ((ev_10935049.keyCode == 13)) {
              var vHEX60gensym8_10945001 = ev_10935049.target.value;
              valueHEX3D_10465140(n_10935046, vHEX60gensym8_10945001);
              if (!(!((action_10935045 == null)))) {
              failedAssertImpl_1305480(makeNimstrLit("karax.nim(74, 10) `action != nil` "));
              }
              
              action_10935045(ev_10935049, n_10935046);
              if (!((value_10465123(n_10935046) == vHEX60gensym8_10945001))) {
              ev_10935049.target.value = value_10465123(n_10935046);
              }
              
              }
              

            
          }

        var result_10935044 = null;

          var action_10935045 = action_10900102;
          var n_10935046 = n_10900100;
          result_10935044 = HEX3Aanonymous_10935047;

        return result_10935044;

      }
      function stdWrapper_10900104() {
          function HEX3Aanonymous_10900109(ev_10900111) {
                var Tmp1;
                var Tmp2;

                if ((n_10900108.kind == 111)) Tmp2 = true; else {                  Tmp2 = (n_10900108.kind == 105);                }                if (Tmp2) Tmp1 = true; else {                  Tmp1 = (n_10900108.kind == 107);                }              if (Tmp1) {
              var vHEX60gensym1_10910001 = ev_10900111.target.value;
              valueHEX3D_10465140(n_10900108, vHEX60gensym1_10910001);
              if (!(!((action_10900107 == null)))) {
              failedAssertImpl_1305480(makeNimstrLit("karax.nim(74, 10) `action != nil` "));
              }
              
              action_10900107(ev_10900111, n_10900108);
              if (!((value_10465123(n_10900108) == vHEX60gensym1_10910001))) {
              ev_10900111.target.value = value_10465123(n_10900108);
              }
              
              }
              else {
              action_10900107(ev_10900111, n_10900108);
              }
              

            
          }

        var result_10900106 = null;

          var action_10900107 = action_10900102;
          var n_10900108 = n_10900100;
          result_10900106 = HEX3Aanonymous_10900109;

        return result_10900106;

      }

  var result_10900103 = null;

    switch (k_10900101) {
    case 30:
      result_10900103 = laterWrapper_10970042();
      addEventShell_10897375(d_10900099, "keyup", result_10900103);
      break;
    case 29:
      result_10900103 = enterWrapper_10935042();
      addEventShell_10897375(d_10900099, "keyup", result_10900103);
      break;
    default: 
      result_10900103 = stdWrapper_10900104();
      addEventShell_10897375(d_10900099, toEventName_10465012[chckIndx(k_10900101, 0, (toEventName_10465012).length-1)], result_10900103);
      break;
    }

  return result_10900103;

}
function applyEvents_11010073(n_11010075) {
    var dest_11010076 = n_11010075.dom;
    L1: do {
      var i_11010089 = 0;
      var colontmp__12925070 = 0;
      colontmp__12925070 = (n_11010075.events).length;
      var i_12925071 = 0;
      L2: do {
          L3: while (true) {
          if (!(i_12925071 < colontmp__12925070)) break L3;
            i_11010089 = i_12925071;
            n_11010075.events[chckIndx(i_11010089, 0, (n_11010075.events).length-1)]["Field2"] = wrapEvent_10900097(dest_11010076, n_11010075, n_11010075.events[chckIndx(i_11010089, 0, (n_11010075.events).length-1)]["Field0"], n_11010075.events[chckIndx(i_11010089, 0, (n_11010075.events).length-1)]["Field1"]);
            i_12925071 = addInt(i_12925071, 1);
          }
      } while(false);
    } while(false);

  
}
function applyStyle_10455628(n_10455630, s_10455631) {
    n_10455630.style = {};
    L1: do {
      var i_10455664 = 0;
      var colontmp__12925081 = 0;
      colontmp__12925081 = subInt(s_10455631.length, 1);
      var res_12925082 = 0;
      L2: do {
          L3: while (true) {
          if (!(res_12925082 <= colontmp__12925081)) break L3;
            i_10455664 = res_12925082;
            n_10455630.style[s_10455631[i_10455664]] = s_10455631[addInt(i_10455664, 1)];
            res_12925082 = addInt(res_12925082, 2);
          }
      } while(false);
    } while(false);

  
}
function toDom_11010154(n_11010156, useAttachedNode_11010157, kxi_11010158) {
      var Tmp9;
      var Tmp10;

  var result_11010159 = null;

  BeforeRet: do {
    if (useAttachedNode_11010157) {
    if (!((n_11010156.dom == null))) {
    if (!((n_11010156.id == null))) {
    kxi_11010158.byId[n_11010156.id] = n_11010156;
    }
    
    result_11010159 = n_11010156.dom;
    break BeforeRet;
    }
    
    }
    
    if ((n_11010156.kind == 0)) {
    result_11010159 = document.createTextNode(n_11010156.text);
    n_11010156.dom = result_11010159;
    if (!((n_11010156.id == null))) {
    kxi_10897284[0].byId[n_11010156.id] = n_11010156;
    }
    
    }
    else {
    if ((n_11010156.kind == 6)) {
    result_11010159 = document.createElement("div");
    result_11010159.innerHTML = n_11010156.text;
    n_11010156.dom = result_11010159;
    if (!((n_11010156.id == null))) {
    kxi_10897284[0].byId[n_11010156.id] = n_11010156;
    }
    
    break BeforeRet;
    }
    else {
    if ((n_11010156.kind == 3)) {
    var x_11045001 = vcomponents_10806026[0][n_11010156.text](n_11010156.kids);
    result_11010159 = toDom_11010154(x_11045001, useAttachedNode_11010157, kxi_11010158);
    n_11010156.dom = result_11010159;
    if (!((n_11010156.id == null))) {
    kxi_10897284[0].byId[n_11010156.id] = n_11010156;
    }
    
    break BeforeRet;
    }
    else {
    if ((n_11010156.kind == 4)) {
    result_11010159 = n_11010156.dom;
    if (!(!((result_11010159 == null)))) {
    failedAssertImpl_1305480(makeNimstrLit("karax.nim(176, 12) `result != nil` "));
    }
    
    n_11010156.dom = result_11010159;
    if (!((n_11010156.id == null))) {
    kxi_10897284[0].byId[n_11010156.id] = n_11010156;
    }
    
    break BeforeRet;
    }
    else {
    if ((n_11010156.kind == 5)) {
    var x_11080022 = n_11010156;
    if (!((x_11080022.onAttachImpl == null))) {
    x_11080022.onAttachImpl(x_11080022);
    }
    
    if (!(!((x_11080022.renderImpl == null)))) {
    failedAssertImpl_1305480(makeNimstrLit("karax.nim(183, 12) `x.renderImpl != nil` "));
    }
    
    if ((x_11080022.expanded == null)) {
    x_11080022.expanded = x_11080022.renderImpl(x_11080022);
    }
    
    if (!(!((x_11080022.expanded == null)))) {
    failedAssertImpl_1305480(makeNimstrLit("karax.nim(187, 12) `x.expanded != nil` "));
    }
    
    result_11010159 = toDom_11010154(x_11080022.expanded, useAttachedNode_11010157, kxi_11010158);
    n_11010156.dom = result_11010159;
    if (!((n_11010156.id == null))) {
    kxi_10897284[0].byId[n_11010156.id] = n_11010156;
    }
    
    break BeforeRet;
    }
    else {
      result_11010159 = document.createElement(toTag_10465006[chckIndx(n_11010156.kind, 0, (toTag_10465006).length-1)]);
      n_11010156.dom = result_11010159;
      if (!((n_11010156.id == null))) {
      kxi_10897284[0].byId[n_11010156.id] = n_11010156;
      }
      
      L1: do {
        var k_11135016 = null;
        L2: do {
          var i_12925050 = 0;
          var colontmp__12925051 = 0;
          colontmp__12925051 = (n_11010156.kids).length;
          var i_12925052 = 0;
          L3: do {
              L4: while (true) {
              if (!(i_12925052 < colontmp__12925051)) break L4;
                i_12925050 = i_12925052;
                k_11135016 = n_11010156.kids[chckIndx(i_12925050, 0, (n_11010156.kids).length-1)];
                result_11010159.appendChild(toDom_11010154(k_11135016, useAttachedNode_11010157, kxi_11010158));
                i_12925052 = addInt(i_12925052, 1);
              }
          } while(false);
        } while(false);
      } while(false);
      if (!((n_11010156.text == null))) {
      result_11010159.value = n_11010156.text;
      }
      
    }
    }}}}
    if (!((n_11010156.id == null))) {
    result_11010159.id = n_11010156.id;
    }
    
    if (!((n_11010156.class == null))) {
    result_11010159.className = n_11010156.class;
    }
    
    L5: do {
      var k_11150001 = null;
      var v_11150002 = null;
      L6: do {
        var i_12925063 = 0;
        var colontmp__12925064 = 0;
        colontmp__12925064 = subInt((n_11010156.attrs).length, 2);
        var res_12925065 = 0;
        L7: do {
            L8: while (true) {
            if (!(res_12925065 <= colontmp__12925064)) break L8;
              i_12925063 = res_12925065;
              k_11150001 = n_11010156.attrs[chckIndx(i_12925063, 0, (n_11010156.attrs).length-1)];
              v_11150002 = n_11010156.attrs[chckIndx(addInt(i_12925063, 1), 0, (n_11010156.attrs).length-1)];
              if (!((v_11150002 == null))) {
              result_11010159.setAttribute(k_11150001, v_11150002);
              }
              
              res_12925065 = addInt(res_12925065, 2);
            }
        } while(false);
      } while(false);
    } while(false);
    applyEvents_11010073(n_11010156);
      if (!!((kxi_11010158 == null))) Tmp10 = false; else {        Tmp10 = (n_11010156 == kxi_11010158.toFocusV);      }      if (!Tmp10) Tmp9 = false; else {        Tmp9 = (kxi_11010158.toFocus == null);      }    if (Tmp9) {
    kxi_11010158.toFocus = result_11010159;
    }
    
    if (!((n_11010156.style == null))) {
    applyStyle_10455628(result_11010159, n_11010156.style);
    }
    
  } while (false);

  return result_11010159;

}
function replaceById_11175074(id_11175076, newTree_11175077) {
    var x_11175078 = document.getElementById(id_11175076);
    x_11175078.parentNode.replaceChild(newTree_11175077, x_11175078);
    newTree_11175077.id = id_11175076;

  
}
function len_10550014(x_10550016) {
  var result_10550017 = 0;

    result_10550017 = (x_10550016.kids).length;

  return result_10550017;

}
function HEX5BHEX5D_10550036(x_10550038, idx_10550039) {
  var result_10550040 = null;

    result_10550040 = x_10550038.kids[chckIndx(idx_10550039, 0, (x_10550038.kids).length-1)];

  return result_10550040;

}
function same_11160072(n_11160074, e_11160075, nesting_11160076) {
      var Tmp1;
      var Tmp2;

  var result_11160078 = false;

  BeforeRet: do {
    if (kxi_10897284[0].orphans.hasOwnProperty(n_11160074.id)) {
    result_11160078 = true;
    break BeforeRet;
    }
    
    if ((n_11160074.kind == 5)) {
    result_11160078 = same_11160072(n_11160074.expanded, e_11160075, addInt(nesting_11160076, 1));
    }
    else {
    if ((n_11160074.kind == 6)) {
    result_11160078 = true;
    }
    else {
      if ((n_11160074.kind == 3)) Tmp1 = true; else {        Tmp1 = (n_11160074.kind == 4);      }    if (Tmp1) {
    result_11160078 = true;
    }
    else {
    if ((toTag_10465006[chckIndx(n_11160074.kind, 0, (toTag_10465006).length-1)] == e_11160075.nodeName)) {
    result_11160078 = true;
    if (!((n_11160074.kind == 0))) {
      if (!!((e_11160075.childNodes.length == len_10550014(n_11160074)))) Tmp2 = false; else {        Tmp2 = !((n_11160074.kind == 111));      }    if (Tmp2) {
    rawEcho(makeNimstrLit("expected "), cstrToNimstr((len_10550014(n_11160074))+""), makeNimstrLit(" real "), cstrToNimstr((e_11160075.childNodes.length)+""), makeNimstrLit(" "), cstrToNimstr(toTag_10465006[chckIndx(n_11160074.kind, 0, (toTag_10465006).length-1)]), makeNimstrLit(" nesting "), cstrToNimstr((nesting_11160076)+""));
    result_11160078 = false;
    break BeforeRet;
    }
    
    L3: do {
      var i_11175024 = 0;
      var colontmp__12925088 = 0;
      colontmp__12925088 = len_10550014(n_11160074);
      var i_12925089 = 0;
      L4: do {
          L5: while (true) {
          if (!(i_12925089 < colontmp__12925088)) break L5;
            i_11175024 = i_12925089;
            if (!(same_11160072(HEX5BHEX5D_10550036(n_11160074, i_11175024), e_11160075.childNodes[i_11175024], addInt(nesting_11160076, 1)))) {
            result_11160078 = false;
            break BeforeRet;
            }
            
            i_12925089 = addInt(i_12925089, 1);
          }
      } while(false);
    } while(false);
    }
    
    }
    else {
    rawEcho(makeNimstrLit("VDOM: "), cstrToNimstr(toTag_10465006[chckIndx(n_11160074.kind, 0, (toTag_10465006).length-1)]), makeNimstrLit(" DOM: "), cstrToNimstr(e_11160075.nodeName));
    }
    }}}
  } while (false);

  return result_11160078;

}
function eq_10420229(a_10420231, b_10420232) {
  var result_10420233 = false;

  BeforeRet: do {
    if ((a_10420231 == null)) {
    if ((b_10420232 == null)) {
    result_10420233 = true;
    break BeforeRet;
    }
    else {
      result_10420233 = false;
      break BeforeRet;
    }
    
    }
    else {
    if ((b_10420232 == null)) {
    result_10420233 = false;
    break BeforeRet;
    }
    }
    if (!((a_10420231.length == b_10420232.length))) {
    result_10420233 = false;
    break BeforeRet;
    }
    
    L1: do {
      var i_10425083 = 0;
      var colontmp__12925128 = 0;
      colontmp__12925128 = a_10420231.length;
      var i_12925129 = 0;
      L2: do {
          L3: while (true) {
          if (!(i_12925129 < colontmp__12925128)) break L3;
            i_10425083 = i_12925129;
            if (!((a_10420231[i_10425083] == b_10420232[i_10425083]))) {
            result_10420233 = false;
            break BeforeRet;
            }
            
            i_12925129 = addInt(i_12925129, 1);
          }
      } while(false);
    } while(false);
    result_10420233 = true;
    break BeforeRet;
  } while (false);

  return result_10420233;

}
function sameAttrs_10561079(a_10561081, b_10561082) {
  var result_10561083 = false;

  BeforeRet: do {
    if (((a_10561081.attrs).length == (b_10561082.attrs).length)) {
    result_10561083 = true;
    L1: do {
      var i_10561106 = 0;
      var colontmp__12925132 = 0;
      colontmp__12925132 = (a_10561081.attrs).length;
      var i_12925133 = 0;
      L2: do {
          L3: while (true) {
          if (!(i_12925133 < colontmp__12925132)) break L3;
            i_10561106 = i_12925133;
            if (!((a_10561081.attrs[chckIndx(i_10561106, 0, (a_10561081.attrs).length-1)] == b_10561082.attrs[chckIndx(i_10561106, 0, (b_10561082.attrs).length-1)]))) {
            result_10561083 = false;
            break BeforeRet;
            }
            
            i_12925133 = addInt(i_12925133, 1);
          }
      } while(false);
    } while(false);
    }
    
  } while (false);

  return result_10561083;

}
function eq_11175214(a_11175216, b_11175217, recursive_11175218) {
      var Tmp4;
      var Tmp5;

  var result_11175219 = 0;

  BeforeRet: do {
    if (!((a_11175216.kind == b_11175217.kind))) {
    result_11175219 = 1;
    break BeforeRet;
    }
    
    if (!((a_11175216.id == b_11175217.id))) {
    result_11175219 = 1;
    break BeforeRet;
    }
    
    result_11175219 = 3;
    if (!((a_11175216.index == b_11175217.index))) {
    result_11175219 = 1;
    break BeforeRet;
    }
    
    if ((a_11175216.kind == 0)) {
    if (!((a_11175216.text == b_11175217.text))) {
    result_11175219 = 1;
    break BeforeRet;
    }
    
    }
    else {
    if ((a_11175216.kind == 3)) {
    if (!((a_11175216.text == b_11175217.text))) {
    result_11175219 = 1;
    break BeforeRet;
    }
    
    if (!((len_10550014(a_11175216) == len_10550014(b_11175217)))) {
    result_11175219 = 1;
    break BeforeRet;
    }
    
    L1: do {
      var i_11205008 = 0;
      var colontmp__12925120 = 0;
      colontmp__12925120 = len_10550014(a_11175216);
      var i_12925121 = 0;
      L2: do {
          L3: while (true) {
          if (!(i_12925121 < colontmp__12925120)) break L3;
            i_11205008 = i_12925121;
            if ((eq_11175214(HEX5BHEX5D_10550036(a_11175216, i_11205008), HEX5BHEX5D_10550036(b_11175217, i_11205008), recursive_11175218) == 1)) {
            result_11175219 = 1;
            break BeforeRet;
            }
            
            i_12925121 = addInt(i_12925121, 1);
          }
      } while(false);
    } while(false);
    }
    else {
    if ((a_11175216.kind == 4)) {
    if ((a_11175216.dom == b_11175217.dom)) {
    result_11175219 = 3;
    break BeforeRet;
    }
    else {
      result_11175219 = 1;
      break BeforeRet;
    }
    
    }
    else {
    if ((a_11175216.kind == 6)) {
    if (!((a_11175216.text == b_11175217.text))) {
    result_11175219 = 1;
    break BeforeRet;
    }
    
    }
    else {
    if ((b_11175217.kind == 5)) {
    if (!((a_11175216.text == b_11175217.text))) {
    result_11175219 = 1;
    break BeforeRet;
    }
    
    if (!((a_11175216.key == b_11175217.key))) {
    result_11175219 = 1;
    break BeforeRet;
    }
    
    result_11175219 = 0;
    break BeforeRet;
    }
    }}}}
      if (!((a_11175216.class == b_11175217.class))) Tmp5 = true; else {        Tmp5 = !(eq_10420229(a_11175216.style, b_11175217.style));      }      if (Tmp5) Tmp4 = true; else {        Tmp4 = !(sameAttrs_10561079(a_11175216, b_11175217));      }    if (Tmp4) {
    result_11175219 = 2;
    break BeforeRet;
    }
    
    if (recursive_11175218) {
    if (!((len_10550014(a_11175216) == len_10550014(b_11175217)))) {
    result_11175219 = 1;
    break BeforeRet;
    }
    
    L6: do {
      var i_11230008 = 0;
      var colontmp__12925124 = 0;
      colontmp__12925124 = len_10550014(a_11175216);
      var i_12925125 = 0;
      L7: do {
          L8: while (true) {
          if (!(i_12925125 < colontmp__12925124)) break L8;
            i_11230008 = i_12925125;
            if (!((eq_11175214(HEX5BHEX5D_10550036(a_11175216, i_11230008), HEX5BHEX5D_10550036(b_11175217, i_11230008), true) == 3))) {
            result_11175219 = 1;
            break BeforeRet;
            }
            
            i_12925125 = addInt(i_12925125, 1);
          }
      } while(false);
    } while(false);
    }
    
    break BeforeRet;
  } while (false);

  return result_11175219;

}
function updateStyles_11235034(newNode_11235036, oldNode_11235037) {
    if (!((oldNode_11235037.dom == null))) {
    if (!((newNode_11235036.style == null))) {
    applyStyle_10455628(oldNode_11235037.dom, newNode_11235036.style);
    }
    else {
      oldNode_11235037.dom.style = {m_type: NTI1853293, alignContent: null, alignItems: null, alignSelf: null, all: null, animation: null, animationDelay: null, animationDirection: null, animationDuration: null, animationFillMode: null, animationIterationCount: null, animationName: null, animationPlayState: null, animationTimingFunction: null, backdropFilter: null, backfaceVisibility: null, background: null, backgroundAttachment: null, backgroundBlendMode: null, backgroundClip: null, backgroundColor: null, backgroundImage: null, backgroundOrigin: null, backgroundPosition: null, backgroundRepeat: null, backgroundSize: null, blockSize: null, border: null, borderBlock: null, borderBlockColor: null, borderBlockEnd: null, borderBlockEndColor: null, borderBlockEndStyle: null, borderBlockEndWidth: null, borderBlockStart: null, borderBlockStartColor: null, borderBlockStartStyle: null, borderBlockStartWidth: null, borderBlockStyle: null, borderBlockWidth: null, borderBottom: null, borderBottomColor: null, borderBottomLeftRadius: null, borderBottomRightRadius: null, borderBottomStyle: null, borderBottomWidth: null, borderCollapse: null, borderColor: null, borderEndEndRadius: null, borderEndStartRadius: null, borderImage: null, borderImageOutset: null, borderImageRepeat: null, borderImageSlice: null, borderImageSource: null, borderImageWidth: null, borderInline: null, borderInlineColor: null, borderInlineEnd: null, borderInlineEndColor: null, borderInlineEndStyle: null, borderInlineEndWidth: null, borderInlineStart: null, borderInlineStartColor: null, borderInlineStartStyle: null, borderInlineStartWidth: null, borderInlineStyle: null, borderInlineWidth: null, borderLeft: null, borderLeftColor: null, borderLeftStyle: null, borderLeftWidth: null, borderRadius: null, borderRight: null, borderRightColor: null, borderRightStyle: null, borderRightWidth: null, borderSpacing: null, borderStartEndRadius: null, borderStartStartRadius: null, borderStyle: null, borderTop: null, borderTopColor: null, borderTopLeftRadius: null, borderTopRightRadius: null, borderTopStyle: null, borderTopWidth: null, borderWidth: null, bottom: null, boxDecorationBreak: null, boxShadow: null, boxSizing: null, breakAfter: null, breakBefore: null, breakInside: null, captionSide: null, caretColor: null, clear: null, clip: null, clipPath: null, color: null, colorAdjust: null, columnCount: null, columnFill: null, columnGap: null, columnRule: null, columnRuleColor: null, columnRuleStyle: null, columnRuleWidth: null, columnSpan: null, columnWidth: null, columns: null, contain: null, content: null, counterIncrement: null, counterReset: null, counterSet: null, cursor: null, direction: null, display: null, emptyCells: null, filter: null, flex: null, flexBasis: null, flexDirection: null, flexFlow: null, flexGrow: null, flexShrink: null, flexWrap: null, cssFloat: null, font: null, fontFamily: null, fontFeatureSettings: null, fontKerning: null, fontLanguageOverride: null, fontOpticalSizing: null, fontSize: null, fontSizeAdjust: null, fontStretch: null, fontStyle: null, fontSynthesis: null, fontVariant: null, fontVariantAlternates: null, fontVariantCaps: null, fontVariantEastAsian: null, fontVariantLigatures: null, fontVariantNumeric: null, fontVariantPosition: null, fontVariationSettings: null, fontWeight: null, gap: null, grid: null, gridArea: null, gridAutoColumns: null, gridAutoFlow: null, gridAutoRows: null, gridColumn: null, gridColumnEnd: null, gridColumnStart: null, gridRow: null, gridRowEnd: null, gridRowStart: null, gridTemplate: null, gridTemplateAreas: null, gridTemplateColumns: null, gridTemplateRows: null, hangingPunctuation: null, height: null, hyphens: null, imageOrientation: null, imageRendering: null, inlineSize: null, inset: null, insetBlock: null, insetBlockEnd: null, insetBlockStart: null, insetInline: null, insetInlineEnd: null, insetInlineStart: null, isolation: null, justifyContent: null, justifyItems: null, justifySelf: null, left: null, letterSpacing: null, lineBreak: null, lineHeight: null, listStyle: null, listStyleImage: null, listStylePosition: null, listStyleType: null, margin: null, marginBlock: null, marginBlockEnd: null, marginBlockStart: null, marginBottom: null, marginInline: null, marginInlineEnd: null, marginInlineStart: null, marginLeft: null, marginRight: null, marginTop: null, mask: null, maskBorder: null, maskBorderMode: null, maskBorderOutset: null, maskBorderRepeat: null, maskBorderSlice: null, maskBorderSource: null, maskBorderWidth: null, maskClip: null, maskComposite: null, maskImage: null, maskMode: null, maskOrigin: null, maskPosition: null, maskRepeat: null, maskSize: null, maskType: null, maxBlockSize: null, maxHeight: null, maxInlineSize: null, maxWidth: null, minBlockSize: null, minHeight: null, minInlineSize: null, minWidth: null, mixBlendMode: null, objectFit: null, objectPosition: null, offset: null, offsetAnchor: null, offsetDistance: null, offsetPath: null, offsetRotate: null, opacity: null, order: null, orphans: null, outline: null, outlineColor: null, outlineOffset: null, outlineStyle: null, outlineWidth: null, overflow: null, overflowAnchor: null, overflowBlock: null, overflowInline: null, overflowWrap: null, overflowX: null, overflowY: null, overscrollBehavior: null, overscrollBehaviorBlock: null, overscrollBehaviorInline: null, overscrollBehaviorX: null, overscrollBehaviorY: null, padding: null, paddingBlock: null, paddingBlockEnd: null, paddingBlockStart: null, paddingBottom: null, paddingInline: null, paddingInlineEnd: null, paddingInlineStart: null, paddingLeft: null, paddingRight: null, paddingTop: null, pageBreakAfter: null, pageBreakBefore: null, pageBreakInside: null, paintOrder: null, perspective: null, perspectiveOrigin: null, placeContent: null, placeItems: null, placeSelf: null, pointerEvents: null, position: null, quotes: null, resize: null, right: null, rotate: null, rowGap: null, scale: null, scrollBehavior: null, scrollMargin: null, scrollMarginBlock: null, scrollMarginBlockEnd: null, scrollMarginBlockStart: null, scrollMarginBottom: null, scrollMarginInline: null, scrollMarginInlineEnd: null, scrollMarginInlineStart: null, scrollMarginLeft: null, scrollMarginRight: null, scrollMarginTop: null, scrollPadding: null, scrollPaddingBlock: null, scrollPaddingBlockEnd: null, scrollPaddingBlockStart: null, scrollPaddingBottom: null, scrollPaddingInline: null, scrollPaddingInlineEnd: null, scrollPaddingInlineStart: null, scrollPaddingLeft: null, scrollPaddingRight: null, scrollPaddingTop: null, scrollSnapAlign: null, scrollSnapStop: null, scrollSnapType: null, scrollbar3dLightColor: null, scrollbarArrowColor: null, scrollbarBaseColor: null, scrollbarColor: null, scrollbarDarkshadowColor: null, scrollbarFaceColor: null, scrollbarHighlightColor: null, scrollbarShadowColor: null, scrollbarTrackColor: null, scrollbarWidth: null, shapeImageThreshold: null, shapeMargin: null, shapeOutside: null, tabSize: null, tableLayout: null, textAlign: null, textAlignLast: null, textCombineUpright: null, textDecoration: null, textDecorationColor: null, textDecorationLine: null, textDecorationSkipInk: null, textDecorationStyle: null, textDecorationThickness: null, textEmphasis: null, textEmphasisColor: null, textEmphasisPosition: null, textEmphasisStyle: null, textIndent: null, textJustify: null, textOrientation: null, textOverflow: null, textRendering: null, textShadow: null, textTransform: null, textUnderlineOffset: null, textUnderlinePosition: null, top: null, touchAction: null, transform: null, transformBox: null, transformOrigin: null, transformStyle: null, transition: null, transitionDelay: null, transitionDuration: null, transitionProperty: null, transitionTimingFunction: null, translate: null, unicodeBidi: null, verticalAlign: null, visibility: null, whiteSpace: null, widows: null, width: null, willChange: null, wordBreak: null, wordSpacing: null, writingMode: null, zIndex: null};
    }
    
    oldNode_11235037.dom.className = newNode_11235036.class;
    }
    
    oldNode_11235037.style = newNode_11235036.style;
    oldNode_11235037.class = newNode_11235036.class;

  
}
function takeOverAttr_10500214(newNode_10500216, oldNode_10500217) {
    oldNode_10500217.attrs = newNode_10500216.attrs;

  
}
function updateAttributes_11245052(newNode_11245054, oldNode_11245055) {
    if (!((oldNode_11245055.dom == null))) {
    L1: do {
      var k_11250009 = null;
      var __11250010 = null;
      L2: do {
        var i_12925138 = 0;
        var colontmp__12925139 = 0;
        colontmp__12925139 = subInt((oldNode_11245055.attrs).length, 2);
        var res_12925140 = 0;
        L3: do {
            L4: while (true) {
            if (!(res_12925140 <= colontmp__12925139)) break L4;
              i_12925138 = res_12925140;
              k_11250009 = oldNode_11245055.attrs[chckIndx(i_12925138, 0, (oldNode_11245055.attrs).length-1)];
              __11250010 = oldNode_11245055.attrs[chckIndx(addInt(i_12925138, 1), 0, (oldNode_11245055.attrs).length-1)];
              oldNode_11245055.dom.removeAttribute(k_11250009);
              res_12925140 = addInt(res_12925140, 2);
            }
        } while(false);
      } while(false);
    } while(false);
    L5: do {
      var k_11250011 = null;
      var v_11250012 = null;
      L6: do {
        var i_12925146 = 0;
        var colontmp__12925147 = 0;
        colontmp__12925147 = subInt((newNode_11245054.attrs).length, 2);
        var res_12925148 = 0;
        L7: do {
            L8: while (true) {
            if (!(res_12925148 <= colontmp__12925147)) break L8;
              i_12925146 = res_12925148;
              k_11250011 = newNode_11245054.attrs[chckIndx(i_12925146, 0, (newNode_11245054.attrs).length-1)];
              v_11250012 = newNode_11245054.attrs[chckIndx(addInt(i_12925146, 1), 0, (newNode_11245054.attrs).length-1)];
              if (!((v_11250012 == null))) {
              oldNode_11245055.dom.setAttribute(k_11250011, v_11250012);
              }
              
              res_12925148 = addInt(res_12925148, 2);
            }
        } while(false);
      } while(false);
    } while(false);
    }
    
    takeOverAttr_10500214(newNode_11245054, oldNode_11245055);

  
}
function removeAllEventHandlers_10897436(d_10897438) {
    if (!((d_10897438.karaxEvents == null))) {
    L1: do {
      var i_10900041 = 0;
      var colontmp__12925153 = 0;
      colontmp__12925153 = d_10897438.karaxEvents.length;
      var i_12925154 = 0;
      L2: do {
          L3: while (true) {
          if (!(i_12925154 < colontmp__12925153)) break L3;
            i_10900041 = i_12925154;
            d_10897438.removeEventListener(d_10897438.karaxEvents[i_10900041]["Field0"], d_10897438.karaxEvents[i_10900041]["Field1"]);
            i_12925154 = addInt(i_12925154, 1);
          }
      } while(false);
    } while(false);
    }
    

  
}
function mergeEvents_11255014(newNode_11255016, oldNode_11255017, kxi_11255018) {
    var d_11255019 = oldNode_11255017.dom;
    if (!((d_11255019 == null))) {
    removeAllEventHandlers_10897436(d_11255019);
    }
    
    oldNode_11255017.events = newNode_11255016.events;
    applyEvents_11010073(oldNode_11255017);

  
}
function addPatch_11260414(kxi_11260416, ka_11260417, parenta_11260418, currenta_11260419, na_11260420, oldNode_11260421) {
    var L_11260422 = kxi_11260416.patchLen;
    if (((kxi_11260416.patches).length <= L_11260422)) {
    kxi_11260416.patches.push({k: ka_11260417, parent: parenta_11260418, current: currenta_11260419, newNode: na_11260420, oldNode: oldNode_11260421});;
    }
    else {
      kxi_11260416.patches[chckIndx(L_11260422, 0, (kxi_11260416.patches).length-1)].k = ka_11260417;
      kxi_11260416.patches[chckIndx(L_11260422, 0, (kxi_11260416.patches).length-1)].parent = parenta_11260418;
      kxi_11260416.patches[chckIndx(L_11260422, 0, (kxi_11260416.patches).length-1)].current = currenta_11260419;
      kxi_11260416.patches[chckIndx(L_11260422, 0, (kxi_11260416.patches).length-1)].newNode = na_11260420;
      kxi_11260416.patches[chckIndx(L_11260422, 0, (kxi_11260416.patches).length-1)].oldNode = oldNode_11260421;
    }
    
    kxi_11260416.patchLen = addInt(kxi_11260416.patchLen, 1);

  
}
function diff_11310215(newNode_11310217, oldNode_11310218, parent_11310219, current_11310220, kxi_11310221) {
        var Tmp1;
            var Tmp6;

  BeforeRet: do {
    var result_11310401 = eq_11175214(newNode_11310217, oldNode_11310218, false);
    switch (result_11310401) {
    case 0:
      kxi_11310221.components.push({oldNode: oldNode_11310218, newNode: newNode_11310217, parent: parent_11310219, current: current_11310220});;
      break;
    case 3:
    case 2:
      newNode_11310217.dom = oldNode_11310218.dom;
      if ((result_11310401 == 2)) {
      updateStyles_11235034(newNode_11310217, oldNode_11310218);
      updateAttributes_11245052(newNode_11310217, oldNode_11310218);
      if ((oldNode_11310218.kind == 0)) {
      oldNode_11310218.text = newNode_11310217.text;
      oldNode_11310218.dom.nodeValue = newNode_11310217.text;
      }
      
      }
      
        if (!(((newNode_11310217.events).length == 0))) Tmp1 = true; else {          Tmp1 = !(((oldNode_11310218.events).length == 0));        }      if (Tmp1) {
      mergeEvents_11255014(newNode_11310217, oldNode_11310218, kxi_11310221);
      }
      
      var newLength_11320006 = len_10550014(newNode_11310217);
      var oldLength_11320007 = len_10550014(oldNode_11310218);
      if (((newLength_11320006 == 0) && (oldLength_11320007 == 0))) {
      break BeforeRet;
      }
      
      var minLength_11320008 = nimMin(newLength_11320006, oldLength_11320007);
      if (!((oldNode_11310218.kind == newNode_11310217.kind))) {
      failedAssertImpl_1305480(makeNimstrLit("karax.nim(487, 12) `oldNode.kind == newNode.kind` "));
      }
      
      var commonPrefix_11330202 = 0;
      L2: do {
          L3: while (true) {
          if (!(commonPrefix_11330202 < minLength_11320008)) break L3;
            if ((eq_11175214(HEX5BHEX5D_10550036(newNode_11310217, commonPrefix_11330202), HEX5BHEX5D_10550036(oldNode_11310218, commonPrefix_11330202), true) == 3)) {
            addPatch_11260414(kxi_11310221, 5, null, null, HEX5BHEX5D_10550036(newNode_11310217, commonPrefix_11330202), HEX5BHEX5D_10550036(oldNode_11310218, commonPrefix_11330202));
            commonPrefix_11330202 = addInt(commonPrefix_11330202, 1);
            }
            else {
              break L2;
            }
            
          }
      } while(false);
      var oldPos_11330214 = subInt(oldLength_11320007, 1);
      var newPos_11330215 = subInt(newLength_11320006, 1);
      L4: do {
          L5: while (true) {
            if (!(commonPrefix_11330202 <= oldPos_11330214)) Tmp6 = false; else {              Tmp6 = (commonPrefix_11330202 <= newPos_11330215);            }          if (!Tmp6) break L5;
            if ((eq_11175214(HEX5BHEX5D_10550036(newNode_11310217, newPos_11330215), HEX5BHEX5D_10550036(oldNode_11310218, oldPos_11330214), true) == 3)) {
            addPatch_11260414(kxi_11310221, 5, null, null, HEX5BHEX5D_10550036(newNode_11310217, newPos_11330215), HEX5BHEX5D_10550036(oldNode_11310218, oldPos_11330214));
            oldPos_11330214 = subInt(oldPos_11330214, 1);
            newPos_11330215 = subInt(newPos_11330215, 1);
            }
            else {
              break L4;
            }
            
          }
      } while(false);
      var pos_11340018 = addInt(nimMin(oldPos_11330214, newPos_11330215), 1);
      L7: do {
        var i_11340024 = 0;
        var colontmp__12925095 = 0;
        colontmp__12925095 = subInt(pos_11340018, 1);
        var res_12925096 = commonPrefix_11330202;
        L8: do {
            L9: while (true) {
            if (!(res_12925096 <= colontmp__12925095)) break L9;
              i_11340024 = res_12925096;
              diff_11310215(HEX5BHEX5D_10550036(newNode_11310217, i_11340024), HEX5BHEX5D_10550036(oldNode_11310218, i_11340024), current_11310220, current_11310220.childNodes[chckIndx(i_11340024, 0, (current_11310220.childNodes).length-1)], kxi_11310221);
              res_12925096 = addInt(res_12925096, 1);
            }
        } while(false);
      } while(false);
      if ((addInt(oldPos_11330214, 1) == oldLength_11320007)) {
      L10: do {
        var i_11340030 = 0;
        var res_12925102 = pos_11340018;
        L11: do {
            L12: while (true) {
            if (!(res_12925102 <= newPos_11330215)) break L12;
              i_11340030 = res_12925102;
              addPatch_11260414(kxi_11310221, 2, current_11310220, null, HEX5BHEX5D_10550036(newNode_11310217, i_11340030), null);
              res_12925102 = addInt(res_12925102, 1);
            }
        } while(false);
      } while(false);
      }
      else {
        var before_11340031 = current_11310220.childNodes[chckIndx(addInt(oldPos_11330214, 1), 0, (current_11310220.childNodes).length-1)];
        L13: do {
          var i_11340037 = 0;
          var res_12925108 = pos_11340018;
          L14: do {
              L15: while (true) {
              if (!(res_12925108 <= newPos_11330215)) break L15;
                i_11340037 = res_12925108;
                addPatch_11260414(kxi_11310221, 3, current_11310220, before_11340031, HEX5BHEX5D_10550036(newNode_11310217, i_11340037), null);
                res_12925108 = addInt(res_12925108, 1);
              }
          } while(false);
        } while(false);
      }
      
      L16: do {
        var i_11340043 = 0;
        var res_12925114 = pos_11340018;
        L17: do {
            L18: while (true) {
            if (!(res_12925114 <= oldPos_11330214)) break L18;
              i_11340043 = res_12925114;
              addPatch_11260414(kxi_10897284[0], 4, null, null, null, HEX5BHEX5D_10550036(oldNode_11310218, i_11340043));
              addPatch_11260414(kxi_11310221, 1, current_11310220, current_11310220.childNodes[chckIndx(i_11340043, 0, (current_11310220.childNodes).length-1)], null, null);
              res_12925114 = addInt(res_12925114, 1);
            }
        } while(false);
      } while(false);
      break;
    case 1:
      addPatch_11260414(kxi_10897284[0], 4, null, null, null, oldNode_11310218);
      addPatch_11260414(kxi_11310221, 0, parent_11310219, current_11310220, newNode_11310217, null);
      break;
    case 4:
      if (true) {
      failedAssertImpl_1305480(makeNimstrLit("karax.nim(529, 26) `false` eq returned usenewNode"));
      }
      
      break;
    }
  } while (false);

  
}
function applyComponents_11360429(kxi_11360431) {
            var Tmp3;

    var i_11360433 = 0;
    L1: do {
        L2: while (true) {
        if (!(i_11360433 < (kxi_11360431.components).length)) break L2;
          var x_11360439 = kxi_11360431.components[chckIndx(i_11360433, 0, (kxi_11360431.components).length-1)].oldNode;
          var newNode_11360440 = kxi_11360431.components[chckIndx(i_11360433, 0, (kxi_11360431.components).length-1)].newNode;
            if (!!((x_11360439.changedImpl == null))) Tmp3 = false; else {              Tmp3 = x_11360439.changedImpl(x_11360439, newNode_11360440);            }          if (Tmp3) {
          var current_11365201 = kxi_11360431.components[chckIndx(i_11360433, 0, (kxi_11360431.components).length-1)].current;
          var parent_11365202 = kxi_11360431.components[chckIndx(i_11360433, 0, (kxi_11360431.components).length-1)].parent;
          x_11360439.updatedImpl(x_11360439, newNode_11360440);
          var oldExpanded_11365203 = x_11360439.expanded;
          x_11360439.expanded = x_11360439.renderImpl(x_11360439);
          x_11360439.renderedVersion = x_11360439.version;
          if ((oldExpanded_11365203 == null)) {
          addPatch_11260414(kxi_10897284[0], 4, null, null, null, x_11360439);
          addPatch_11260414(kxi_11360431, 0, parent_11365202, current_11365201, x_11360439.expanded, null);
          }
          else {
            diff_11310215(x_11360439.expanded, oldExpanded_11365203, parent_11365202, current_11365201, kxi_11360431);
          }
          
          }
          
          i_11360433 = addInt(i_11360433, 1);
        }
    } while(false);
    if (kxi_11360431.components.length < 0) { for (var i=kxi_11360431.components.length;i<0;++i) kxi_11360431.components.push(({oldNode: null, newNode: null, parent: null, current: null})); }
               else { kxi_11360431.components.length = 0; };

  
}
function moveDom_11270048(dest_11270050, src_11270051) {
    dest_11270050.dom = src_11270051.dom;
    src_11270051.dom = null;
    if (!((dest_11270050.id == null))) {
    kxi_10897284[0].byId[dest_11270050.id] = dest_11270050;
    }
    
    if (!((len_10550014(dest_11270050) == len_10550014(src_11270051)))) {
    failedAssertImpl_1305480(makeNimstrLit("karax.nim(390, 10) `dest.len == src.len` "));
    }
    
    L1: do {
      var i_11285208 = 0;
      var colontmp__12925165 = 0;
      colontmp__12925165 = len_10550014(dest_11270050);
      var i_12925166 = 0;
      L2: do {
          L3: while (true) {
          if (!(i_12925166 < colontmp__12925165)) break L3;
            i_11285208 = i_12925166;
            moveDom_11270048(HEX5BHEX5D_10550036(dest_11270050, i_11285208), HEX5BHEX5D_10550036(src_11270051, i_11285208));
            i_12925166 = addInt(i_12925166, 1);
          }
      } while(false);
    } while(false);

  
}
function HEX5BHEX5DHEX3D_10550054(x_10550056, idx_10550057, y_10550058) {
    x_10550056.kids[chckIndx(idx_10550057, 0, (x_10550056.kids).length-1)] = y_10550058;

  
}
function applyPatch_11285222(kxi_11285224) {
    L1: do {
      var i_11285232 = 0;
      var i_12925159 = 0;
      L2: do {
          L3: while (true) {
          if (!(i_12925159 < kxi_11285224.patchLen)) break L3;
            i_11285232 = i_12925159;
            var p_11285233 = nimCopy(null, kxi_11285224.patches[chckIndx(i_11285232, 0, (kxi_11285224.patches).length-1)], NTI10897209);
            switch (p_11285233.k) {
            case 0:
              var nn_11285234 = toDom_11010154(p_11285233.newNode, true, kxi_11285224);
              if ((p_11285233.parent == null)) {
              replaceById_11175074(kxi_11285224.rootId, nn_11285234);
              }
              else {
                if ((p_11285233.current.parentNode == p_11285233.parent)) {
                p_11285233.parent.replaceChild(nn_11285234, p_11285233.current);
                }
                else {
                p_11285233.parent.appendChild(nn_11285234);
                }
                
              }
              
              break;
            case 5:
              moveDom_11270048(p_11285233.newNode, p_11285233.oldNode);
              break;
            case 1:
              p_11285233.parent.removeChild(p_11285233.current);
              break;
            case 2:
              var nn_11285250 = toDom_11010154(p_11285233.newNode, true, kxi_11285224);
              p_11285233.parent.appendChild(nn_11285250);
              break;
            case 3:
              var nn_11285251 = toDom_11010154(p_11285233.newNode, true, kxi_11285224);
              p_11285233.parent.insertBefore(nn_11285251, p_11285233.current);
              break;
            case 4:
              var n_11285252 = p_11285233.oldNode;
              if (!((n_11285252.id == null))) {
              delete kxi_11285224.byId[n_11285252.id];
              }
              
              if ((n_11285252.kind == 5)) {
              var x_11290018 = n_11285252;
              if (!((x_11290018.onDetachImpl == null))) {
              x_11290018.onDetachImpl(x_11290018);
              }
              
              }
              
              if (!(kxi_11285224.surpressRedraws)) {
              n_11285252.dom = null;
              }
              
              break;
            }
            i_12925159 = addInt(i_12925159, 1);
          }
      } while(false);
    } while(false);
    kxi_11285224.patchLen = 0;
    L4: do {
      var i_11295013 = 0;
      var i_12925162 = 0;
      L5: do {
          L6: while (true) {
          if (!(i_12925162 < kxi_11285224.patchLenV)) break L6;
            i_11295013 = i_12925162;
            var p_11295014 = nimCopy(null, kxi_11285224.patchesV[chckIndx(i_11295013, 0, (kxi_11285224.patchesV).length-1)], NTI10897211);
            HEX5BHEX5DHEX3D_10550054(p_11295014.parent, p_11295014.pos, p_11295014.newChild);
            if (!(!((p_11295014.newChild.dom == null)))) {
            failedAssertImpl_1305480(makeNimstrLit("karax.nim(429, 12) `p.newChild.dom != nil` "));
            }
            
            i_12925162 = addInt(i_12925162, 1);
          }
      } while(false);
    } while(false);
    kxi_11285224.patchLenV = 0;

  
}
function dodraw_11425262(kxi_11425264) {
  BeforeRet: do {
    if ((kxi_11425264.renderer == null)) {
    break BeforeRet;
    }
    
    var rdata_11425269 = {hashPart: window.location.hash};
    var newtree_11425270 = kxi_11425264.renderer(rdata_11425269);
    kxi_11425264.runCount = addInt(kxi_11425264.runCount, 1);
    newtree_11425270.id = kxi_11425264.rootId;
    kxi_11425264.toFocus = null;
    if ((kxi_11425264.currentTree == null)) {
    var asdom_11425285 = toDom_11010154(newtree_11425270, true, kxi_11425264);
    replaceById_11175074(kxi_11425264.rootId, asdom_11425285);
    }
    else {
      if (!(same_11160072(kxi_11425264.currentTree, document.getElementById(kxi_11425264.rootId), 0))) {
      failedAssertImpl_1305480(makeNimstrLit("karax.nim(644, 14) `same(kxi.currentTree, document.getElementById(kxi.rootId))` "));
      }
      
      var olddom_11435201 = document.getElementById(kxi_11425264.rootId);
      diff_11310215(newtree_11425270, kxi_11425264.currentTree, null, olddom_11435201, kxi_11425264);
    }
    
    applyComponents_11360429(kxi_11425264);
    applyPatch_11285222(kxi_11425264);
    kxi_11425264.currentTree = newtree_11425270;
    if (!(same_11160072(kxi_11425264.currentTree, document.getElementById(kxi_11425264.rootId), 0))) {
    failedAssertImpl_1305480(makeNimstrLit("karax.nim(657, 12) `same(kxi.currentTree, document.getElementById(kxi.rootId))` "));
    }
    
    if (!((kxi_11425264.postRenderCallback == null))) {
    kxi_11425264.postRenderCallback(rdata_11425269);
    }
    
    if (!((kxi_11425264.toFocus == null))) {
    kxi_11425264.toFocus.focus();
    }
    
    kxi_11425264.renderId = 0;
  } while (false);

  
}
function redraw_11450414(kxi_11450416) {
    function HEX3Aanonymous_11450601() {
        dodraw_11425262(kxi_11450416);

      
    }

    if ((kxi_11450416.renderId == 0)) {
    kxi_11450416.renderId = window.requestAnimationFrame(HEX3Aanonymous_11450601);
    }
    

  
}
function ajax_12805107(meth_12805109, url_12805110, headers_12805113, data_12805114, cont_12805119, doRedraw_12805120, kxi_12805121, useBinary_12805122, blob_12805123) {
function contWrapper_12805124(httpStatus_12805126, response_12805127) {
    cont_12805119(httpStatus_12805126, response_12805127);
    if (doRedraw_12805120) {
    redraw_11450414(kxi_12805121);
    }
    

  
}
    function HEX3Aanonymous_12805153() {
        if ((this.readyState == 4)) {
        if ((this.status == 200)) {
        contWrapper_12805124(this.status, this.responseText);
        }
        else {
        contWrapper_12805124(this.status, this.responseText);
        }
        
        }
        

      
    }

    var ajax_12805142 = new XMLHttpRequest();
    ajax_12805142.open(meth_12805109, url_12805110, true);
    L1: do {
      var a_12805149 = null;
      var a_12805149_Idx = 0;
      var b_12805151 = null;
      var b_12805151_Idx = 0;
      var i_12925041 = 0;
      L2: do {
          L3: while (true) {
          if (!(i_12925041 < (headers_12805113).length)) break L3;
            a_12805149 = headers_12805113[chckIndx(i_12925041, 0, (headers_12805113).length-1)]; a_12805149_Idx = "Field0";
            b_12805151 = headers_12805113[chckIndx(i_12925041, 0, (headers_12805113).length-1)]; b_12805151_Idx = "Field1";
            ajax_12805142.setRequestHeader(a_12805149[a_12805149_Idx], b_12805151[b_12805151_Idx]);
            i_12925041 = addInt(i_12925041, 1);
          }
      } while(false);
    } while(false);
    ajax_12805142.onreadystatechange = HEX3Aanonymous_12805153;
    if (useBinary_12805122) {
    ajax_12805142.send(blob_12805123);
    }
    else {
    ajax_12805142.send(data_12805114);
    }
    

  
}
function ajaxGet_12805237(url_12805239, headers_12805242, cont_12805247, doRedraw_12805248, kxi_12805249) {
    ajax_12805107("GET", url_12805239, headers_12805242, null, cont_12805247, doRedraw_12805248, kxi_12805249, false, null);

  
}
function raiseRangeError() {
    raiseException({message: makeNimstrLit("value out of range"), parent: null, m_type: NTI1194653, name: null, trace: [], up: null}, "RangeDefect");

  
}
function readData_11541259(s_11541261, buffer_11541262, buffer_11541262_Idx, bufLen_11541263) {
  var result_11541264 = 0;

    result_11541264 = s_11541261.readDataImpl(s_11541261, buffer_11541262, buffer_11541262_Idx, bufLen_11541263);

  return result_11541264;

}
function readDataStr_11541278(s_11541280, buffer_11541282, buffer_11541282_Idx, slice_11541287) {
  var result_11541288 = 0;

    if (!((s_11541280.readDataStrImpl == null))) {
    result_11541288 = s_11541280.readDataStrImpl(s_11541280, buffer_11541282, buffer_11541282_Idx, slice_11541287);
    }
    else {
      result_11541288 = readData_11541259(s_11541280, buffer_11541282[buffer_11541282_Idx], chckIndx(slice_11541287.a, 0, (buffer_11541282[buffer_11541282_Idx]).length-1), subInt(addInt(slice_11541287.b, 1), slice_11541287.a));
    }
    

  return result_11541288;

}
function HEX2EHEX2E_3440220(a_3440225, b_3440227) {
  var result_3440229 = ({a: 0, b: 0});

    nimCopy(result_3440229, {a: a_3440225, b: b_3440227}, NTI2335020);

  return result_3440229;

}
function fillBuffer_11811086(L_11811089) {
                  var Tmp8;

    var charsRead_11811090 = 0;
    var toCopy_11811091 = 0;
    var s_11811092 = 0;
    var oldBufLen_11811093 = 0;
    if (!((addInt(L_11811089.sentinel, 1) <= (L_11811089.buf).length))) {
    failedAssertImpl_1305480(makeNimstrLit("lexbase.nim(51, 9) `L.sentinel + 1 <= L.buf.len` "));
    }
    
    toCopy_11811091 = subInt((L_11811089.buf).length, addInt(L_11811089.sentinel, 1));
    if (!((0 <= toCopy_11811091))) {
    failedAssertImpl_1305480(makeNimstrLit("lexbase.nim(53, 9) `toCopy >= 0` "));
    }
    
    if ((0 < toCopy_11811091)) {
    L1: do {
      var i_11840208 = 0;
      var i_12925188 = 0;
      L2: do {
          L3: while (true) {
          if (!(i_12925188 < toCopy_11811091)) break L3;
            i_11840208 = i_12925188;
            L_11811089.buf[chckIndx(i_11840208, 0, (L_11811089.buf).length-1)] = L_11811089.buf[chckIndx(addInt(addInt(L_11811089.sentinel, 1), i_11840208), 0, (L_11811089.buf).length-1)];
            i_12925188 = addInt(i_12925188, 1);
          }
      } while(false);
    } while(false);
    }
    
    charsRead_11811090 = readDataStr_11541278(L_11811089.input, L_11811089, "buf", HEX2EHEX2E_3440220(toCopy_11811091, subInt(addInt(addInt(toCopy_11811091, L_11811089.sentinel), 1), 1)));
    s_11811092 = addInt(toCopy_11811091, charsRead_11811090);
    if ((charsRead_11811090 < addInt(L_11811089.sentinel, 1))) {
    L_11811089.buf[chckIndx(s_11811092, 0, (L_11811089.buf).length-1)] = 0;
    L_11811089.sentinel = s_11811092;
    }
    else {
      s_11811092 = subInt(s_11811092, 1);
      L4: do {
          L5: while (true) {
          if (!true) break L5;
            if (!((s_11811092 < (L_11811089.buf).length))) {
            failedAssertImpl_1305480(makeNimstrLit("lexbase.nim(75, 13) `s < L.buf.len` "));
            }
            
            L6: do {
                L7: while (true) {
                  if (!(0 <= s_11811092)) Tmp8 = false; else {                    Tmp8 = !((L_11811089.refillChars[L_11811089.buf[chckIndx(s_11811092, 0, (L_11811089.buf).length-1)]] != undefined));                  }                if (!Tmp8) break L7;
                  s_11811092 = subInt(s_11811092, 1);
                }
            } while(false);
            if ((0 <= s_11811092)) {
            L_11811089.sentinel = s_11811092;
            break L4;
            }
            else {
              oldBufLen_11811093 = (L_11811089.buf).length;
              (L_11811089.buf.length = chckRange(mulInt((L_11811089.buf).length, 2), 0, 2147483647));
              charsRead_11811090 = readDataStr_11541278(L_11811089.input, L_11811089, "buf", HEX2EHEX2E_3440220(oldBufLen_11811093, subInt((L_11811089.buf).length, 1)));
              if ((charsRead_11811090 < oldBufLen_11811093)) {
              L_11811089.buf[chckIndx(addInt(oldBufLen_11811093, charsRead_11811090), 0, (L_11811089.buf).length-1)] = 0;
              L_11811089.sentinel = addInt(oldBufLen_11811093, charsRead_11811090);
              break L4;
              }
              
              s_11811092 = subInt((L_11811089.buf).length, 1);
            }
            
          }
      } while(false);
    }
    

  
}
function skipUtf8Bom_11920214(L_11920217) {
      var Tmp1;
      var Tmp2;

      if (!(L_11920217.buf[chckIndx(0, 0, (L_11920217.buf).length-1)] == 239)) Tmp2 = false; else {        Tmp2 = (L_11920217.buf[chckIndx(1, 0, (L_11920217.buf).length-1)] == 187);      }      if (!Tmp2) Tmp1 = false; else {        Tmp1 = (L_11920217.buf[chckIndx(2, 0, (L_11920217.buf).length-1)] == 191);      }    if (Tmp1) {
    L_11920217.bufpos = addInt(L_11920217.bufpos, 3);
    L_11920217.lineStart = addInt(L_11920217.lineStart, 3);
    }
    

  
}
function open_11920243(L_11920246, input_11920247, bufLen_11920249, refillChars_11920251) {
    if (!((0 < bufLen_11920249))) {
    failedAssertImpl_1305480(makeNimstrLit("lexbase.nim(137, 9) `bufLen > 0` "));
    }
    
    if (!(!((input_11920247 == null)))) {
    failedAssertImpl_1305480(makeNimstrLit("lexbase.nim(138, 9) `input != nil` "));
    }
    
    L_11920246.input = input_11920247;
    L_11920246.bufpos = 0;
    L_11920246.offsetBase = 0;
    nimCopy(L_11920246.refillChars, refillChars_11920251, NTI11920250);
    L_11920246.buf = nimCopy(null, mnewString(chckRange(bufLen_11920249, 0, 2147483647)), NTI1188013);
    L_11920246.sentinel = subInt(bufLen_11920249, 1);
    L_11920246.lineStart = 0;
    L_11920246.lineNumber = 1;
    fillBuffer_11811086(L_11920246);
    skipUtf8Bom_11920214(L_11920246);

  
}
function open_11956101(my_11956104, input_11956105, filename_11956106, options_11956110) {
    open_11920243(my_11956104, input_11956105, 8192, ConstSet2);
    my_11956104.filename = nimCopy(null, filename_11956106, NTI1188013);
    my_11956104.state = 0;
    my_11956104.kind = 0;
    my_11956104.a = nimCopy(null, [], NTI1188013);
    my_11956104.b = nimCopy(null, [], NTI1188013);
    my_11956104.c = nimCopy(null, [], NTI1188013);
    my_11956104.cIsEmpty = true;
    nimCopy(my_11956104.options, options_11956110, NTI11956107);

  
}
function fillBaseLexer_11875229(L_11875232, pos_11875233) {
  var result_11875234 = 0;

    if (!((pos_11875233 <= L_11875232.sentinel))) {
    failedAssertImpl_1305480(makeNimstrLit("lexbase.nim(94, 9) `pos <= L.sentinel` "));
    }
    
    if ((pos_11875233 < L_11875232.sentinel)) {
    result_11875234 = addInt(pos_11875233, 1);
    }
    else {
      fillBuffer_11811086(L_11875232);
      L_11875232.offsetBase = addInt(L_11875232.offsetBase, pos_11875233);
      L_11875232.bufpos = 0;
      result_11875234 = 0;
    }
    

  return result_11875234;

}
function handleRefillChar_11905220(L_11905223, pos_11905224) {
  var result_11905225 = 0;

    if (!((L_11905223.refillChars[L_11905223.buf[chckIndx(pos_11905224, 0, (L_11905223.buf).length-1)]] != undefined))) {
    failedAssertImpl_1305480(makeNimstrLit("lexbase.nim(126, 9) `L.buf[pos] in L.refillChars` "));
    }
    
    result_11905225 = fillBaseLexer_11875229(L_11905223, pos_11905224);

  return result_11905225;

}
function markError_11965256(my_11965259, kind_11965260) {
    my_11965259.err = kind_11965260;
    my_11965259.state = 4;

  
}
function parseName_11965433(my_11965436, dest_11965438, dest_11965438_Idx) {
    var pos_11965439 = my_11965436.bufpos;
    if ((ConstSet4[my_11965436.buf[chckIndx(pos_11965439, 0, (my_11965436.buf).length-1)]] != undefined)) {
    L1: do {
        L2: while (true) {
        if (!true) break L2;
          addChar(dest_11965438[dest_11965438_Idx], my_11965436.buf[chckIndx(pos_11965439, 0, (my_11965436.buf).length-1)]);;
          pos_11965439 = addInt(pos_11965439, 1);
          if (!((ConstSet5[my_11965436.buf[chckIndx(pos_11965439, 0, (my_11965436.buf).length-1)]] != undefined))) {
          break L1;
          }
          
        }
    } while(false);
    my_11965436.bufpos = pos_11965439;
    }
    else {
    markError_11965256(my_11965436, 2);
    }
    

  
}
function handleCR_11885220(L_11885223, pos_11885224) {
  var result_11885225 = 0;

    if (!((L_11885223.buf[chckIndx(pos_11885224, 0, (L_11885223.buf).length-1)] == 13))) {
    failedAssertImpl_1305480(makeNimstrLit("lexbase.nim(107, 9) `L.buf[pos] == \'\\c\'` "));
    }
    
    L_11885223.lineNumber = addInt(L_11885223.lineNumber, 1);
    result_11885225 = fillBaseLexer_11875229(L_11885223, pos_11885224);
    if ((L_11885223.buf[chckIndx(result_11885225, 0, (L_11885223.buf).length-1)] == 10)) {
    result_11885225 = fillBaseLexer_11875229(L_11885223, result_11885225);
    }
    
    L_11885223.lineStart = result_11885225;

  return result_11885225;

}
function handleLF_11895220(L_11895223, pos_11895224) {
  var result_11895225 = 0;

    if (!((L_11895223.buf[chckIndx(pos_11895224, 0, (L_11895223.buf).length-1)] == 10))) {
    failedAssertImpl_1305480(makeNimstrLit("lexbase.nim(118, 9) `L.buf[pos] == \'\\n\'` "));
    }
    
    L_11895223.lineNumber = addInt(L_11895223.lineNumber, 1);
    result_11895225 = fillBaseLexer_11875229(L_11895223, pos_11895224);
    L_11895223.lineStart = result_11895225;

  return result_11895225;

}
function parseWhitespace_11965391(my_11965394, skip_11965395) {
    var pos_11965396 = my_11965394.bufpos;
    L1: do {
        L2: while (true) {
        if (!true) break L2;
          switch (my_11965394.buf[chckIndx(pos_11965396, 0, (my_11965394.buf).length-1)]) {
          case 32:
          case 9:
            if (!(skip_11965395)) {
            addChar(my_11965394.a, my_11965394.buf[chckIndx(pos_11965396, 0, (my_11965394.buf).length-1)]);;
            }
            
            pos_11965396 = addInt(pos_11965396, 1);
            break;
          case 13:
            pos_11965396 = handleCR_11885220(my_11965394, pos_11965396);
            if (!(skip_11965395)) {
            addChar(my_11965394.a, 10);;
            }
            
            break;
          case 10:
            pos_11965396 = handleLF_11895220(my_11965394, pos_11965396);
            if (!(skip_11965395)) {
            addChar(my_11965394.a, 10);;
            }
            
            break;
          default: 
            break L1;
            break;
          }
        }
    } while(false);
    my_11965394.bufpos = pos_11965396;

  
}
function parseEndTag_11990033(my_11990036) {
    my_11990036.bufpos = handleRefillChar_11905220(my_11990036, addInt(my_11990036.bufpos, 1));
    parseName_11965433(my_11990036, my_11990036, "a");
    parseWhitespace_11965391(my_11990036, true);
    if ((my_11990036.buf[chckIndx(my_11990036.bufpos, 0, (my_11990036.buf).length-1)] == 62)) {
    my_11990036.bufpos = addInt(my_11990036.bufpos, 1);
    }
    else {
    markError_11965256(my_11990036, 5);
    }
    
    my_11990036.kind = 7;

  
}
function parseCDATA_11965289(my_11965292) {
              var Tmp3;

    var pos_11965293 = addInt(my_11965292.bufpos, 9);
    L1: do {
        L2: while (true) {
        if (!true) break L2;
          switch (my_11965292.buf[chckIndx(pos_11965293, 0, (my_11965292.buf).length-1)]) {
          case 93:
              if (!(my_11965292.buf[chckIndx(addInt(pos_11965293, 1), 0, (my_11965292.buf).length-1)] == 93)) Tmp3 = false; else {                Tmp3 = (my_11965292.buf[chckIndx(addInt(pos_11965293, 2), 0, (my_11965292.buf).length-1)] == 62);              }            if (Tmp3) {
            pos_11965293 = addInt(pos_11965293, 3);
            break L1;
            }
            
            addChar(my_11965292.a, 93);;
            pos_11965293 = addInt(pos_11965293, 1);
            break;
          case 0:
            markError_11965256(my_11965292, 1);
            break L1;
            break;
          case 13:
            pos_11965293 = handleCR_11885220(my_11965292, pos_11965293);
            addChar(my_11965292.a, 10);;
            break;
          case 10:
            pos_11965293 = handleLF_11895220(my_11965292, pos_11965293);
            addChar(my_11965292.a, 10);;
            break;
          case 47:
            pos_11965293 = handleRefillChar_11905220(my_11965292, pos_11965293);
            addChar(my_11965292.a, 47);;
            break;
          default: 
            addChar(my_11965292.a, my_11965292.buf[chckIndx(pos_11965293, 0, (my_11965292.buf).length-1)]);;
            pos_11965293 = addInt(pos_11965293, 1);
            break;
          }
        }
    } while(false);
    my_11965292.bufpos = pos_11965293;
    my_11965292.kind = 11;

  
}
function parseComment_11965325(my_11965328) {
              var Tmp3;

    var pos_11965329 = addInt(my_11965328.bufpos, 4);
    L1: do {
        L2: while (true) {
        if (!true) break L2;
          switch (my_11965328.buf[chckIndx(pos_11965329, 0, (my_11965328.buf).length-1)]) {
          case 45:
              if (!(my_11965328.buf[chckIndx(addInt(pos_11965329, 1), 0, (my_11965328.buf).length-1)] == 45)) Tmp3 = false; else {                Tmp3 = (my_11965328.buf[chckIndx(addInt(pos_11965329, 2), 0, (my_11965328.buf).length-1)] == 62);              }            if (Tmp3) {
            pos_11965329 = addInt(pos_11965329, 3);
            break L1;
            }
            
            if ((my_11965328.options[1] != undefined)) {
            addChar(my_11965328.a, 45);;
            }
            
            pos_11965329 = addInt(pos_11965329, 1);
            break;
          case 0:
            markError_11965256(my_11965328, 8);
            break L1;
            break;
          case 13:
            pos_11965329 = handleCR_11885220(my_11965328, pos_11965329);
            if ((my_11965328.options[1] != undefined)) {
            addChar(my_11965328.a, 10);;
            }
            
            break;
          case 10:
            pos_11965329 = handleLF_11895220(my_11965328, pos_11965329);
            if ((my_11965328.options[1] != undefined)) {
            addChar(my_11965328.a, 10);;
            }
            
            break;
          case 47:
            pos_11965329 = handleRefillChar_11905220(my_11965328, pos_11965329);
            if ((my_11965328.options[1] != undefined)) {
            addChar(my_11965328.a, 47);;
            }
            
            break;
          default: 
            if ((my_11965328.options[1] != undefined)) {
            addChar(my_11965328.a, my_11965328.buf[chckIndx(pos_11965329, 0, (my_11965328.buf).length-1)]);;
            }
            
            pos_11965329 = addInt(pos_11965329, 1);
            break;
          }
        }
    } while(false);
    my_11965328.bufpos = pos_11965329;
    my_11965328.kind = 4;

  
}
function parseSpecial_11985068(my_11985071) {
    var pos_11985072 = addInt(my_11985071.bufpos, 2);
    var opentags_11985074 = 0;
    L1: do {
        L2: while (true) {
        if (!true) break L2;
          switch (my_11985071.buf[chckIndx(pos_11985072, 0, (my_11985071.buf).length-1)]) {
          case 0:
            markError_11965256(my_11985071, 5);
            break L1;
            break;
          case 60:
            opentags_11985074 = addInt(opentags_11985074, 1);
            pos_11985072 = addInt(pos_11985072, 1);
            addChar(my_11985071.a, 60);;
            break;
          case 62:
            if ((opentags_11985074 <= 0)) {
            pos_11985072 = addInt(pos_11985072, 1);
            break L1;
            }
            
            opentags_11985074 = subInt(opentags_11985074, 1);
            pos_11985072 = addInt(pos_11985072, 1);
            addChar(my_11985071.a, 62);;
            break;
          case 13:
            pos_11985072 = handleCR_11885220(my_11985071, pos_11985072);
            addChar(my_11985071.a, 10);;
            break;
          case 10:
            pos_11985072 = handleLF_11895220(my_11985071, pos_11985072);
            addChar(my_11985071.a, 10);;
            break;
          case 47:
            pos_11985072 = handleRefillChar_11905220(my_11985071, pos_11985072);
            addChar(my_11985071.b, 47);;
            break;
          default: 
            addChar(my_11985071.a, my_11985071.buf[chckIndx(pos_11985072, 0, (my_11985071.buf).length-1)]);;
            pos_11985072 = addInt(pos_11985072, 1);
            break;
          }
        }
    } while(false);
    my_11985071.bufpos = pos_11985072;
    my_11985071.kind = 13;

  
}
function parsePI_11985025(my_11985028) {
    my_11985028.bufpos = addInt(my_11985028.bufpos, 2);
    parseName_11965433(my_11985028, my_11985028, "a");
    var pos_11985036 = my_11985028.bufpos;
    (my_11985028.b.length = 0);
    L1: do {
        L2: while (true) {
        if (!true) break L2;
          switch (my_11985028.buf[chckIndx(pos_11985036, 0, (my_11985028.buf).length-1)]) {
          case 0:
            markError_11965256(my_11985028, 4);
            break L1;
            break;
          case 63:
            if ((my_11985028.buf[chckIndx(addInt(pos_11985036, 1), 0, (my_11985028.buf).length-1)] == 62)) {
            pos_11985036 = addInt(pos_11985036, 2);
            break L1;
            }
            
            addChar(my_11985028.b, 63);;
            pos_11985036 = addInt(pos_11985036, 1);
            break;
          case 13:
            pos_11985036 = handleCR_11885220(my_11985028, pos_11985036);
            addChar(my_11985028.b, 10);;
            break;
          case 10:
            pos_11985036 = handleLF_11895220(my_11985028, pos_11985036);
            addChar(my_11985028.b, 10);;
            break;
          case 47:
            pos_11985036 = handleRefillChar_11905220(my_11985028, pos_11985036);
            addChar(my_11985028.b, 47);;
            break;
          default: 
            addChar(my_11985028.b, my_11985028.buf[chckIndx(pos_11985036, 0, (my_11985028.buf).length-1)]);;
            pos_11985036 = addInt(pos_11985036, 1);
            break;
          }
        }
    } while(false);
    my_11985028.bufpos = pos_11985036;
    my_11985028.kind = 5;

  
}
function parseTag_11985124(my_11985127) {
        var Tmp1;

  BeforeRet: do {
    my_11985127.bufpos = addInt(my_11985127.bufpos, 1);
    parseName_11965433(my_11985127, my_11985127, "a");
    if (((my_11985127.a).length == 0)) {
    my_11985127.kind = 2;
    addChar(my_11985127.a, 60);;
    break BeforeRet;
    }
    
    parseWhitespace_11965391(my_11985127, true);
    if ((ConstSet6[my_11985127.buf[chckIndx(my_11985127.bufpos, 0, (my_11985127.buf).length-1)]] != undefined)) {
    my_11985127.kind = 8;
    my_11985127.state = 2;
    my_11985127.c = nimCopy(null, my_11985127.a, NTI1188013);
    my_11985127.cIsEmpty = false;
    }
    else {
      my_11985127.kind = 6;
      var slash_11990007 = (my_11985127.buf[chckIndx(my_11985127.bufpos, 0, (my_11985127.buf).length-1)] == 47);
      if (slash_11990007) {
      my_11985127.bufpos = handleRefillChar_11905220(my_11985127, my_11985127.bufpos);
      }
      
        if (!slash_11990007) Tmp1 = false; else {          Tmp1 = (my_11985127.buf[chckIndx(my_11985127.bufpos, 0, (my_11985127.buf).length-1)] == 62);        }      if (Tmp1) {
      my_11985127.bufpos = addInt(my_11985127.bufpos, 1);
      my_11985127.state = 3;
      my_11985127.c = nimCopy(null, [], NTI1188013);
      my_11985127.cIsEmpty = true;
      }
      else {
      if ((my_11985127.buf[chckIndx(my_11985127.bufpos, 0, (my_11985127.buf).length-1)] == 62)) {
      my_11985127.bufpos = addInt(my_11985127.bufpos, 1);
      }
      else {
      markError_11965256(my_11985127, 5);
      }
      }
    }
    
  } while (false);

  
}
function HEX3CHEX3DHEX25_1192474(x_1192476, y_1192477) {
  var result_1192478 = false;

    result_1192478 = ((x_1192476 >>> 0) <= (y_1192477 >>> 0));

  return result_1192478;

}
function nuctoUTF8(c_2805474) {
  var result_2805475 = [];

    result_2805475 = nimCopy(null, [], NTI1188013);
    var iHEX60gensym49_2810001 = c_2805474;
    if (HEX3CHEX3DHEX25_1192474(iHEX60gensym49_2810001, 127)) {
    (result_2805475.length = 1);
    result_2805475[chckIndx(0, 0, (result_2805475).length-1)] = chckRange(iHEX60gensym49_2810001, 0, 255);
    }
    else {
    if (HEX3CHEX3DHEX25_1192474(iHEX60gensym49_2810001, 2047)) {
    (result_2805475.length = 2);
    result_2805475[chckIndx(0, 0, (result_2805475).length-1)] = chckRange(((iHEX60gensym49_2810001 >> 6) | 192), 0, 255);
    result_2805475[chckIndx(1, 0, (result_2805475).length-1)] = chckRange(((iHEX60gensym49_2810001 & 63) | 128), 0, 255);
    }
    else {
    if (HEX3CHEX3DHEX25_1192474(iHEX60gensym49_2810001, 65535)) {
    (result_2805475.length = 3);
    result_2805475[chckIndx(0, 0, (result_2805475).length-1)] = chckRange(((iHEX60gensym49_2810001 >> 12) | 224), 0, 255);
    result_2805475[chckIndx(1, 0, (result_2805475).length-1)] = chckRange((((iHEX60gensym49_2810001 >> 6) & 63) | 128), 0, 255);
    result_2805475[chckIndx(2, 0, (result_2805475).length-1)] = chckRange(((iHEX60gensym49_2810001 & 63) | 128), 0, 255);
    }
    else {
    if (HEX3CHEX3DHEX25_1192474(iHEX60gensym49_2810001, 2097151)) {
    (result_2805475.length = 4);
    result_2805475[chckIndx(0, 0, (result_2805475).length-1)] = chckRange(((iHEX60gensym49_2810001 >> 18) | 240), 0, 255);
    result_2805475[chckIndx(1, 0, (result_2805475).length-1)] = chckRange((((iHEX60gensym49_2810001 >> 12) & 63) | 128), 0, 255);
    result_2805475[chckIndx(2, 0, (result_2805475).length-1)] = chckRange((((iHEX60gensym49_2810001 >> 6) & 63) | 128), 0, 255);
    result_2805475[chckIndx(3, 0, (result_2805475).length-1)] = chckRange(((iHEX60gensym49_2810001 & 63) | 128), 0, 255);
    }
    else {
    if (HEX3CHEX3DHEX25_1192474(iHEX60gensym49_2810001, 67108863)) {
    (result_2805475.length = 5);
    result_2805475[chckIndx(0, 0, (result_2805475).length-1)] = chckRange(((iHEX60gensym49_2810001 >> 24) | 248), 0, 255);
    result_2805475[chckIndx(1, 0, (result_2805475).length-1)] = chckRange((((iHEX60gensym49_2810001 >> 18) & 63) | 128), 0, 255);
    result_2805475[chckIndx(2, 0, (result_2805475).length-1)] = chckRange((((iHEX60gensym49_2810001 >> 12) & 63) | 128), 0, 255);
    result_2805475[chckIndx(3, 0, (result_2805475).length-1)] = chckRange((((iHEX60gensym49_2810001 >> 6) & 63) | 128), 0, 255);
    result_2805475[chckIndx(4, 0, (result_2805475).length-1)] = chckRange(((iHEX60gensym49_2810001 & 63) | 128), 0, 255);
    }
    else {
    if (HEX3CHEX3DHEX25_1192474(iHEX60gensym49_2810001, 2147483647)) {
    (result_2805475.length = 6);
    result_2805475[chckIndx(0, 0, (result_2805475).length-1)] = chckRange(((iHEX60gensym49_2810001 >> 30) | 252), 0, 255);
    result_2805475[chckIndx(1, 0, (result_2805475).length-1)] = chckRange((((iHEX60gensym49_2810001 >> 24) & 63) | 128), 0, 255);
    result_2805475[chckIndx(2, 0, (result_2805475).length-1)] = chckRange((((iHEX60gensym49_2810001 >> 18) & 63) | 128), 0, 255);
    result_2805475[chckIndx(3, 0, (result_2805475).length-1)] = chckRange((((iHEX60gensym49_2810001 >> 12) & 63) | 128), 0, 255);
    result_2805475[chckIndx(4, 0, (result_2805475).length-1)] = chckRange((((iHEX60gensym49_2810001 >> 6) & 63) | 128), 0, 255);
    result_2805475[chckIndx(5, 0, (result_2805475).length-1)] = chckRange(((iHEX60gensym49_2810001 & 63) | 128), 0, 255);
    }
    else {
    }
    }}}}}

  return result_2805475;

}
function parseEntity_11975020(my_11975023, dest_11975025, dest_11975025_Idx) {
      var Tmp5;
      var Tmp6;
      var Tmp7;
      var Tmp8;
      var Tmp9;
      var Tmp10;
      var Tmp11;
      var Tmp12;
      var Tmp13;
      var Tmp14;
      var Tmp15;
      var Tmp16;
      var Tmp17;
      var Tmp18;
      var Tmp19;
        var Tmp20;

    var pos_11975026 = addInt(my_11975023.bufpos, 1);
    my_11975023.kind = 2;
    if ((my_11975023.buf[chckIndx(pos_11975026, 0, (my_11975023.buf).length-1)] == 35)) {
    var r_11975027 = 0;
    pos_11975026 = addInt(pos_11975026, 1);
    if ((my_11975023.buf[chckIndx(pos_11975026, 0, (my_11975023.buf).length-1)] == 120)) {
    pos_11975026 = addInt(pos_11975026, 1);
    L1: do {
        L2: while (true) {
        if (!true) break L2;
          switch (my_11975023.buf[chckIndx(pos_11975026, 0, (my_11975023.buf).length-1)]) {
          case 48:
          case 49:
          case 50:
          case 51:
          case 52:
          case 53:
          case 54:
          case 55:
          case 56:
          case 57:
            r_11975027 = ((r_11975027 << 4) | subInt(my_11975023.buf[chckIndx(pos_11975026, 0, (my_11975023.buf).length-1)], 48));
            break;
          case 97:
          case 98:
          case 99:
          case 100:
          case 101:
          case 102:
            r_11975027 = ((r_11975027 << 4) | addInt(subInt(my_11975023.buf[chckIndx(pos_11975026, 0, (my_11975023.buf).length-1)], 97), 10));
            break;
          case 65:
          case 66:
          case 67:
          case 68:
          case 69:
          case 70:
            r_11975027 = ((r_11975027 << 4) | addInt(subInt(my_11975023.buf[chckIndx(pos_11975026, 0, (my_11975023.buf).length-1)], 65), 10));
            break;
          default: 
            break L1;
            break;
          }
          pos_11975026 = addInt(pos_11975026, 1);
        }
    } while(false);
    }
    else {
      L3: do {
          L4: while (true) {
          if (!(ConstSet7[my_11975023.buf[chckIndx(pos_11975026, 0, (my_11975023.buf).length-1)]] != undefined)) break L4;
            r_11975027 = addInt(mulInt(r_11975027, 10), subInt(my_11975023.buf[chckIndx(pos_11975026, 0, (my_11975023.buf).length-1)], 48));
            pos_11975026 = addInt(pos_11975026, 1);
          }
      } while(false);
    }
    
    dest_11975025[dest_11975025_Idx].push.apply(dest_11975025[dest_11975025_Idx], nuctoUTF8(((r_11975027)|0)));;
    }
    else {
      if (!(my_11975023.buf[chckIndx(pos_11975026, 0, (my_11975023.buf).length-1)] == 108)) Tmp6 = false; else {        Tmp6 = (my_11975023.buf[chckIndx(addInt(pos_11975026, 1), 0, (my_11975023.buf).length-1)] == 116);      }      if (!Tmp6) Tmp5 = false; else {        Tmp5 = (my_11975023.buf[chckIndx(addInt(pos_11975026, 2), 0, (my_11975023.buf).length-1)] == 59);      }    if (Tmp5) {
    addChar(dest_11975025[dest_11975025_Idx], 60);;
    pos_11975026 = addInt(pos_11975026, 2);
    }
    else {
      if (!(my_11975023.buf[chckIndx(pos_11975026, 0, (my_11975023.buf).length-1)] == 103)) Tmp8 = false; else {        Tmp8 = (my_11975023.buf[chckIndx(addInt(pos_11975026, 1), 0, (my_11975023.buf).length-1)] == 116);      }      if (!Tmp8) Tmp7 = false; else {        Tmp7 = (my_11975023.buf[chckIndx(addInt(pos_11975026, 2), 0, (my_11975023.buf).length-1)] == 59);      }    if (Tmp7) {
    addChar(dest_11975025[dest_11975025_Idx], 62);;
    pos_11975026 = addInt(pos_11975026, 2);
    }
    else {
      if (!(my_11975023.buf[chckIndx(pos_11975026, 0, (my_11975023.buf).length-1)] == 97)) Tmp11 = false; else {        Tmp11 = (my_11975023.buf[chckIndx(addInt(pos_11975026, 1), 0, (my_11975023.buf).length-1)] == 109);      }      if (!Tmp11) Tmp10 = false; else {        Tmp10 = (my_11975023.buf[chckIndx(addInt(pos_11975026, 2), 0, (my_11975023.buf).length-1)] == 112);      }      if (!Tmp10) Tmp9 = false; else {        Tmp9 = (my_11975023.buf[chckIndx(addInt(pos_11975026, 3), 0, (my_11975023.buf).length-1)] == 59);      }    if (Tmp9) {
    addChar(dest_11975025[dest_11975025_Idx], 38);;
    pos_11975026 = addInt(pos_11975026, 3);
    }
    else {
      if (!(my_11975023.buf[chckIndx(pos_11975026, 0, (my_11975023.buf).length-1)] == 97)) Tmp15 = false; else {        Tmp15 = (my_11975023.buf[chckIndx(addInt(pos_11975026, 1), 0, (my_11975023.buf).length-1)] == 112);      }      if (!Tmp15) Tmp14 = false; else {        Tmp14 = (my_11975023.buf[chckIndx(addInt(pos_11975026, 2), 0, (my_11975023.buf).length-1)] == 111);      }      if (!Tmp14) Tmp13 = false; else {        Tmp13 = (my_11975023.buf[chckIndx(addInt(pos_11975026, 3), 0, (my_11975023.buf).length-1)] == 115);      }      if (!Tmp13) Tmp12 = false; else {        Tmp12 = (my_11975023.buf[chckIndx(addInt(pos_11975026, 4), 0, (my_11975023.buf).length-1)] == 59);      }    if (Tmp12) {
    addChar(dest_11975025[dest_11975025_Idx], 39);;
    pos_11975026 = addInt(pos_11975026, 4);
    }
    else {
      if (!(my_11975023.buf[chckIndx(pos_11975026, 0, (my_11975023.buf).length-1)] == 113)) Tmp19 = false; else {        Tmp19 = (my_11975023.buf[chckIndx(addInt(pos_11975026, 1), 0, (my_11975023.buf).length-1)] == 117);      }      if (!Tmp19) Tmp18 = false; else {        Tmp18 = (my_11975023.buf[chckIndx(addInt(pos_11975026, 2), 0, (my_11975023.buf).length-1)] == 111);      }      if (!Tmp18) Tmp17 = false; else {        Tmp17 = (my_11975023.buf[chckIndx(addInt(pos_11975026, 3), 0, (my_11975023.buf).length-1)] == 116);      }      if (!Tmp17) Tmp16 = false; else {        Tmp16 = (my_11975023.buf[chckIndx(addInt(pos_11975026, 4), 0, (my_11975023.buf).length-1)] == 59);      }    if (Tmp16) {
    addChar(dest_11975025[dest_11975025_Idx], 34);;
    pos_11975026 = addInt(pos_11975026, 4);
    }
    else {
      my_11975023.bufpos = pos_11975026;
      var name_11980052 = [[]];
      parseName_11965433(my_11975023, name_11980052, 0);
      pos_11975026 = my_11975023.bufpos;
        if (!!((my_11975023.err == 2))) Tmp20 = false; else {          Tmp20 = (my_11975023.buf[chckIndx(pos_11975026, 0, (my_11975023.buf).length-1)] == 59);        }      if (Tmp20) {
      my_11975023.kind = 12;
      }
      else {
      addChar(dest_11975025[dest_11975025_Idx], 38);;
      }
      
      dest_11975025[dest_11975025_Idx].push.apply(dest_11975025[dest_11975025_Idx], name_11980052[0]);;
    }
    }}}}}
    if ((my_11975023.buf[chckIndx(pos_11975026, 0, (my_11975023.buf).length-1)] == 59)) {
    pos_11975026 = addInt(pos_11975026, 1);
    }
    else {
      my_11975023.err = 3;
    }
    
    my_11975023.bufpos = pos_11975026;

  
}
function parseCharData_12030020(my_12030023) {
    var pos_12030024 = my_12030023.bufpos;
    L1: do {
        L2: while (true) {
        if (!true) break L2;
          switch (my_12030023.buf[chckIndx(pos_12030024, 0, (my_12030023.buf).length-1)]) {
          case 0:
          case 60:
          case 38:
            break L1;
            break;
          case 13:
            pos_12030024 = handleCR_11885220(my_12030023, pos_12030024);
            addChar(my_12030023.a, 10);;
            break;
          case 10:
            pos_12030024 = handleLF_11895220(my_12030023, pos_12030024);
            addChar(my_12030023.a, 10);;
            break;
          case 47:
            pos_12030024 = handleRefillChar_11905220(my_12030023, pos_12030024);
            addChar(my_12030023.a, 47);;
            break;
          default: 
            addChar(my_12030023.a, my_12030023.buf[chckIndx(pos_12030024, 0, (my_12030023.buf).length-1)]);;
            pos_12030024 = addInt(pos_12030024, 1);
            break;
          }
        }
    } while(false);
    my_12030023.bufpos = pos_12030024;
    my_12030023.kind = 2;

  
}
function rawGetTok_12030044(my_12030047) {
          var Tmp1;
          var Tmp2;
          var Tmp3;
          var Tmp4;
          var Tmp5;
          var Tmp6;
          var Tmp7;

    my_12030047.kind = 0;
    (my_12030047.a.length = 0);
    var pos_12030048 = my_12030047.bufpos;
    switch (my_12030047.buf[chckIndx(pos_12030048, 0, (my_12030047.buf).length-1)]) {
    case 60:
      switch (my_12030047.buf[chckIndx(addInt(pos_12030048, 1), 0, (my_12030047.buf).length-1)]) {
      case 47:
        parseEndTag_11990033(my_12030047);
        break;
      case 33:
          if (!(my_12030047.buf[chckIndx(addInt(pos_12030048, 2), 0, (my_12030047.buf).length-1)] == 91)) Tmp6 = false; else {            Tmp6 = (my_12030047.buf[chckIndx(addInt(pos_12030048, 3), 0, (my_12030047.buf).length-1)] == 67);          }          if (!Tmp6) Tmp5 = false; else {            Tmp5 = (my_12030047.buf[chckIndx(addInt(pos_12030048, 4), 0, (my_12030047.buf).length-1)] == 68);          }          if (!Tmp5) Tmp4 = false; else {            Tmp4 = (my_12030047.buf[chckIndx(addInt(pos_12030048, 5), 0, (my_12030047.buf).length-1)] == 65);          }          if (!Tmp4) Tmp3 = false; else {            Tmp3 = (my_12030047.buf[chckIndx(addInt(pos_12030048, 6), 0, (my_12030047.buf).length-1)] == 84);          }          if (!Tmp3) Tmp2 = false; else {            Tmp2 = (my_12030047.buf[chckIndx(addInt(pos_12030048, 7), 0, (my_12030047.buf).length-1)] == 65);          }          if (!Tmp2) Tmp1 = false; else {            Tmp1 = (my_12030047.buf[chckIndx(addInt(pos_12030048, 8), 0, (my_12030047.buf).length-1)] == 91);          }        if (Tmp1) {
        parseCDATA_11965289(my_12030047);
        }
        else {
          if (!(my_12030047.buf[chckIndx(addInt(pos_12030048, 2), 0, (my_12030047.buf).length-1)] == 45)) Tmp7 = false; else {            Tmp7 = (my_12030047.buf[chckIndx(addInt(pos_12030048, 3), 0, (my_12030047.buf).length-1)] == 45);          }        if (Tmp7) {
        parseComment_11965325(my_12030047);
        }
        else {
        parseSpecial_11985068(my_12030047);
        }
        }
        break;
      case 63:
        parsePI_11985025(my_12030047);
        break;
      default: 
        parseTag_11985124(my_12030047);
        break;
      }
      break;
    case 32:
    case 9:
    case 13:
    case 10:
      parseWhitespace_11965391(my_12030047, false);
      my_12030047.kind = 3;
      break;
    case 0:
      my_12030047.kind = 1;
      break;
    case 38:
      parseEntity_11975020(my_12030047, my_12030047, "a");
      break;
    default: 
      parseCharData_12030020(my_12030047);
      break;
    }
    if (!(!((my_12030047.kind == 0)))) {
    failedAssertImpl_1305480(makeNimstrLit("parsexml.nim(739, 10) `my.kind != xmlError` "));
    }
    

  
}
function getTok_12045214(my_12045217) {
              var Tmp3;

    L1: do {
        L2: while (true) {
        if (!true) break L2;
          var lastKind_12045218 = my_12045217.kind;
          rawGetTok_12030044(my_12045217);
          switch (my_12045217.kind) {
          case 4:
            if ((my_12045217.options[1] != undefined)) {
            break L1;
            }
            
            break;
          case 3:
              if ((my_12045217.options[0] != undefined)) Tmp3 = true; else {                Tmp3 = (ConstSet8[lastKind_12045218] != undefined);              }            if (Tmp3) {
            break L1;
            }
            
            break;
          default: 
            break L1;
            break;
          }
        }
    } while(false);

  
}
function parseAttribute_11990057(my_11990060) {
      var Tmp1;
        var Tmp2;
            var Tmp9;

  BeforeRet: do {
    my_11990060.kind = 9;
    (my_11990060.a.length = 0);
    (my_11990060.b.length = 0);
    parseName_11965433(my_11990060, my_11990060, "a");
    if (((my_11990060.a).length == 0)) {
    markError_11965256(my_11990060, 5);
    break BeforeRet;
    }
    
    var startPos_11990062 = my_11990060.bufpos;
    parseWhitespace_11965391(my_11990060, true);
    if (!((my_11990060.buf[chckIndx(my_11990060.bufpos, 0, (my_11990060.buf).length-1)] == 61))) {
      if (!((my_11990060.options[3] != undefined))) Tmp1 = true; else {        if (!!((my_11990060.buf[chckIndx(my_11990060.bufpos, 0, (my_11990060.buf).length-1)] == 62))) Tmp2 = false; else {          Tmp2 = (my_11990060.bufpos == startPos_11990062);        }        Tmp1 = Tmp2;      }    if (Tmp1) {
    markError_11965256(my_11990060, 6);
    }
    
    break BeforeRet;
    }
    
    my_11990060.bufpos = addInt(my_11990060.bufpos, 1);
    parseWhitespace_11965391(my_11990060, true);
    var pos_12005007 = my_11990060.bufpos;
    if ((ConstSet9[my_11990060.buf[chckIndx(pos_12005007, 0, (my_11990060.buf).length-1)]] != undefined)) {
    var quote_12010008 = my_11990060.buf[chckIndx(pos_12005007, 0, (my_11990060.buf).length-1)];
    var pendingSpace_12010009 = false;
    pos_12005007 = addInt(pos_12005007, 1);
    L3: do {
        L4: while (true) {
        if (!true) break L4;
          switch (my_11990060.buf[chckIndx(pos_12005007, 0, (my_11990060.buf).length-1)]) {
          case 0:
            markError_11965256(my_11990060, 7);
            break L3;
            break;
          case 38:
            if (pendingSpace_12010009) {
            addChar(my_11990060.b, 32);;
            pendingSpace_12010009 = false;
            }
            
            my_11990060.bufpos = pos_12005007;
            parseEntity_11975020(my_11990060, my_11990060, "b");
            my_11990060.kind = 9;
            pos_12005007 = my_11990060.bufpos;
            break;
          case 32:
          case 9:
            pendingSpace_12010009 = true;
            pos_12005007 = addInt(pos_12005007, 1);
            break;
          case 13:
            pos_12005007 = handleCR_11885220(my_11990060, pos_12005007);
            pendingSpace_12010009 = true;
            break;
          case 10:
            pos_12005007 = handleLF_11895220(my_11990060, pos_12005007);
            pendingSpace_12010009 = true;
            break;
          case 47:
            pos_12005007 = handleRefillChar_11905220(my_11990060, pos_12005007);
            addChar(my_11990060.b, 47);;
            break;
          default: 
            if ((my_11990060.buf[chckIndx(pos_12005007, 0, (my_11990060.buf).length-1)] == quote_12010008)) {
            pos_12005007 = addInt(pos_12005007, 1);
            break L3;
            }
            else {
              if (pendingSpace_12010009) {
              addChar(my_11990060.b, 32);;
              pendingSpace_12010009 = false;
              }
              
              addChar(my_11990060.b, my_11990060.buf[chckIndx(pos_12005007, 0, (my_11990060.buf).length-1)]);;
              pos_12005007 = addInt(pos_12005007, 1);
            }
            
            break;
          }
        }
    } while(false);
    }
    else {
    if ((my_11990060.options[2] != undefined)) {
    var startPos_12015009 = pos_12005007;
    L5: do {
        L6: while (true) {
          var c_12015010 = my_11990060.buf[chckIndx(pos_12005007, 0, (my_11990060.buf).length-1)];
        if (!!((ConstSet10[c_12015010] != undefined))) break L6;
          if ((c_12015010 == 38)) {
          my_11990060.bufpos = pos_12005007;
          parseEntity_11975020(my_11990060, my_11990060, "b");
          my_11990060.kind = 9;
          pos_12005007 = my_11990060.bufpos;
          }
          else {
          if ((c_12015010 == 47)) {
          pos_12005007 = handleRefillChar_11905220(my_11990060, pos_12005007);
          addChar(my_11990060.b, 47);;
          }
          else {
            addChar(my_11990060.b, c_12015010);;
            pos_12005007 = addInt(pos_12005007, 1);
          }
          }
        }
    } while(false);
    if ((pos_12005007 == startPos_12015009)) {
    markError_11965256(my_11990060, 9);
    }
    
    }
    else {
      markError_11965256(my_11990060, 7);
      L7: do {
          L8: while (true) {
            if (!!((my_11990060.buf[chckIndx(pos_12005007, 0, (my_11990060.buf).length-1)] == 62))) Tmp9 = false; else {              Tmp9 = (32 < my_11990060.buf[chckIndx(pos_12005007, 0, (my_11990060.buf).length-1)]);            }          if (!Tmp9) break L8;
            addChar(my_11990060.b, my_11990060.buf[chckIndx(pos_12005007, 0, (my_11990060.buf).length-1)]);;
            pos_12005007 = addInt(pos_12005007, 1);
          }
      } while(false);
    }
    }
    my_11990060.bufpos = pos_12005007;
    parseWhitespace_11965391(my_11990060, true);
  } while (false);

  
}
function next_12050021(my_12050024) {
        var Tmp1;

    switch (my_12050024.state) {
    case 1:
      getTok_12045214(my_12050024);
      break;
    case 0:
      my_12050024.state = 1;
      getTok_12045214(my_12050024);
        if (!(my_12050024.kind == 5)) Tmp1 = false; else {          Tmp1 = eqStrings(my_12050024.a, makeNimstrLit("xml"));        }      if (Tmp1) {
      getTok_12045214(my_12050024);
      }
      
      break;
    case 2:
      if ((my_12050024.buf[chckIndx(my_12050024.bufpos, 0, (my_12050024.buf).length-1)] == 62)) {
      my_12050024.kind = 10;
      my_12050024.bufpos = addInt(my_12050024.bufpos, 1);
      my_12050024.state = 1;
      }
      else {
      if ((my_12050024.buf[chckIndx(my_12050024.bufpos, 0, (my_12050024.buf).length-1)] == 47)) {
      my_12050024.bufpos = handleRefillChar_11905220(my_12050024, my_12050024.bufpos);
      if ((my_12050024.buf[chckIndx(my_12050024.bufpos, 0, (my_12050024.buf).length-1)] == 62)) {
      my_12050024.kind = 10;
      my_12050024.bufpos = addInt(my_12050024.bufpos, 1);
      my_12050024.state = 3;
      }
      else {
      markError_11965256(my_12050024, 5);
      }
      
      }
      else {
      parseAttribute_11990057(my_12050024);
      }
      }
      break;
    case 3:
      my_12050024.state = 1;
      my_12050024.kind = 7;
      if (!(my_12050024.cIsEmpty)) {
      my_12050024.a = nimCopy(null, my_12050024.c, NTI1188013);
      }
      
      break;
    case 4:
      my_12050024.kind = 0;
      my_12050024.state = 1;
      break;
    }

  
}
function kind_11956215(my_11956217) {
  var result_11956218 = 0;

  BeforeRet: do {
    result_11956218 = my_11956217.kind;
    break BeforeRet;
  } while (false);

  return result_11956218;

}
function newXmlNode_12171049(kind_12171051) {
  var result_12171052 = null;

    result_12171052 = {k: kind_12171051, fText: [], fTag: [], s: [], fAttr: null, fClientData: 0};

  return result_12171052;

}
function newElement_12171113(tag_12171115) {
    var Tmp1;
    var Tmp2;

  var result_12171116 = null;

    result_12171116 = newXmlNode_12171049(2);
    var Tmp1 = result_12171116;
    if (ConstSet11[Tmp1.k]===undefined) { raiseFieldError(makeNimstrLit("\'fTag\' is not accessible using discriminant \'k\' of type \'XmlNodeObj\'")); }
    Tmp1.fTag = nimCopy(null, tag_12171115, NTI1188013);
    var Tmp2 = result_12171116;
    if (ConstSet12[Tmp2.k]===undefined) { raiseFieldError(makeNimstrLit("\'s\' is not accessible using discriminant \'k\' of type \'XmlNodeObj\'")); }
    Tmp2.s = nimCopy(null, [], NTI12171133);

  return result_12171116;

}
function add_12240257(father_12240259, son_12240260) {
    var Tmp1;

    var Tmp1 = father_12240259;
    if (ConstSet13[Tmp1.k]===undefined) { raiseFieldError(makeNimstrLit("\'s\' is not accessible using discriminant \'k\' of type \'XmlNodeObj\'")); }
    Tmp1.s.push(son_12240260);;

  
}
function addNode_12426503(father_12426505, son_12426506) {
    if (!((son_12426506 == null))) {
    add_12240257(father_12426505, son_12426506);
    }
    

  
}
function newComment_12180214(comment_12180216) {
    var Tmp1;

  var result_12180217 = null;

    result_12180217 = newXmlNode_12171049(5);
    var Tmp1 = result_12180217;
    if (ConstSet14[Tmp1.k]===undefined) { raiseFieldError(makeNimstrLit("\'fText\' is not accessible using discriminant \'k\' of type \'XmlNodeObj\'")); }
    Tmp1.fText = nimCopy(null, comment_12180216, NTI1188013);

  return result_12180217;

}
function rawData_11956258(my_11956261) {
  var result_11956264 = null;
  var result_11956264_Idx = 0;

    result_11956264 = my_11956261; result_11956264_Idx = "a";

  return [result_11956264, result_11956264_Idx];

}
function newText_12171162(text_12171164) {
    var Tmp1;

  var result_12171165 = null;

    result_12171165 = newXmlNode_12171049(0);
    var Tmp1 = result_12171165;
    if (ConstSet15[Tmp1.k]===undefined) { raiseFieldError(makeNimstrLit("\'fText\' is not accessible using discriminant \'k\' of type \'XmlNodeObj\'")); }
    Tmp1.fText = nimCopy(null, text_12171164, NTI1188013);

  return result_12171165;

}
function invalidFormatString_10315046() {
    raiseException({message: makeNimstrLit("invalid format string"), parent: null, m_type: NTI1194643, name: null, trace: [], up: null}, "ValueError");

  
}
function nsuToLowerAsciiChar(c_9410023) {
  var result_9410024 = 0;

    if ((ConstSet19[c_9410023] != undefined)) {
    result_9410024 = chckRange(addInt(c_9410023, 32), 0, 255);
    }
    else {
      result_9410024 = c_9410023;
    }
    

  return result_9410024;

}
function nsuCmpIgnoreStyle(a_9490022, b_9490023) {
          var Tmp7;
          var Tmp8;

  var result_9490024 = 0;

  BeforeRet: do {
    var i_9490026 = 0;
    var j_9490028 = 0;
    L1: do {
        L2: while (true) {
        if (!true) break L2;
          L3: do {
              L4: while (true) {
              if (!((i_9490026 < (a_9490022).length) && (a_9490022[i_9490026] == 95))) break L4;
                i_9490026 += 1;
              }
          } while(false);
          L5: do {
              L6: while (true) {
              if (!((j_9490028 < (b_9490023).length) && (b_9490023[j_9490028] == 95))) break L6;
                j_9490028 += 1;
              }
          } while(false);
          if ((i_9490026 < (a_9490022).length)) {
          Tmp7 = nsuToLowerAsciiChar(a_9490022[i_9490026]);
          }
          else {
          Tmp7 = 0;
          }
          
          var aa_9490041 = Tmp7;
          if ((j_9490028 < (b_9490023).length)) {
          Tmp8 = nsuToLowerAsciiChar(b_9490023[j_9490028]);
          }
          else {
          Tmp8 = 0;
          }
          
          var bb_9490042 = Tmp8;
          result_9490024 = (aa_9490041 - bb_9490042);
          if (!((result_9490024 == 0))) {
          break BeforeRet;
          }
          
          if (((a_9490022).length <= i_9490026)) {
          if (((b_9490023).length <= j_9490028)) {
          result_9490024 = 0;
          break BeforeRet;
          }
          
          result_9490024 = -1;
          break BeforeRet;
          }
          else {
          if (((b_9490023).length <= j_9490028)) {
          result_9490024 = 1;
          break BeforeRet;
          }
          }
          i_9490026 += 1;
          j_9490028 += 1;
        }
    } while(false);
  } while (false);

  return result_9490024;

}
function findNormalized_10315014(x_10315016, inArray_10315018) {
  var result_10315019 = 0;

  BeforeRet: do {
    var i_10315021 = 0;
    L1: do {
        L2: while (true) {
        if (!(i_10315021 < ((inArray_10315018).length-1))) break L2;
          if ((nsuCmpIgnoreStyle(x_10315016, inArray_10315018[chckIndx(i_10315021, 0, (inArray_10315018).length-1)]) == 0)) {
          result_10315019 = i_10315021;
          break BeforeRet;
          }
          
          i_10315021 = addInt(i_10315021, 2);
        }
    } while(false);
    result_10315019 = -1;
    break BeforeRet;
  } while (false);

  return result_10315019;

}
function substr_1571022(s_1571024, first_1571025, last_1571026) {
  var result_1571027 = [];

    var first_1571028 = nimMax(first_1571025, 0);
    var L_1571030 = nimMax(addInt(subInt(nimMin(last_1571026, ((s_1571024).length-1)), first_1571028), 1), 0);
    result_1571027 = nimCopy(null, mnewString(chckRange(L_1571030, 0, 2147483647)), NTI1188013);
    L1: do {
      var i_1571039 = 0;
      var colontmp__10462693 = 0;
      colontmp__10462693 = subInt(L_1571030, 1);
      var res_10462694 = 0;
      L2: do {
          L3: while (true) {
          if (!(res_10462694 <= colontmp__10462693)) break L3;
            i_1571039 = res_10462694;
            result_1571027[chckIndx(i_1571039, 0, (result_1571027).length-1)] = s_1571024[chckIndx(addInt(i_1571039, first_1571028), 0, (s_1571024).length-1)];
            res_10462694 = addInt(res_10462694, 1);
          }
      } while(false);
    } while(false);

  return result_1571027;

}
function nsuAddf(s_10320018, s_10320018_Idx, formatstr_10320019, a_10320021) {
                  var Tmp5;
            var Tmp6;
              var Tmp7;
            var Tmp10;
              var Tmp11;
                var Tmp12;
                  var Tmp15;
              var Tmp16;

    var i_10320025 = 0;
    var num_10320027 = 0;
    L1: do {
        L2: while (true) {
        if (!(i_10320025 < (formatstr_10320019).length)) break L2;
          if (((formatstr_10320019[chckIndx(i_10320025, 0, (formatstr_10320019).length-1)] == 36) && (addInt(i_10320025, 1) < (formatstr_10320019).length))) {
          switch (formatstr_10320019[chckIndx(addInt(i_10320025, 1), 0, (formatstr_10320019).length-1)]) {
          case 35:
            if ((((a_10320021).length-1) < num_10320027)) {
            invalidFormatString_10315046();
            }
            
            s_10320018[s_10320018_Idx].push.apply(s_10320018[s_10320018_Idx], a_10320021[chckIndx(num_10320027, 0, (a_10320021).length-1)]);;
            i_10320025 = addInt(i_10320025, 2);
            num_10320027 = addInt(num_10320027, 1);
            break;
          case 36:
            addChar(s_10320018[s_10320018_Idx], 36);;
            i_10320025 = addInt(i_10320025, 2);
            break;
          case 49:
          case 50:
          case 51:
          case 52:
          case 53:
          case 54:
          case 55:
          case 56:
          case 57:
          case 45:
            var j_10325025 = 0;
            i_10320025 = addInt(i_10320025, 1);
            var negative_10325032 = (formatstr_10320019[chckIndx(i_10320025, 0, (formatstr_10320019).length-1)] == 45);
            if (negative_10325032) {
            i_10320025 = addInt(i_10320025, 1);
            }
            
            L3: do {
                L4: while (true) {
                  if (!(i_10320025 < (formatstr_10320019).length)) Tmp5 = false; else {                    Tmp5 = (ConstSet16[formatstr_10320019[chckIndx(i_10320025, 0, (formatstr_10320019).length-1)]] != undefined);                  }                if (!Tmp5) break L4;
                  j_10325025 = subInt(addInt(mulInt(j_10325025, 10), formatstr_10320019[chckIndx(i_10320025, 0, (formatstr_10320019).length-1)]), 48);
                  i_10320025 = addInt(i_10320025, 1);
                }
            } while(false);
            if (!(negative_10325032)) {
            Tmp6 = subInt(j_10325025, 1);
            }
            else {
            Tmp6 = subInt((a_10320021).length, j_10325025);
            }
            
            var idx_10330025 = Tmp6;
              if ((idx_10330025 < 0)) Tmp7 = true; else {                Tmp7 = (((a_10320021).length-1) < idx_10330025);              }            if (Tmp7) {
            invalidFormatString_10315046();
            }
            
            s_10320018[s_10320018_Idx].push.apply(s_10320018[s_10320018_Idx], a_10320021[chckIndx(idx_10330025, 0, (a_10320021).length-1)]);;
            break;
          case 123:
            var j_10335006 = addInt(i_10320025, 2);
            var k_10335008 = 0;
            var negative_10335009 = (formatstr_10320019[chckIndx(j_10335006, 0, (formatstr_10320019).length-1)] == 45);
            if (negative_10335009) {
            j_10335006 = addInt(j_10335006, 1);
            }
            
            var isNumber_10335017 = 0;
            L8: do {
                L9: while (true) {
                if (!((j_10335006 < (formatstr_10320019).length) && !((ConstSet17[formatstr_10320019[chckIndx(j_10335006, 0, (formatstr_10320019).length-1)]] != undefined)))) break L9;
                  if ((ConstSet18[formatstr_10320019[chckIndx(j_10335006, 0, (formatstr_10320019).length-1)]] != undefined)) {
                  k_10335008 = subInt(addInt(mulInt(k_10335008, 10), formatstr_10320019[chckIndx(j_10335006, 0, (formatstr_10320019).length-1)]), 48);
                  if ((isNumber_10335017 == 0)) {
                  isNumber_10335017 = 1;
                  }
                  
                  }
                  else {
                    isNumber_10335017 = -1;
                  }
                  
                  j_10335006 = addInt(j_10335006, 1);
                }
            } while(false);
            if ((isNumber_10335017 == 1)) {
            if (!(negative_10335009)) {
            Tmp10 = subInt(k_10335008, 1);
            }
            else {
            Tmp10 = subInt((a_10320021).length, k_10335008);
            }
            
            var idx_10345025 = Tmp10;
              if ((idx_10345025 < 0)) Tmp11 = true; else {                Tmp11 = (((a_10320021).length-1) < idx_10345025);              }            if (Tmp11) {
            invalidFormatString_10315046();
            }
            
            s_10320018[s_10320018_Idx].push.apply(s_10320018[s_10320018_Idx], a_10320021[chckIndx(idx_10345025, 0, (a_10320021).length-1)]);;
            }
            else {
              var x_10350006 = findNormalized_10315014(substr_1571022(formatstr_10320019, addInt(i_10320025, 2), subInt(j_10335006, 1)), a_10320021);
                if (!(0 <= x_10350006)) Tmp12 = false; else {                  Tmp12 = (x_10350006 < ((a_10320021).length-1));                }              if (Tmp12) {
              s_10320018[s_10320018_Idx].push.apply(s_10320018[s_10320018_Idx], a_10320021[chckIndx(addInt(x_10350006, 1), 0, (a_10320021).length-1)]);;
              }
              else {
              invalidFormatString_10315046();
              }
              
            }
            
            i_10320025 = addInt(j_10335006, 1);
            break;
          case 97:
          case 98:
          case 99:
          case 100:
          case 101:
          case 102:
          case 103:
          case 104:
          case 105:
          case 106:
          case 107:
          case 108:
          case 109:
          case 110:
          case 111:
          case 112:
          case 113:
          case 114:
          case 115:
          case 116:
          case 117:
          case 118:
          case 119:
          case 120:
          case 121:
          case 122:
          case 65:
          case 66:
          case 67:
          case 68:
          case 69:
          case 70:
          case 71:
          case 72:
          case 73:
          case 74:
          case 75:
          case 76:
          case 77:
          case 78:
          case 79:
          case 80:
          case 81:
          case 82:
          case 83:
          case 84:
          case 85:
          case 86:
          case 87:
          case 88:
          case 89:
          case 90:
          case 128:
          case 129:
          case 130:
          case 131:
          case 132:
          case 133:
          case 134:
          case 135:
          case 136:
          case 137:
          case 138:
          case 139:
          case 140:
          case 141:
          case 142:
          case 143:
          case 144:
          case 145:
          case 146:
          case 147:
          case 148:
          case 149:
          case 150:
          case 151:
          case 152:
          case 153:
          case 154:
          case 155:
          case 156:
          case 157:
          case 158:
          case 159:
          case 160:
          case 161:
          case 162:
          case 163:
          case 164:
          case 165:
          case 166:
          case 167:
          case 168:
          case 169:
          case 170:
          case 171:
          case 172:
          case 173:
          case 174:
          case 175:
          case 176:
          case 177:
          case 178:
          case 179:
          case 180:
          case 181:
          case 182:
          case 183:
          case 184:
          case 185:
          case 186:
          case 187:
          case 188:
          case 189:
          case 190:
          case 191:
          case 192:
          case 193:
          case 194:
          case 195:
          case 196:
          case 197:
          case 198:
          case 199:
          case 200:
          case 201:
          case 202:
          case 203:
          case 204:
          case 205:
          case 206:
          case 207:
          case 208:
          case 209:
          case 210:
          case 211:
          case 212:
          case 213:
          case 214:
          case 215:
          case 216:
          case 217:
          case 218:
          case 219:
          case 220:
          case 221:
          case 222:
          case 223:
          case 224:
          case 225:
          case 226:
          case 227:
          case 228:
          case 229:
          case 230:
          case 231:
          case 232:
          case 233:
          case 234:
          case 235:
          case 236:
          case 237:
          case 238:
          case 239:
          case 240:
          case 241:
          case 242:
          case 243:
          case 244:
          case 245:
          case 246:
          case 247:
          case 248:
          case 249:
          case 250:
          case 251:
          case 252:
          case 253:
          case 254:
          case 255:
          case 95:
            var j_10355006 = addInt(i_10320025, 1);
            L13: do {
                L14: while (true) {
                  if (!(j_10355006 < (formatstr_10320019).length)) Tmp15 = false; else {                    Tmp15 = (ConstSet20[formatstr_10320019[chckIndx(j_10355006, 0, (formatstr_10320019).length-1)]] != undefined);                  }                if (!Tmp15) break L14;
                  j_10355006 = addInt(j_10355006, 1);
                }
            } while(false);
            var x_10360013 = findNormalized_10315014(substr_1571022(formatstr_10320019, addInt(i_10320025, 1), subInt(j_10355006, 1)), a_10320021);
              if (!(0 <= x_10360013)) Tmp16 = false; else {                Tmp16 = (x_10360013 < ((a_10320021).length-1));              }            if (Tmp16) {
            s_10320018[s_10320018_Idx].push.apply(s_10320018[s_10320018_Idx], a_10320021[chckIndx(addInt(x_10360013, 1), 0, (a_10320021).length-1)]);;
            }
            else {
            invalidFormatString_10315046();
            }
            
            i_10320025 = j_10355006;
            break;
          default: 
            invalidFormatString_10315046();
            break;
          }
          }
          else {
            addChar(s_10320018[s_10320018_Idx], formatstr_10320019[chckIndx(i_10320025, 0, (formatstr_10320019).length-1)]);;
            i_10320025 = addInt(i_10320025, 1);
          }
          
        }
    } while(false);

  
}
function nsuFormatOpenArray(formatstr_10365027, a_10365029) {
  var result_10365030 = [[]];

    result_10365030[0] = nimCopy(null, mnewString(0), NTI1188013);
    nsuAddf(result_10365030, 0, formatstr_10365027, a_10365029);

  return result_10365030[0];

}
function getLine_11956332(my_11956334) {
  var result_11956335 = 0;

    result_11956335 = my_11956334.lineNumber;

  return result_11956335;

}
function getColNumber_11950214(L_11950216, pos_11950217) {
  var result_11950218 = 0;

    result_11950218 = absInt(subInt(pos_11950217, L_11950216.lineStart));

  return result_11950218;

}
function getColumn_11956300(my_11956302) {
  var result_11956303 = 0;

    result_11956303 = getColNumber_11950214(my_11956302, my_11956302.bufpos);

  return result_11956303;

}
function errorMsg_11956366(my_11956368) {
  var result_11956369 = [];

    if (!((my_11956368.kind == 0))) {
    failedAssertImpl_1305480(makeNimstrLit("parsexml.nim(326, 9) `my.kind == xmlError` "));
    }
    
    result_11956369 = nimCopy(null, nsuFormatOpenArray(makeNimstrLit("$1($2, $3) Error: $4"), [nimCopy(null, my_11956368.filename, NTI1188013), cstrToNimstr((getLine_11956332(my_11956368))+""), cstrToNimstr((getColumn_11956300(my_11956368))+""), nimCopy(null, errorMessages_11956072[chckIndx(my_11956368.err, 0, (errorMessages_11956072).length-1)], NTI1188013)]), NTI1188013);

  return result_11956369;

}
function nsuToLowerAsciiStr(s_9415048) {
  var result_9415049 = [];

    result_9415049 = nimCopy(null, mnewString(chckRange((s_9415048).length, 0, 2147483647)), NTI1188013);
    L1: do {
      var iHEX60gensym7_9420009 = 0;
      var colontmp__12925225 = 0;
      colontmp__12925225 = subInt((s_9415048).length, 1);
      var res_12925226 = 0;
      L2: do {
          L3: while (true) {
          if (!(res_12925226 <= colontmp__12925225)) break L3;
            iHEX60gensym7_9420009 = res_12925226;
            result_9415049[chckIndx(iHEX60gensym7_9420009, 0, (result_9415049).length-1)] = nsuToLowerAsciiChar(s_9415048[chckIndx(iHEX60gensym7_9420009, 0, (s_9415048).length-1)]);
            res_12925226 = addInt(res_12925226, 1);
          }
      } while(false);
    } while(false);

  return result_9415049;

}
function clientData_12355224(n_12355226) {
  var result_12355227 = 0;

    result_12355227 = n_12355226.fClientData;

  return result_12355227;

}
function clientDataHEX3D_12355242(n_12355244, data_12355245) {
    n_12355244.fClientData = data_12355245;

  
}
function toHtmlTag_12400014(s_12400016) {
    var Tmp1;

  var result_12400017 = 0;

    switch (toJSStr(s_12400016)) {
    case "a":
      Tmp1 = 1;
      break;
    case "abbr":
      Tmp1 = 2;
      break;
    case "acronym":
      Tmp1 = 3;
      break;
    case "address":
      Tmp1 = 4;
      break;
    case "applet":
      Tmp1 = 5;
      break;
    case "area":
      Tmp1 = 6;
      break;
    case "article":
      Tmp1 = 7;
      break;
    case "aside":
      Tmp1 = 8;
      break;
    case "audio":
      Tmp1 = 9;
      break;
    case "b":
      Tmp1 = 10;
      break;
    case "base":
      Tmp1 = 11;
      break;
    case "basefont":
      Tmp1 = 14;
      break;
    case "bdi":
      Tmp1 = 12;
      break;
    case "bdo":
      Tmp1 = 13;
      break;
    case "big":
      Tmp1 = 15;
      break;
    case "blockquote":
      Tmp1 = 16;
      break;
    case "body":
      Tmp1 = 17;
      break;
    case "br":
      Tmp1 = 18;
      break;
    case "button":
      Tmp1 = 19;
      break;
    case "canvas":
      Tmp1 = 20;
      break;
    case "caption":
      Tmp1 = 21;
      break;
    case "center":
      Tmp1 = 22;
      break;
    case "cite":
      Tmp1 = 23;
      break;
    case "code":
      Tmp1 = 24;
      break;
    case "col":
      Tmp1 = 25;
      break;
    case "colgroup":
      Tmp1 = 26;
      break;
    case "command":
      Tmp1 = 27;
      break;
    case "datalist":
      Tmp1 = 28;
      break;
    case "dd":
      Tmp1 = 29;
      break;
    case "del":
      Tmp1 = 30;
      break;
    case "details":
      Tmp1 = 31;
      break;
    case "dfn":
      Tmp1 = 32;
      break;
    case "dialog":
      Tmp1 = 33;
      break;
    case "div":
      Tmp1 = 34;
      break;
    case "dir":
      Tmp1 = 35;
      break;
    case "dl":
      Tmp1 = 36;
      break;
    case "dt":
      Tmp1 = 37;
      break;
    case "em":
      Tmp1 = 38;
      break;
    case "embed":
      Tmp1 = 39;
      break;
    case "fieldset":
      Tmp1 = 40;
      break;
    case "figcaption":
      Tmp1 = 41;
      break;
    case "figure":
      Tmp1 = 42;
      break;
    case "font":
      Tmp1 = 43;
      break;
    case "footer":
      Tmp1 = 44;
      break;
    case "form":
      Tmp1 = 45;
      break;
    case "frame":
      Tmp1 = 46;
      break;
    case "frameset":
      Tmp1 = 47;
      break;
    case "h1":
      Tmp1 = 48;
      break;
    case "h2":
      Tmp1 = 49;
      break;
    case "h3":
      Tmp1 = 50;
      break;
    case "h4":
      Tmp1 = 51;
      break;
    case "h5":
      Tmp1 = 52;
      break;
    case "h6":
      Tmp1 = 53;
      break;
    case "head":
      Tmp1 = 54;
      break;
    case "header":
      Tmp1 = 55;
      break;
    case "hgroup":
      Tmp1 = 56;
      break;
    case "html":
      Tmp1 = 57;
      break;
    case "hr":
      Tmp1 = 58;
      break;
    case "i":
      Tmp1 = 59;
      break;
    case "iframe":
      Tmp1 = 60;
      break;
    case "img":
      Tmp1 = 61;
      break;
    case "input":
      Tmp1 = 62;
      break;
    case "ins":
      Tmp1 = 63;
      break;
    case "isindex":
      Tmp1 = 64;
      break;
    case "kbd":
      Tmp1 = 65;
      break;
    case "keygen":
      Tmp1 = 66;
      break;
    case "label":
      Tmp1 = 67;
      break;
    case "legend":
      Tmp1 = 68;
      break;
    case "li":
      Tmp1 = 69;
      break;
    case "link":
      Tmp1 = 70;
      break;
    case "map":
      Tmp1 = 71;
      break;
    case "mark":
      Tmp1 = 72;
      break;
    case "menu":
      Tmp1 = 73;
      break;
    case "meta":
      Tmp1 = 74;
      break;
    case "meter":
      Tmp1 = 75;
      break;
    case "nav":
      Tmp1 = 76;
      break;
    case "nobr":
      Tmp1 = 77;
      break;
    case "noframes":
      Tmp1 = 78;
      break;
    case "noscript":
      Tmp1 = 79;
      break;
    case "object":
      Tmp1 = 80;
      break;
    case "ol":
      Tmp1 = 81;
      break;
    case "optgroup":
      Tmp1 = 82;
      break;
    case "option":
      Tmp1 = 83;
      break;
    case "output":
      Tmp1 = 84;
      break;
    case "p":
      Tmp1 = 85;
      break;
    case "param":
      Tmp1 = 86;
      break;
    case "pre":
      Tmp1 = 87;
      break;
    case "progress":
      Tmp1 = 88;
      break;
    case "q":
      Tmp1 = 89;
      break;
    case "rp":
      Tmp1 = 90;
      break;
    case "rt":
      Tmp1 = 91;
      break;
    case "ruby":
      Tmp1 = 92;
      break;
    case "s":
      Tmp1 = 93;
      break;
    case "samp":
      Tmp1 = 94;
      break;
    case "script":
      Tmp1 = 95;
      break;
    case "section":
      Tmp1 = 96;
      break;
    case "select":
      Tmp1 = 97;
      break;
    case "small":
      Tmp1 = 98;
      break;
    case "source":
      Tmp1 = 99;
      break;
    case "span":
      Tmp1 = 100;
      break;
    case "strike":
      Tmp1 = 101;
      break;
    case "strong":
      Tmp1 = 102;
      break;
    case "style":
      Tmp1 = 103;
      break;
    case "sub":
      Tmp1 = 104;
      break;
    case "summary":
      Tmp1 = 105;
      break;
    case "sup":
      Tmp1 = 106;
      break;
    case "table":
      Tmp1 = 107;
      break;
    case "tbody":
      Tmp1 = 108;
      break;
    case "td":
      Tmp1 = 109;
      break;
    case "textarea":
      Tmp1 = 110;
      break;
    case "tfoot":
      Tmp1 = 111;
      break;
    case "th":
      Tmp1 = 112;
      break;
    case "thead":
      Tmp1 = 113;
      break;
    case "time":
      Tmp1 = 114;
      break;
    case "title":
      Tmp1 = 115;
      break;
    case "tr":
      Tmp1 = 116;
      break;
    case "track":
      Tmp1 = 117;
      break;
    case "tt":
      Tmp1 = 118;
      break;
    case "u":
      Tmp1 = 119;
      break;
    case "ul":
      Tmp1 = 120;
      break;
    case "var":
      Tmp1 = 121;
      break;
    case "video":
      Tmp1 = 122;
      break;
    case "wbr":
      Tmp1 = 123;
      break;
    default: 
      Tmp1 = 0;
      break;
    }
    result_12400017 = Tmp1;

  return result_12400017;

}
function tag_12210215(n_12210217) {
    var Tmp1;

  var result_12210218 = [];

    if (!((n_12210217.k == 2))) {
    failedAssertImpl_1305480(makeNimstrLit("xmltree.nim(220, 10) `n.k == xnElement` "));
    }
    
    var Tmp1 = n_12210217;
    if (ConstSet22[Tmp1.k]===undefined) { raiseFieldError(makeNimstrLit("\'fTag\' is not accessible using discriminant \'k\' of type \'XmlNodeObj\'")); }
    result_12210218 = nimCopy(null, Tmp1.fTag, NTI1188013);

  return result_12210218;

}
function htmlTag_12400046(n_12400048) {
  var result_12400049 = 0;

    if ((clientData_12355224(n_12400048) == 0)) {
    clientDataHEX3D_12355242(n_12400048, toHtmlTag_12400014(tag_12210215(n_12400048)));
    }
    
    result_12400049 = chckRange(clientData_12355224(n_12400048), 0, 123);

  return result_12400049;

}
function nsuCmpIgnoreCase(a_9485016, b_9485017) {
  var result_9485018 = 0;

  BeforeRet: do {
    var i_9485020 = 0;
    var m_9485021 = nimMin((a_9485016).length, (b_9485017).length);
    L1: do {
        L2: while (true) {
        if (!(i_9485020 < m_9485021)) break L2;
          result_9485018 = subInt(nsuToLowerAsciiChar(a_9485016[chckIndx(i_9485020, 0, (a_9485016).length-1)]), nsuToLowerAsciiChar(b_9485017[chckIndx(i_9485020, 0, (b_9485017).length-1)]));
          if (!((result_9485018 == 0))) {
          break BeforeRet;
          }
          
          i_9485020 = addInt(i_9485020, 1);
        }
    } while(false);
    result_9485018 = subInt((a_9485016).length, (b_9485017).length);
  } while (false);

  return result_9485018;

}
function allLower_12396177(s_12396179) {
              var Tmp4;

  var result_12396180 = false;

  BeforeRet: do {
    L1: do {
      var c_12396182 = 0;
      var i_12925235 = 0;
      var L_12925236 = (s_12396179).length;
      L2: do {
          L3: while (true) {
          if (!(i_12925235 < L_12925236)) break L3;
            c_12396182 = s_12396179[chckIndx(i_12925235, 0, (s_12396179).length-1)];
              if ((c_12396182 < 97)) Tmp4 = true; else {                Tmp4 = (122 < c_12396182);              }            if (Tmp4) {
            result_12396180 = false;
            break BeforeRet;
            }
            
            i_12925235 = addInt(i_12925235, 1);
            if (!(((s_12396179).length == L_12925236))) {
            failedAssertImpl_1305480(makeNimstrLit("iterators.nim(222, 11) `len(a) == L` the length of the string changed while iterating over it"));
            }
            
          }
      } while(false);
    } while(false);
    result_12396180 = true;
    break BeforeRet;
  } while (false);

  return result_12396180;

}
function htmlTag_12400071(s_12400073) {
    var Tmp1;

  var result_12400074 = 0;

    if (allLower_12396177(s_12400073)) {
    Tmp1 = s_12400073;
    }
    else {
    Tmp1 = nsuToLowerAsciiStr(s_12400073);
    }
    
    var s_12400075 = nimCopy(null, Tmp1, NTI1188013);
    result_12400074 = toHtmlTag_12400014(s_12400075);

  return result_12400074;

}
function errorMsg_11965236(my_11965238, msg_11965239) {
  var result_11965240 = [];

    result_11965240 = nimCopy(null, nsuFormatOpenArray(makeNimstrLit("$1($2, $3) Error: $4"), [nimCopy(null, my_11965238.filename, NTI1188013), cstrToNimstr((getLine_11956332(my_11965238))+""), cstrToNimstr((getColumn_11956300(my_11965238))+""), nimCopy(null, msg_11965239, NTI1188013)]), NTI1188013);

  return result_11965240;

}
function expected_12430029(x_12430032, n_12430033) {
  var result_12430034 = [];

    result_12430034 = nimCopy(null, errorMsg_11965236(x_12430032, (makeNimstrLit("</") || []).concat(tag_12210215(n_12430033) || [],makeNimstrLit("> expected") || [])), NTI1188013);

  return result_12430034;

}
function untilElementEnd_12430056(x_12430059, result_12430060, errors_12430063, errors_12430063_Idx) {
      var Tmp1;
        var Tmp2;
                var Tmp5;
                var Tmp6;
                var Tmp7;
                var Tmp8;
                var Tmp9;
              var Tmp10;
                    var Tmp13;
                      var Tmp14;

  BeforeRet: do {
    if ((ConstSet21[htmlTag_12400046(result_12430060)] != undefined)) {
      if (!((kind_11956215(x_12430059) == 7))) Tmp1 = true; else {        Tmp1 = !((nsuCmpIgnoreCase((Tmp2 = rawData_11956258(x_12430059), Tmp2)[0][Tmp2[1]], tag_12210215(result_12430060)) == 0));      }    if (Tmp1) {
    break BeforeRet;
    }
    
    }
    
    L3: do {
        L4: while (true) {
        if (!true) break L4;
          switch (kind_11956215(x_12430059)) {
          case 6:
          case 8:
            switch (htmlTag_12400046(result_12430060)) {
            case 85:
            case 62:
            case 83:
              if ((ConstSet23[htmlTag_12400071((Tmp5 = rawData_11956258(x_12430059), Tmp5)[0][Tmp5[1]])] != undefined)) {
              errors_12430063[errors_12430063_Idx].push(expected_12430029(x_12430059, result_12430060));;
              break L3;
              }
              
              break;
            case 29:
            case 37:
            case 69:
              if ((ConstSet24[htmlTag_12400071((Tmp6 = rawData_11956258(x_12430059), Tmp6)[0][Tmp6[1]])] != undefined)) {
              errors_12430063[errors_12430063_Idx].push(expected_12430029(x_12430059, result_12430060));;
              break L3;
              }
              
              break;
            case 109:
            case 112:
              if ((ConstSet25[htmlTag_12400071((Tmp7 = rawData_11956258(x_12430059), Tmp7)[0][Tmp7[1]])] != undefined)) {
              errors_12430063[errors_12430063_Idx].push(expected_12430029(x_12430059, result_12430060));;
              break L3;
              }
              
              break;
            case 116:
              if ((htmlTag_12400071((Tmp8 = rawData_11956258(x_12430059), Tmp8)[0][Tmp8[1]]) == 116)) {
              errors_12430063[errors_12430063_Idx].push(expected_12430029(x_12430059, result_12430060));;
              break L3;
              }
              
              break;
            case 82:
              if ((ConstSet26[htmlTag_12400071((Tmp9 = rawData_11956258(x_12430059), Tmp9)[0][Tmp9[1]])] != undefined)) {
              errors_12430063[errors_12430063_Idx].push(expected_12430029(x_12430059, result_12430060));;
              break L3;
              }
              
              break;
            default: 
              break;
            }
            addNode_12426503(result_12430060, parse_12430022(x_12430059, errors_12430063, errors_12430063_Idx));
            break;
          case 7:
            if (!((nsuCmpIgnoreCase((Tmp10 = rawData_11956258(x_12430059), Tmp10)[0][Tmp10[1]], tag_12210215(result_12430060)) == 0))) {
            errors_12430063[errors_12430063_Idx].push(expected_12430029(x_12430059, result_12430060));;
            L11: do {
                L12: while (true) {
                if (!(ConstSet27[kind_11956215(x_12430059)] != undefined)) break L12;
                    if (!(kind_11956215(x_12430059) == 7)) Tmp13 = false; else {                      Tmp13 = (nsuCmpIgnoreCase((Tmp14 = rawData_11956258(x_12430059), Tmp14)[0][Tmp14[1]], tag_12210215(result_12430060)) == 0);                    }                  if (Tmp13) {
                  break L11;
                  }
                  
                  next_12050021(x_12430059);
                }
            } while(false);
            }
            
            next_12050021(x_12430059);
            break L3;
            break;
          case 1:
            errors_12430063[errors_12430063_Idx].push(expected_12430029(x_12430059, result_12430060));;
            break L3;
            break;
          default: 
            addNode_12426503(result_12430060, parse_12430022(x_12430059, errors_12430063, errors_12430063_Idx));
            break;
          }
        }
    } while(false);
  } while (false);

  
}
function attrsHEX3D_12325215(n_12325217, attr_12325218) {
    var Tmp1;

    if (!((n_12325217.k == 2))) {
    failedAssertImpl_1305480(makeNimstrLit("xmltree.nim(488, 10) `n.k == xnElement` "));
    }
    
    var Tmp1 = n_12325217;
    if (ConstSet28[Tmp1.k]===undefined) { raiseFieldError(makeNimstrLit("\'fAttr\' is not accessible using discriminant \'k\' of type \'XmlNodeObj\'")); }
    Tmp1.fAttr = attr_12325218;

  
}
function nstnewStringTable(mode_12095028) {
  var result_12095030 = null;

    result_12095030 = ({m_type: NTI12052208, counter: 0, data: [], mode: 0});
    result_12095030.mode = mode_12095028;
    result_12095030.counter = 0;
    result_12095030.data = new Array(64); for (var i=0;i<64;++i) {result_12095030.data[i]={Field0: [], Field1: [], Field2: false};}
  return result_12095030;

}
function raiseDivByZero() {
    raiseException({message: makeNimstrLit("division by zero"), parent: null, m_type: NTI1194635, name: null, trace: [], up: null}, "DivByZeroDefect");

  
}
function imul_10646082(a_10646084, b_10646085) {
  var result_10646086 = 0;

    var mask_10646087 = 65535;
    var aHi_10646096 = (((a_10646084 >>> 0) >>> 16) & mask_10646087);
    var aLo_10646097 = (a_10646084 & mask_10646087);
    var bHi_10646106 = (((b_10646085 >>> 0) >>> 16) & mask_10646087);
    var bLo_10646107 = (b_10646085 & mask_10646087);
    result_10646086 = ((((aLo_10646097 * bLo_10646107) >>> 0) + (((((aHi_10646096 * bLo_10646107) >>> 0) + ((aLo_10646097 * bHi_10646106) >>> 0)) >>> 0) << 16)) >>> 0);

  return result_10646086;

}
function rotl32_10646201(x_10646203, r_10646204) {
  var result_10646205 = 0;

    result_10646205 = ((x_10646203 << r_10646204) | ((x_10646203 >>> 0) >>> subInt(32, r_10646204)));

  return result_10646205;

}
function murmurHash_10646229(x_10646232) {
  var result_10646233 = 0;

  BeforeRet: do {
    var size_10646243 = (x_10646232).length;
    var stepSize_10646245 = 4;
    var n_10646246 = divInt(size_10646243, stepSize_10646245);
    var h1_10646247 = 0;
    var i_10646249 = 0;
    L1: do {
        L2: while (true) {
        if (!(i_10646249 < mulInt(n_10646246, stepSize_10646245))) break L2;
          var k1_10646250 = 0;
          var j_10646251 = stepSize_10646245;
          L3: do {
              L4: while (true) {
              if (!(0 < j_10646251)) break L4;
                j_10646251 = subInt(j_10646251, 1);
                k1_10646250 = ((k1_10646250 << 8) | x_10646232[chckIndx(addInt(i_10646249, j_10646251), 0, (x_10646232).length-1)]);
              }
          } while(false);
          i_10646249 = addInt(i_10646249, stepSize_10646245);
          k1_10646250 = imul_10646082(k1_10646250, 3432918353);
          k1_10646250 = rotl32_10646201(k1_10646250, 15);
          k1_10646250 = imul_10646082(k1_10646250, 461845907);
          h1_10646247 = (h1_10646247 ^ k1_10646250);
          h1_10646247 = rotl32_10646201(h1_10646247, 13);
          h1_10646247 = ((((h1_10646247 * 5) >>> 0) + 3864292196) >>> 0);
        }
    } while(false);
    var k1_10650207 = 0;
    var rem_10650208 = modInt(size_10646243, stepSize_10646245);
    L5: do {
        L6: while (true) {
        if (!(0 < rem_10650208)) break L6;
          rem_10650208 = subInt(rem_10650208, 1);
          k1_10650207 = ((k1_10650207 << 8) | x_10646232[chckIndx(addInt(i_10646249, rem_10650208), 0, (x_10646232).length-1)]);
        }
    } while(false);
    k1_10650207 = imul_10646082(k1_10650207, 3432918353);
    k1_10650207 = rotl32_10646201(k1_10650207, 15);
    k1_10650207 = imul_10646082(k1_10650207, 461845907);
    h1_10646247 = (h1_10646247 ^ k1_10650207);
    h1_10646247 = (h1_10646247 ^ size_10646243);
    h1_10646247 = (h1_10646247 ^ ((h1_10646247 >>> 0) >>> 16));
    h1_10646247 = imul_10646082(h1_10646247, 2246822507);
    h1_10646247 = (h1_10646247 ^ ((h1_10646247 >>> 0) >>> 13));
    h1_10646247 = imul_10646082(h1_10646247, 3266489909);
    h1_10646247 = (h1_10646247 ^ ((h1_10646247 >>> 0) >>> 16));
    result_10646233 = (h1_10646247|0);
    break BeforeRet;
  } while (false);

  return result_10646233;

}
function hash_10685214(x_10685216) {
  var result_10685217 = 0;

    result_10685217 = murmurHash_10646229((x_10685216.slice(0, ((x_10685216).length-1)+1)));

  return result_10685217;

}
function HEX21HEX26_10631270(h_10631272, val_10631273) {
  var result_10631274 = 0;

    var h_10631275 = (h_10631272 >>> 0);
    var val_10631276 = (val_10631273 >>> 0);
    var res_10631277 = ((h_10631275 + val_10631276) >>> 0);
    res_10631277 = ((res_10631277 + (res_10631277 << 10)) >>> 0);
    res_10631277 = (res_10631277 ^ ((res_10631277 >>> 0) >>> 6));
    result_10631274 = (res_10631277|0);

  return result_10631274;

}
function HEX21HEX24_10631305(h_10631307) {
  var result_10631308 = 0;

    var h_10631309 = (h_10631307 >>> 0);
    var res_10631317 = ((h_10631309 + (h_10631309 << 3)) >>> 0);
    res_10631317 = (res_10631317 ^ ((res_10631317 >>> 0) >>> 11));
    res_10631317 = ((res_10631317 + (res_10631317 << 15)) >>> 0);
    result_10631308 = (res_10631317|0);

  return result_10631308;

}
function hashIgnoreCase_10695045(x_10695047) {
  var result_10695048 = 0;

    var h_10695049 = 0;
    L1: do {
      var i_10695058 = 0;
      var colontmp__12925249 = 0;
      colontmp__12925249 = subInt((x_10695047).length, 1);
      var res_12925250 = 0;
      L2: do {
          L3: while (true) {
          if (!(res_12925250 <= colontmp__12925249)) break L3;
            i_10695058 = res_12925250;
            var c_10695059 = x_10695047[chckIndx(i_10695058, 0, (x_10695047).length-1)];
            if ((ConstSet29[c_10695059] != undefined)) {
            c_10695059 = chckRange(addInt(c_10695059, 32), 0, 255);
            }
            
            h_10695049 = HEX21HEX26_10631270(h_10695049, c_10695059);
            res_12925250 = addInt(res_12925250, 1);
          }
      } while(false);
    } while(false);
    result_10695048 = HEX21HEX24_10631305(h_10695049);

  return result_10695048;

}
function hashIgnoreStyle_10686414(x_10686416) {
  var result_10686417 = 0;

    var h_10686418 = 0;
    var i_10686420 = 0;
    var xLen_10686421 = (x_10686416).length;
    L1: do {
        L2: while (true) {
        if (!(i_10686420 < xLen_10686421)) break L2;
          var c_10686422 = x_10686416[chckIndx(i_10686420, 0, (x_10686416).length-1)];
          if ((c_10686422 == 95)) {
          i_10686420 = addInt(i_10686420, 1);
          }
          else {
            if ((ConstSet30[c_10686422] != undefined)) {
            c_10686422 = chckRange(addInt(c_10686422, 32), 0, 255);
            }
            
            h_10686418 = HEX21HEX26_10631270(h_10686418, c_10686422);
            i_10686420 = addInt(i_10686420, 1);
          }
          
        }
    } while(false);
    result_10686417 = HEX21HEX24_10631305(h_10686418);

  return result_10686417;

}
function myhash_12052419(t_12052421, key_12052422) {
  var result_12052423 = 0;

    switch (t_12052421.mode) {
    case 0:
      result_12052423 = hash_10685214(key_12052422);
      break;
    case 1:
      result_12052423 = hashIgnoreCase_10695045(key_12052422);
      break;
    case 2:
      result_12052423 = hashIgnoreStyle_10686414(key_12052422);
      break;
    }

  return result_12052423;

}
function cmpStrings(a_1460186, b_1460187) {
        if (a_1460186 == b_1460187) return 0;
    if (!a_1460186) return -1;
    if (!b_1460187) return 1;
    for (var i = 0; i < a_1460186.length && i < b_1460187.length; i++) {
      var result = a_1460186[i] - b_1460187[i];
      if (result != 0) return result;
    }
    return a_1460186.length - b_1460187.length;
  

  
}
function cmp_1196060(x_1196062, y_1196063) {
  var result_1460206 = 0;

  BeforeRet: do {
    result_1460206 = cmpStrings(x_1196062, y_1196063);
    break BeforeRet;
  } while (false);

  return result_1460206;

}
function myCmp_12052439(t_12052441, a_12052442, b_12052443) {
  var result_12052444 = false;

    switch (t_12052441.mode) {
    case 0:
      result_12052444 = (cmp_1196060(a_12052442, b_12052443) == 0);
      break;
    case 1:
      result_12052444 = (nsuCmpIgnoreCase(a_12052442, b_12052443) == 0);
      break;
    case 2:
      result_12052444 = (nsuCmpIgnoreStyle(a_12052442, b_12052443) == 0);
      break;
    }

  return result_12052444;

}
function nextTry_12065214(h_12065216, maxHash_12065217) {
  var result_12065218 = 0;

    result_12065218 = (addInt(h_12065216, 1) & maxHash_12065217);

  return result_12065218;

}
function rawGet_12065232(t_12065234, key_12065235) {
  var result_12065236 = 0;

  BeforeRet: do {
    var h_12065243 = (myhash_12052419(t_12065234, key_12065235) & ((t_12065234.data).length-1));
    L1: do {
        L2: while (true) {
        if (!t_12065234.data[chckIndx(h_12065243, 0, (t_12065234.data).length-1)].Field2) break L2;
          if (myCmp_12052439(t_12065234, t_12065234.data[chckIndx(h_12065243, 0, (t_12065234.data).length-1)].Field0, key_12065235)) {
          result_12065236 = h_12065243;
          break BeforeRet;
          }
          
          h_12065243 = nextTry_12065214(h_12065243, ((t_12065234.data).length-1));
        }
    } while(false);
    result_12065236 = -1;
  } while (false);

  return result_12065236;

}
function mustRehash_12052458(length_12052460, counter_12052461) {
  var result_12052462 = false;

    if (!((counter_12052461 < length_12052460))) {
    failedAssertImpl_1305480(makeNimstrLit("strtabs.nim(126, 9) `length > counter` "));
    }
    
    result_12052462 = ((mulInt(length_12052460, 2) < mulInt(counter_12052461, 3)) || (subInt(length_12052460, counter_12052461) < 4));

  return result_12052462;

}
function rawInsert_12090032(t_12090034, data_12090036, data_12090036_Idx, key_12090037, val_12090038) {
    var h_12090045 = (myhash_12052419(t_12090034, key_12090037) & ((data_12090036[data_12090036_Idx]).length-1));
    L1: do {
        L2: while (true) {
        if (!data_12090036[data_12090036_Idx][chckIndx(h_12090045, 0, (data_12090036[data_12090036_Idx]).length-1)].Field2) break L2;
          h_12090045 = nextTry_12065214(h_12090045, ((data_12090036[data_12090036_Idx]).length-1));
        }
    } while(false);
    data_12090036[data_12090036_Idx][chckIndx(h_12090045, 0, (data_12090036[data_12090036_Idx]).length-1)].Field0 = nimCopy(null, key_12090037, NTI1188013);
    data_12090036[data_12090036_Idx][chckIndx(h_12090045, 0, (data_12090036[data_12090036_Idx]).length-1)].Field1 = nimCopy(null, val_12090038, NTI1188013);
    data_12090036[data_12090036_Idx][chckIndx(h_12090045, 0, (data_12090036[data_12090036_Idx]).length-1)].Field2 = true;

  
}
function enlarge_12090065(t_12090067) {
            var Tmp4;
            var Tmp5;

    var n_12090068 = [[]];
    n_12090068[0] = new Array(chckRange(mulInt((t_12090067.data).length, 2), 0, 2147483647)); for (var i=0;i<chckRange(mulInt((t_12090067.data).length, 2), 0, 2147483647);++i) {n_12090068[0][i]={Field0: [], Field1: [], Field2: false};}    L1: do {
      var i_12090094 = 0;
      var colontmp__12925262 = 0;
      colontmp__12925262 = ((t_12090067.data).length-1);
      var res_12925263 = 0;
      L2: do {
          L3: while (true) {
          if (!(res_12925263 <= colontmp__12925262)) break L3;
            i_12090094 = res_12925263;
            if (t_12090067.data[chckIndx(i_12090094, 0, (t_12090067.data).length-1)].Field2) {
            Tmp4 = t_12090067.data[chckIndx(i_12090094, 0, (t_12090067.data).length-1)].Field0;
            t_12090067.data[chckIndx(i_12090094, 0, (t_12090067.data).length-1)].Field0 = genericReset(t_12090067.data[chckIndx(i_12090094, 0, (t_12090067.data).length-1)].Field0, NTI1188013);
            Tmp5 = t_12090067.data[chckIndx(i_12090094, 0, (t_12090067.data).length-1)].Field1;
            t_12090067.data[chckIndx(i_12090094, 0, (t_12090067.data).length-1)].Field1 = genericReset(t_12090067.data[chckIndx(i_12090094, 0, (t_12090067.data).length-1)].Field1, NTI1188013);
            rawInsert_12090032(t_12090067, n_12090068, 0, Tmp4, Tmp5);
            }
            
            res_12925263 = addInt(res_12925263, 1);
          }
      } while(false);
    } while(false);
    var Tmp6 = t_12090067.data; t_12090067.data = n_12090068[0]; n_12090068[0] = Tmp6;
  
}
function nstPut(t_12090175, key_12090176, val_12090177) {
    var index_12090178 = rawGet_12065232(t_12090175, key_12090176);
    if ((0 <= index_12090178)) {
    t_12090175.data[chckIndx(index_12090178, 0, (t_12090175.data).length-1)].Field1 = nimCopy(null, val_12090177, NTI1188013);
    }
    else {
      if (mustRehash_12052458((t_12090175.data).length, t_12090175.counter)) {
      enlarge_12090065(t_12090175);
      }
      
      rawInsert_12090032(t_12090175, t_12090175, "data", key_12090176, val_12090177);
      t_12090175.counter = addInt(t_12090175.counter, 1);
    }
    

  
}
function nstnewStringTableWithTableConstr(keyValuePairs_12095126, mode_12095127) {
  var result_12095129 = null;

    result_12095129 = nstnewStringTable(mode_12095127);
    L1: do {
      var key_12095162 = null;
      var key_12095162_Idx = 0;
      var val_12095164 = null;
      var val_12095164_Idx = 0;
      var i_12925240 = 0;
      L2: do {
          L3: while (true) {
          if (!(i_12925240 < (keyValuePairs_12095126).length)) break L3;
            key_12095162 = keyValuePairs_12095126[chckIndx(i_12925240, 0, (keyValuePairs_12095126).length-1)]; key_12095162_Idx = "Field0";
            val_12095164 = keyValuePairs_12095126[chckIndx(i_12925240, 0, (keyValuePairs_12095126).length-1)]; val_12095164_Idx = "Field1";
            nstPut(result_12095129, key_12095162[key_12095162_Idx], val_12095164[val_12095164_Idx]);
            i_12925240 = addInt(i_12925240, 1);
          }
      } while(false);
    } while(false);

  return result_12095129;

}
function attrs_12315246(n_12315248) {
    var Tmp1;

  var result_12315249 = null;

    if (!((n_12315248.k == 2))) {
    failedAssertImpl_1305480(makeNimstrLit("xmltree.nim(471, 10) `n.k == xnElement` "));
    }
    
    var Tmp1 = n_12315248;
    if (ConstSet31[Tmp1.k]===undefined) { raiseFieldError(makeNimstrLit("\'fAttr\' is not accessible using discriminant \'k\' of type \'XmlNodeObj\'")); }
    result_12315249 = Tmp1.fAttr;

  return result_12315249;

}
function rawData2_11956279(my_11956282) {
  var result_11956285 = null;
  var result_11956285_Idx = 0;

    result_11956285 = my_11956282; result_11956285_Idx = "b";

  return [result_11956285, result_11956285_Idx];

}
function newCData_12180232(cdata_12180234) {
    var Tmp1;

  var result_12180235 = null;

    result_12180235 = newXmlNode_12171049(3);
    var Tmp1 = result_12180235;
    if (ConstSet32[Tmp1.k]===undefined) { raiseFieldError(makeNimstrLit("\'fText\' is not accessible using discriminant \'k\' of type \'XmlNodeObj\'")); }
    Tmp1.fText = nimCopy(null, cdata_12180234, NTI1188013);

  return result_12180235;

}
function integerOutOfRangeError_2210049() {
    raiseException({message: makeNimstrLit("Parsed integer outside of valid range"), parent: null, m_type: NTI1194643, name: null, trace: [], up: null}, "ValueError");

  
}
function rawParseInt_2215201(s_2215203, b_2215205, b_2215205_Idx, start_2215206) {
      var Tmp1;
          var Tmp4;
      var Tmp7;

  var result_2215208 = 0;

    var sign_2215209 = -1;
    var i_2215210 = start_2215206;
    if ((i_2215210 < (s_2215203).length)) {
    if ((s_2215203[chckIndx(i_2215210, 0, (s_2215203).length-1)] == 43)) {
    i_2215210 += 1;
    }
    else {
    if ((s_2215203[chckIndx(i_2215210, 0, (s_2215203).length-1)] == 45)) {
    i_2215210 += 1;
    sign_2215209 = 1;
    }
    }
    }
    
      if (!(i_2215210 < (s_2215203).length)) Tmp1 = false; else {        Tmp1 = (ConstSet33[s_2215203[chckIndx(i_2215210, 0, (s_2215203).length-1)]] != undefined);      }    if (Tmp1) {
    b_2215205[b_2215205_Idx] = 0;
    L2: do {
        L3: while (true) {
          if (!(i_2215210 < (s_2215203).length)) Tmp4 = false; else {            Tmp4 = (ConstSet34[s_2215203[chckIndx(i_2215210, 0, (s_2215203).length-1)]] != undefined);          }        if (!Tmp4) break L3;
          var c_2225016 = (s_2215203[chckIndx(i_2215210, 0, (s_2215203).length-1)] - 48);
          if ((Math.trunc((-9223372036854775808 + c_2225016) / 10) <= b_2215205[b_2215205_Idx])) {
          b_2215205[b_2215205_Idx] = ((b_2215205[b_2215205_Idx] * 10) - c_2225016);
          }
          else {
          integerOutOfRangeError_2210049();
          }
          
          i_2215210 += 1;
          L5: do {
              L6: while (true) {
              if (!((i_2215210 < (s_2215203).length) && (s_2215203[chckIndx(i_2215210, 0, (s_2215203).length-1)] == 95))) break L6;
                i_2215210 += 1;
              }
          } while(false);
        }
    } while(false);
      if (!(sign_2215209 == -1)) Tmp7 = false; else {        Tmp7 = (b_2215205[b_2215205_Idx] == -9223372036854775808);      }    if (Tmp7) {
    integerOutOfRangeError_2210049();
    }
    else {
      b_2215205[b_2215205_Idx] = (b_2215205[b_2215205_Idx] * sign_2215209);
      result_2215208 = (i_2215210 - start_2215206);
    }
    
    }
    

  return result_2215208;

}
function npuParseBiggestInt(s_2230203, number_2230205, number_2230205_Idx, start_2230206) {
  var result_2230208 = 0;

    var res_2230209 = [0];
    result_2230208 = rawParseInt_2215201(s_2230203, res_2230209, 0, start_2230206);
    if (!((result_2230208 == 0))) {
    number_2230205[number_2230205_Idx] = res_2230209[0];
    }
    

  return result_2230208;

}
function npuParseInt(s_2235016, number_2235018, number_2235018_Idx, start_2235019) {
      var Tmp1;

  var result_2235021 = 0;

    var res_2235022 = [0];
    result_2235021 = npuParseBiggestInt(s_2235016, res_2235022, 0, start_2235019);
      if ((res_2235022[0] < -2147483648)) Tmp1 = true; else {        Tmp1 = (2147483647 < res_2235022[0]);      }    if (Tmp1) {
    integerOutOfRangeError_2210049();
    }
    
    if (!((result_2235021 == 0))) {
    number_2235018[number_2235018_Idx] = chckRange(res_2235022[0], -2147483648, 2147483647);
    }
    

  return result_2235021;

}
function nsuParseInt(s_9760431) {
      var Tmp1;

  var result_9760432 = [0];

    result_9760432[0] = 0;
    var L_9760434 = npuParseInt(s_9760431, result_9760432, 0, 0);
      if (!((L_9760434 == (s_9760431).length))) Tmp1 = true; else {        Tmp1 = (L_9760434 == 0);      }    if (Tmp1) {
    raiseException({message: (makeNimstrLit("invalid integer: ") || []).concat(s_9760431 || []), parent: null, m_type: NTI1194643, name: null, trace: [], up: null}, "ValueError");
    }
    

  return result_9760432[0];

}
function HEX5BHEX5D_5890068(s_5890072, x_5890074) {
  var result_5890075 = [];

    var a_5890201 = x_5890074.a;
    var L_5890401 = addInt(subInt(subInt((s_5890072).length, x_5890074.b), a_5890201), 1);
    result_5890075 = nimCopy(null, mnewString(chckRange(L_5890401, 0, 2147483647)), NTI1188013);
    L1: do {
      var i_5890409 = 0;
      var i_12926736 = 0;
      L2: do {
          L3: while (true) {
          if (!(i_12926736 < L_5890401)) break L3;
            i_5890409 = i_12926736;
            result_5890075[chckIndx(i_5890409, 0, (result_5890075).length-1)] = s_5890072[chckIndx(addInt(i_5890409, a_5890201), 0, (s_5890072).length-1)];
            i_12926736 = addInt(i_12926736, 1);
          }
      } while(false);
    } while(false);

  return result_5890075;

}
function HEX2EHEX2E_5890001(a_5890006, b_5890008) {
  var result_5890014 = ({a: 0, b: 0});

    nimCopy(result_5890014, {a: a_5890006, b: b_5890008}, NTI5890011);

  return result_5890014;

}
function parseHex_9870019(s_9870022, number_9870024, number_9870024_Idx, start_9870025, maxLen_9870026) {
    var Tmp1;

  var result_9870027 = 0;

    var i_9870028 = start_9870025;
    var output_9870029 = 0;
    var foundDigit_9870030 = false;
    if ((maxLen_9870026 == 0)) {
    Tmp1 = (s_9870022).length;
    }
    else {
    Tmp1 = addInt(i_9870028, maxLen_9870026);
    }
    
    var last_9870031 = nimMin((s_9870022).length, Tmp1);
    if ((((addInt(i_9870028, 1) < last_9870031) && (s_9870022[chckIndx(i_9870028, 0, (s_9870022).length-1)] == 48)) && (ConstSet35[s_9870022[chckIndx(addInt(i_9870028, 1), 0, (s_9870022).length-1)]] != undefined))) {
    i_9870028 = addInt(i_9870028, 2);
    }
    else {
    if (((i_9870028 < last_9870031) && (s_9870022[chckIndx(i_9870028, 0, (s_9870022).length-1)] == 35))) {
    i_9870028 = addInt(i_9870028, 1);
    }
    }
    L2: do {
        L3: while (true) {
        if (!(i_9870028 < last_9870031)) break L3;
          switch (s_9870022[chckIndx(i_9870028, 0, (s_9870022).length-1)]) {
          case 95:
            break;
          case 48:
          case 49:
          case 50:
          case 51:
          case 52:
          case 53:
          case 54:
          case 55:
          case 56:
          case 57:
            output_9870029 = ((output_9870029 << 4) | subInt(s_9870022[chckIndx(i_9870028, 0, (s_9870022).length-1)], 48));
            foundDigit_9870030 = true;
            break;
          case 97:
          case 98:
          case 99:
          case 100:
          case 101:
          case 102:
            output_9870029 = ((output_9870029 << 4) | addInt(subInt(s_9870022[chckIndx(i_9870028, 0, (s_9870022).length-1)], 97), 10));
            foundDigit_9870030 = true;
            break;
          case 65:
          case 66:
          case 67:
          case 68:
          case 69:
          case 70:
            output_9870029 = ((output_9870029 << 4) | addInt(subInt(s_9870022[chckIndx(i_9870028, 0, (s_9870022).length-1)], 65), 10));
            foundDigit_9870030 = true;
            break;
          default: 
            break L2;
            break;
          }
          i_9870028 = addInt(i_9870028, 1);
        }
    } while(false);
    if (foundDigit_9870030) {
    number_9870024[number_9870024_Idx] = output_9870029;
    result_9870027 = subInt(i_9870028, start_9870025);
    }
    

  return result_9870027;

}
function nsuParseHexInt(s_9870017) {
      var Tmp1;

  var result_9870018 = [0];

    result_9870018[0] = 0;
    var L_9905030 = parseHex_9870019(s_9870017, result_9870018, 0, 0, 0);
      if (!((L_9905030 == (s_9870017).length))) Tmp1 = true; else {        Tmp1 = (L_9905030 == 0);      }    if (Tmp1) {
    raiseException({message: (makeNimstrLit("invalid hex integer: ") || []).concat(s_9870017 || []), parent: null, m_type: NTI1194643, name: null, trace: [], up: null}, "ValueError");
    }
    

  return result_9870018[0];

}
function contains_12425021(s_12425027, value_12425028) {
  var result_12425029 = false;

    result_12425029 = ((s_12425027.a <= value_12425028) && (value_12425028 <= s_12425027.b));

  return result_12425029;

}
function entityToRune_12400114(entity_12400116) {
      var Tmp2;
      var Tmp4;
    var Tmp5;

  var result_12400117 = 0;

  BeforeRet: do {
    if (((entity_12400116).length < 2)) {
    break BeforeRet;
    }
    
    if ((entity_12400116[chckIndx(0, 0, (entity_12400116).length-1)] == 35)) {
    var runeValue_12400119 = 0;
    switch (entity_12400116[chckIndx(1, 0, (entity_12400116).length-1)]) {
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
++excHandler;
      Tmp2 = framePtr;
      try {
      runeValue_12400119 = nsuParseInt(HEX5BHEX5D_5890068(entity_12400116, HEX2EHEX2E_5890001(1, 1)));
--excHandler;
} catch (EXC) {
 var prevJSError = lastJSError;
 lastJSError = EXC;
 --excHandler;
      framePtr = Tmp2;
      lastJSError = prevJSError;
      } finally {
      framePtr = Tmp2;
      }
      break;
    case 120:
    case 88:
++excHandler;
      Tmp4 = framePtr;
      try {
      runeValue_12400119 = nsuParseHexInt(HEX5BHEX5D_5890068(entity_12400116, HEX2EHEX2E_5890001(2, 1)));
--excHandler;
} catch (EXC) {
 var prevJSError = lastJSError;
 lastJSError = EXC;
 --excHandler;
      framePtr = Tmp4;
      lastJSError = prevJSError;
      } finally {
      framePtr = Tmp4;
      }
      break;
    default: 
      break;
    }
    if (!(contains_12425021(HEX2EHEX2E_3440220(0, 1114111), runeValue_12400119))) {
    runeValue_12400119 = 0;
    }
    
    result_12400117 = ((runeValue_12400119)|0);
    break BeforeRet;
    }
    
    switch (toJSStr(entity_12400116)) {
    case "Tab":
      Tmp5 = 9;
      break;
    case "NewLine":
      Tmp5 = 10;
      break;
    case "excl":
      Tmp5 = 33;
      break;
    case "quot":
    case "QUOT":
      Tmp5 = 34;
      break;
    case "num":
      Tmp5 = 35;
      break;
    case "dollar":
      Tmp5 = 36;
      break;
    case "percnt":
      Tmp5 = 37;
      break;
    case "amp":
    case "AMP":
      Tmp5 = 38;
      break;
    case "apos":
      Tmp5 = 39;
      break;
    case "lpar":
      Tmp5 = 40;
      break;
    case "rpar":
      Tmp5 = 41;
      break;
    case "ast":
    case "midast":
      Tmp5 = 42;
      break;
    case "plus":
      Tmp5 = 43;
      break;
    case "comma":
      Tmp5 = 44;
      break;
    case "period":
      Tmp5 = 46;
      break;
    case "sol":
      Tmp5 = 47;
      break;
    case "colon":
      Tmp5 = 58;
      break;
    case "semi":
      Tmp5 = 59;
      break;
    case "lt":
    case "LT":
      Tmp5 = 60;
      break;
    case "equals":
      Tmp5 = 61;
      break;
    case "gt":
    case "GT":
      Tmp5 = 62;
      break;
    case "quest":
      Tmp5 = 63;
      break;
    case "commat":
      Tmp5 = 64;
      break;
    case "lsqb":
    case "lbrack":
      Tmp5 = 91;
      break;
    case "bsol":
      Tmp5 = 92;
      break;
    case "rsqb":
    case "rbrack":
      Tmp5 = 93;
      break;
    case "Hat":
      Tmp5 = 94;
      break;
    case "lowbar":
      Tmp5 = 95;
      break;
    case "grave":
    case "DiacriticalGrave":
      Tmp5 = 96;
      break;
    case "lcub":
    case "lbrace":
      Tmp5 = 123;
      break;
    case "verbar":
    case "vert":
    case "VerticalLine":
      Tmp5 = 124;
      break;
    case "rcub":
    case "rbrace":
      Tmp5 = 125;
      break;
    case "nbsp":
    case "NonBreakingSpace":
      Tmp5 = 160;
      break;
    case "iexcl":
      Tmp5 = 161;
      break;
    case "cent":
      Tmp5 = 162;
      break;
    case "pound":
      Tmp5 = 163;
      break;
    case "curren":
      Tmp5 = 164;
      break;
    case "yen":
      Tmp5 = 165;
      break;
    case "brvbar":
      Tmp5 = 166;
      break;
    case "sect":
      Tmp5 = 167;
      break;
    case "Dot":
    case "die":
    case "DoubleDot":
    case "uml":
      Tmp5 = 168;
      break;
    case "copy":
    case "COPY":
      Tmp5 = 169;
      break;
    case "ordf":
      Tmp5 = 170;
      break;
    case "laquo":
      Tmp5 = 171;
      break;
    case "not":
      Tmp5 = 172;
      break;
    case "shy":
      Tmp5 = 173;
      break;
    case "reg":
    case "circledR":
    case "REG":
      Tmp5 = 174;
      break;
    case "macr":
    case "OverBar":
    case "strns":
      Tmp5 = 175;
      break;
    case "deg":
      Tmp5 = 176;
      break;
    case "plusmn":
    case "pm":
    case "PlusMinus":
      Tmp5 = 177;
      break;
    case "sup2":
      Tmp5 = 178;
      break;
    case "sup3":
      Tmp5 = 179;
      break;
    case "acute":
    case "DiacriticalAcute":
      Tmp5 = 180;
      break;
    case "micro":
      Tmp5 = 181;
      break;
    case "para":
      Tmp5 = 182;
      break;
    case "middot":
    case "centerdot":
    case "CenterDot":
      Tmp5 = 183;
      break;
    case "cedil":
    case "Cedilla":
      Tmp5 = 184;
      break;
    case "sup1":
      Tmp5 = 185;
      break;
    case "ordm":
      Tmp5 = 186;
      break;
    case "raquo":
      Tmp5 = 187;
      break;
    case "frac14":
      Tmp5 = 188;
      break;
    case "frac12":
    case "half":
      Tmp5 = 189;
      break;
    case "frac34":
      Tmp5 = 190;
      break;
    case "iquest":
      Tmp5 = 191;
      break;
    case "Agrave":
      Tmp5 = 192;
      break;
    case "Aacute":
      Tmp5 = 193;
      break;
    case "Acirc":
      Tmp5 = 194;
      break;
    case "Atilde":
      Tmp5 = 195;
      break;
    case "Auml":
      Tmp5 = 196;
      break;
    case "Aring":
      Tmp5 = 197;
      break;
    case "AElig":
      Tmp5 = 198;
      break;
    case "Ccedil":
      Tmp5 = 199;
      break;
    case "Egrave":
      Tmp5 = 200;
      break;
    case "Eacute":
      Tmp5 = 201;
      break;
    case "Ecirc":
      Tmp5 = 202;
      break;
    case "Euml":
      Tmp5 = 203;
      break;
    case "Igrave":
      Tmp5 = 204;
      break;
    case "Iacute":
      Tmp5 = 205;
      break;
    case "Icirc":
      Tmp5 = 206;
      break;
    case "Iuml":
      Tmp5 = 207;
      break;
    case "ETH":
      Tmp5 = 208;
      break;
    case "Ntilde":
      Tmp5 = 209;
      break;
    case "Ograve":
      Tmp5 = 210;
      break;
    case "Oacute":
      Tmp5 = 211;
      break;
    case "Ocirc":
      Tmp5 = 212;
      break;
    case "Otilde":
      Tmp5 = 213;
      break;
    case "Ouml":
      Tmp5 = 214;
      break;
    case "times":
      Tmp5 = 215;
      break;
    case "Oslash":
      Tmp5 = 216;
      break;
    case "Ugrave":
      Tmp5 = 217;
      break;
    case "Uacute":
      Tmp5 = 218;
      break;
    case "Ucirc":
      Tmp5 = 219;
      break;
    case "Uuml":
      Tmp5 = 220;
      break;
    case "Yacute":
      Tmp5 = 221;
      break;
    case "THORN":
      Tmp5 = 222;
      break;
    case "szlig":
      Tmp5 = 223;
      break;
    case "agrave":
      Tmp5 = 224;
      break;
    case "aacute":
      Tmp5 = 225;
      break;
    case "acirc":
      Tmp5 = 226;
      break;
    case "atilde":
      Tmp5 = 227;
      break;
    case "auml":
      Tmp5 = 228;
      break;
    case "aring":
      Tmp5 = 229;
      break;
    case "aelig":
      Tmp5 = 230;
      break;
    case "ccedil":
      Tmp5 = 231;
      break;
    case "egrave":
      Tmp5 = 232;
      break;
    case "eacute":
      Tmp5 = 233;
      break;
    case "ecirc":
      Tmp5 = 234;
      break;
    case "euml":
      Tmp5 = 235;
      break;
    case "igrave":
      Tmp5 = 236;
      break;
    case "iacute":
      Tmp5 = 237;
      break;
    case "icirc":
      Tmp5 = 238;
      break;
    case "iuml":
      Tmp5 = 239;
      break;
    case "eth":
      Tmp5 = 240;
      break;
    case "ntilde":
      Tmp5 = 241;
      break;
    case "ograve":
      Tmp5 = 242;
      break;
    case "oacute":
      Tmp5 = 243;
      break;
    case "ocirc":
      Tmp5 = 244;
      break;
    case "otilde":
      Tmp5 = 245;
      break;
    case "ouml":
      Tmp5 = 246;
      break;
    case "divide":
    case "div":
      Tmp5 = 247;
      break;
    case "oslash":
      Tmp5 = 248;
      break;
    case "ugrave":
      Tmp5 = 249;
      break;
    case "uacute":
      Tmp5 = 250;
      break;
    case "ucirc":
      Tmp5 = 251;
      break;
    case "uuml":
      Tmp5 = 252;
      break;
    case "yacute":
      Tmp5 = 253;
      break;
    case "thorn":
      Tmp5 = 254;
      break;
    case "yuml":
      Tmp5 = 255;
      break;
    case "Amacr":
      Tmp5 = 256;
      break;
    case "amacr":
      Tmp5 = 257;
      break;
    case "Abreve":
      Tmp5 = 258;
      break;
    case "abreve":
      Tmp5 = 259;
      break;
    case "Aogon":
      Tmp5 = 260;
      break;
    case "aogon":
      Tmp5 = 261;
      break;
    case "Cacute":
      Tmp5 = 262;
      break;
    case "cacute":
      Tmp5 = 263;
      break;
    case "Ccirc":
      Tmp5 = 264;
      break;
    case "ccirc":
      Tmp5 = 265;
      break;
    case "Cdot":
      Tmp5 = 266;
      break;
    case "cdot":
      Tmp5 = 267;
      break;
    case "Ccaron":
      Tmp5 = 268;
      break;
    case "ccaron":
      Tmp5 = 269;
      break;
    case "Dcaron":
      Tmp5 = 270;
      break;
    case "dcaron":
      Tmp5 = 271;
      break;
    case "Dstrok":
      Tmp5 = 272;
      break;
    case "dstrok":
      Tmp5 = 273;
      break;
    case "Emacr":
      Tmp5 = 274;
      break;
    case "emacr":
      Tmp5 = 275;
      break;
    case "Edot":
      Tmp5 = 278;
      break;
    case "edot":
      Tmp5 = 279;
      break;
    case "Eogon":
      Tmp5 = 280;
      break;
    case "eogon":
      Tmp5 = 281;
      break;
    case "Ecaron":
      Tmp5 = 282;
      break;
    case "ecaron":
      Tmp5 = 283;
      break;
    case "Gcirc":
      Tmp5 = 284;
      break;
    case "gcirc":
      Tmp5 = 285;
      break;
    case "Gbreve":
      Tmp5 = 286;
      break;
    case "gbreve":
      Tmp5 = 287;
      break;
    case "Gdot":
      Tmp5 = 288;
      break;
    case "gdot":
      Tmp5 = 289;
      break;
    case "Gcedil":
      Tmp5 = 290;
      break;
    case "Hcirc":
      Tmp5 = 292;
      break;
    case "hcirc":
      Tmp5 = 293;
      break;
    case "Hstrok":
      Tmp5 = 294;
      break;
    case "hstrok":
      Tmp5 = 295;
      break;
    case "Itilde":
      Tmp5 = 296;
      break;
    case "itilde":
      Tmp5 = 297;
      break;
    case "Imacr":
      Tmp5 = 298;
      break;
    case "imacr":
      Tmp5 = 299;
      break;
    case "Iogon":
      Tmp5 = 302;
      break;
    case "iogon":
      Tmp5 = 303;
      break;
    case "Idot":
      Tmp5 = 304;
      break;
    case "imath":
    case "inodot":
      Tmp5 = 305;
      break;
    case "IJlig":
      Tmp5 = 306;
      break;
    case "ijlig":
      Tmp5 = 307;
      break;
    case "Jcirc":
      Tmp5 = 308;
      break;
    case "jcirc":
      Tmp5 = 309;
      break;
    case "Kcedil":
      Tmp5 = 310;
      break;
    case "kcedil":
      Tmp5 = 311;
      break;
    case "kgreen":
      Tmp5 = 312;
      break;
    case "Lacute":
      Tmp5 = 313;
      break;
    case "lacute":
      Tmp5 = 314;
      break;
    case "Lcedil":
      Tmp5 = 315;
      break;
    case "lcedil":
      Tmp5 = 316;
      break;
    case "Lcaron":
      Tmp5 = 317;
      break;
    case "lcaron":
      Tmp5 = 318;
      break;
    case "Lmidot":
      Tmp5 = 319;
      break;
    case "lmidot":
      Tmp5 = 320;
      break;
    case "Lstrok":
      Tmp5 = 321;
      break;
    case "lstrok":
      Tmp5 = 322;
      break;
    case "Nacute":
      Tmp5 = 323;
      break;
    case "nacute":
      Tmp5 = 324;
      break;
    case "Ncedil":
      Tmp5 = 325;
      break;
    case "ncedil":
      Tmp5 = 326;
      break;
    case "Ncaron":
      Tmp5 = 327;
      break;
    case "ncaron":
      Tmp5 = 328;
      break;
    case "napos":
      Tmp5 = 329;
      break;
    case "ENG":
      Tmp5 = 330;
      break;
    case "eng":
      Tmp5 = 331;
      break;
    case "Omacr":
      Tmp5 = 332;
      break;
    case "omacr":
      Tmp5 = 333;
      break;
    case "Odblac":
      Tmp5 = 336;
      break;
    case "odblac":
      Tmp5 = 337;
      break;
    case "OElig":
      Tmp5 = 338;
      break;
    case "oelig":
      Tmp5 = 339;
      break;
    case "Racute":
      Tmp5 = 340;
      break;
    case "racute":
      Tmp5 = 341;
      break;
    case "Rcedil":
      Tmp5 = 342;
      break;
    case "rcedil":
      Tmp5 = 343;
      break;
    case "Rcaron":
      Tmp5 = 344;
      break;
    case "rcaron":
      Tmp5 = 345;
      break;
    case "Sacute":
      Tmp5 = 346;
      break;
    case "sacute":
      Tmp5 = 347;
      break;
    case "Scirc":
      Tmp5 = 348;
      break;
    case "scirc":
      Tmp5 = 349;
      break;
    case "Scedil":
      Tmp5 = 350;
      break;
    case "scedil":
      Tmp5 = 351;
      break;
    case "Scaron":
      Tmp5 = 352;
      break;
    case "scaron":
      Tmp5 = 353;
      break;
    case "Tcedil":
      Tmp5 = 354;
      break;
    case "tcedil":
      Tmp5 = 355;
      break;
    case "Tcaron":
      Tmp5 = 356;
      break;
    case "tcaron":
      Tmp5 = 357;
      break;
    case "Tstrok":
      Tmp5 = 358;
      break;
    case "tstrok":
      Tmp5 = 359;
      break;
    case "Utilde":
      Tmp5 = 360;
      break;
    case "utilde":
      Tmp5 = 361;
      break;
    case "Umacr":
      Tmp5 = 362;
      break;
    case "umacr":
      Tmp5 = 363;
      break;
    case "Ubreve":
      Tmp5 = 364;
      break;
    case "ubreve":
      Tmp5 = 365;
      break;
    case "Uring":
      Tmp5 = 366;
      break;
    case "uring":
      Tmp5 = 367;
      break;
    case "Udblac":
      Tmp5 = 368;
      break;
    case "udblac":
      Tmp5 = 369;
      break;
    case "Uogon":
      Tmp5 = 370;
      break;
    case "uogon":
      Tmp5 = 371;
      break;
    case "Wcirc":
      Tmp5 = 372;
      break;
    case "wcirc":
      Tmp5 = 373;
      break;
    case "Ycirc":
      Tmp5 = 374;
      break;
    case "ycirc":
      Tmp5 = 375;
      break;
    case "Yuml":
      Tmp5 = 376;
      break;
    case "Zacute":
      Tmp5 = 377;
      break;
    case "zacute":
      Tmp5 = 378;
      break;
    case "Zdot":
      Tmp5 = 379;
      break;
    case "zdot":
      Tmp5 = 380;
      break;
    case "Zcaron":
      Tmp5 = 381;
      break;
    case "zcaron":
      Tmp5 = 382;
      break;
    case "fnof":
      Tmp5 = 402;
      break;
    case "imped":
      Tmp5 = 437;
      break;
    case "gacute":
      Tmp5 = 501;
      break;
    case "jmath":
      Tmp5 = 567;
      break;
    case "circ":
      Tmp5 = 710;
      break;
    case "caron":
    case "Hacek":
      Tmp5 = 711;
      break;
    case "breve":
    case "Breve":
      Tmp5 = 728;
      break;
    case "dot":
    case "DiacriticalDot":
      Tmp5 = 729;
      break;
    case "ring":
      Tmp5 = 730;
      break;
    case "ogon":
      Tmp5 = 731;
      break;
    case "tilde":
    case "DiacriticalTilde":
      Tmp5 = 732;
      break;
    case "dblac":
    case "DiacriticalDoubleAcute":
      Tmp5 = 733;
      break;
    case "DownBreve":
      Tmp5 = 785;
      break;
    case "UnderBar":
      Tmp5 = 818;
      break;
    case "Alpha":
      Tmp5 = 913;
      break;
    case "Beta":
      Tmp5 = 914;
      break;
    case "Gamma":
      Tmp5 = 915;
      break;
    case "Delta":
      Tmp5 = 916;
      break;
    case "Epsilon":
      Tmp5 = 917;
      break;
    case "Zeta":
      Tmp5 = 918;
      break;
    case "Eta":
      Tmp5 = 919;
      break;
    case "Theta":
      Tmp5 = 920;
      break;
    case "Iota":
      Tmp5 = 921;
      break;
    case "Kappa":
      Tmp5 = 922;
      break;
    case "Lambda":
      Tmp5 = 923;
      break;
    case "Mu":
      Tmp5 = 924;
      break;
    case "Nu":
      Tmp5 = 925;
      break;
    case "Xi":
      Tmp5 = 926;
      break;
    case "Omicron":
      Tmp5 = 927;
      break;
    case "Pi":
      Tmp5 = 928;
      break;
    case "Rho":
      Tmp5 = 929;
      break;
    case "Sigma":
      Tmp5 = 931;
      break;
    case "Tau":
      Tmp5 = 932;
      break;
    case "Upsilon":
      Tmp5 = 933;
      break;
    case "Phi":
      Tmp5 = 934;
      break;
    case "Chi":
      Tmp5 = 935;
      break;
    case "Psi":
      Tmp5 = 936;
      break;
    case "Omega":
      Tmp5 = 937;
      break;
    case "alpha":
      Tmp5 = 945;
      break;
    case "beta":
      Tmp5 = 946;
      break;
    case "gamma":
      Tmp5 = 947;
      break;
    case "delta":
      Tmp5 = 948;
      break;
    case "epsiv":
    case "varepsilon":
    case "epsilon":
      Tmp5 = 949;
      break;
    case "zeta":
      Tmp5 = 950;
      break;
    case "eta":
      Tmp5 = 951;
      break;
    case "theta":
      Tmp5 = 952;
      break;
    case "iota":
      Tmp5 = 953;
      break;
    case "kappa":
      Tmp5 = 954;
      break;
    case "lambda":
      Tmp5 = 955;
      break;
    case "mu":
      Tmp5 = 956;
      break;
    case "nu":
      Tmp5 = 957;
      break;
    case "xi":
      Tmp5 = 958;
      break;
    case "omicron":
      Tmp5 = 959;
      break;
    case "pi":
      Tmp5 = 960;
      break;
    case "rho":
      Tmp5 = 961;
      break;
    case "sigmav":
    case "varsigma":
    case "sigmaf":
      Tmp5 = 962;
      break;
    case "sigma":
      Tmp5 = 963;
      break;
    case "tau":
      Tmp5 = 964;
      break;
    case "upsi":
    case "upsilon":
      Tmp5 = 965;
      break;
    case "phi":
    case "phiv":
    case "varphi":
      Tmp5 = 966;
      break;
    case "chi":
      Tmp5 = 967;
      break;
    case "psi":
      Tmp5 = 968;
      break;
    case "omega":
      Tmp5 = 969;
      break;
    case "thetav":
    case "vartheta":
    case "thetasym":
      Tmp5 = 977;
      break;
    case "Upsi":
    case "upsih":
      Tmp5 = 978;
      break;
    case "straightphi":
      Tmp5 = 981;
      break;
    case "piv":
    case "varpi":
      Tmp5 = 982;
      break;
    case "Gammad":
      Tmp5 = 988;
      break;
    case "gammad":
    case "digamma":
      Tmp5 = 989;
      break;
    case "kappav":
    case "varkappa":
      Tmp5 = 1008;
      break;
    case "rhov":
    case "varrho":
      Tmp5 = 1009;
      break;
    case "epsi":
    case "straightepsilon":
      Tmp5 = 1013;
      break;
    case "bepsi":
    case "backepsilon":
      Tmp5 = 1014;
      break;
    case "IOcy":
      Tmp5 = 1025;
      break;
    case "DJcy":
      Tmp5 = 1026;
      break;
    case "GJcy":
      Tmp5 = 1027;
      break;
    case "Jukcy":
      Tmp5 = 1028;
      break;
    case "DScy":
      Tmp5 = 1029;
      break;
    case "Iukcy":
      Tmp5 = 1030;
      break;
    case "YIcy":
      Tmp5 = 1031;
      break;
    case "Jsercy":
      Tmp5 = 1032;
      break;
    case "LJcy":
      Tmp5 = 1033;
      break;
    case "NJcy":
      Tmp5 = 1034;
      break;
    case "TSHcy":
      Tmp5 = 1035;
      break;
    case "KJcy":
      Tmp5 = 1036;
      break;
    case "Ubrcy":
      Tmp5 = 1038;
      break;
    case "DZcy":
      Tmp5 = 1039;
      break;
    case "Acy":
      Tmp5 = 1040;
      break;
    case "Bcy":
      Tmp5 = 1041;
      break;
    case "Vcy":
      Tmp5 = 1042;
      break;
    case "Gcy":
      Tmp5 = 1043;
      break;
    case "Dcy":
      Tmp5 = 1044;
      break;
    case "IEcy":
      Tmp5 = 1045;
      break;
    case "ZHcy":
      Tmp5 = 1046;
      break;
    case "Zcy":
      Tmp5 = 1047;
      break;
    case "Icy":
      Tmp5 = 1048;
      break;
    case "Jcy":
      Tmp5 = 1049;
      break;
    case "Kcy":
      Tmp5 = 1050;
      break;
    case "Lcy":
      Tmp5 = 1051;
      break;
    case "Mcy":
      Tmp5 = 1052;
      break;
    case "Ncy":
      Tmp5 = 1053;
      break;
    case "Ocy":
      Tmp5 = 1054;
      break;
    case "Pcy":
      Tmp5 = 1055;
      break;
    case "Rcy":
      Tmp5 = 1056;
      break;
    case "Scy":
      Tmp5 = 1057;
      break;
    case "Tcy":
      Tmp5 = 1058;
      break;
    case "Ucy":
      Tmp5 = 1059;
      break;
    case "Fcy":
      Tmp5 = 1060;
      break;
    case "KHcy":
      Tmp5 = 1061;
      break;
    case "TScy":
      Tmp5 = 1062;
      break;
    case "CHcy":
      Tmp5 = 1063;
      break;
    case "SHcy":
      Tmp5 = 1064;
      break;
    case "SHCHcy":
      Tmp5 = 1065;
      break;
    case "HARDcy":
      Tmp5 = 1066;
      break;
    case "Ycy":
      Tmp5 = 1067;
      break;
    case "SOFTcy":
      Tmp5 = 1068;
      break;
    case "Ecy":
      Tmp5 = 1069;
      break;
    case "YUcy":
      Tmp5 = 1070;
      break;
    case "YAcy":
      Tmp5 = 1071;
      break;
    case "acy":
      Tmp5 = 1072;
      break;
    case "bcy":
      Tmp5 = 1073;
      break;
    case "vcy":
      Tmp5 = 1074;
      break;
    case "gcy":
      Tmp5 = 1075;
      break;
    case "dcy":
      Tmp5 = 1076;
      break;
    case "iecy":
      Tmp5 = 1077;
      break;
    case "zhcy":
      Tmp5 = 1078;
      break;
    case "zcy":
      Tmp5 = 1079;
      break;
    case "icy":
      Tmp5 = 1080;
      break;
    case "jcy":
      Tmp5 = 1081;
      break;
    case "kcy":
      Tmp5 = 1082;
      break;
    case "lcy":
      Tmp5 = 1083;
      break;
    case "mcy":
      Tmp5 = 1084;
      break;
    case "ncy":
      Tmp5 = 1085;
      break;
    case "ocy":
      Tmp5 = 1086;
      break;
    case "pcy":
      Tmp5 = 1087;
      break;
    case "rcy":
      Tmp5 = 1088;
      break;
    case "scy":
      Tmp5 = 1089;
      break;
    case "tcy":
      Tmp5 = 1090;
      break;
    case "ucy":
      Tmp5 = 1091;
      break;
    case "fcy":
      Tmp5 = 1092;
      break;
    case "khcy":
      Tmp5 = 1093;
      break;
    case "tscy":
      Tmp5 = 1094;
      break;
    case "chcy":
      Tmp5 = 1095;
      break;
    case "shcy":
      Tmp5 = 1096;
      break;
    case "shchcy":
      Tmp5 = 1097;
      break;
    case "hardcy":
      Tmp5 = 1098;
      break;
    case "ycy":
      Tmp5 = 1099;
      break;
    case "softcy":
      Tmp5 = 1100;
      break;
    case "ecy":
      Tmp5 = 1101;
      break;
    case "yucy":
      Tmp5 = 1102;
      break;
    case "yacy":
      Tmp5 = 1103;
      break;
    case "iocy":
      Tmp5 = 1105;
      break;
    case "djcy":
      Tmp5 = 1106;
      break;
    case "gjcy":
      Tmp5 = 1107;
      break;
    case "jukcy":
      Tmp5 = 1108;
      break;
    case "dscy":
      Tmp5 = 1109;
      break;
    case "iukcy":
      Tmp5 = 1110;
      break;
    case "yicy":
      Tmp5 = 1111;
      break;
    case "jsercy":
      Tmp5 = 1112;
      break;
    case "ljcy":
      Tmp5 = 1113;
      break;
    case "njcy":
      Tmp5 = 1114;
      break;
    case "tshcy":
      Tmp5 = 1115;
      break;
    case "kjcy":
      Tmp5 = 1116;
      break;
    case "ubrcy":
      Tmp5 = 1118;
      break;
    case "dzcy":
      Tmp5 = 1119;
      break;
    case "ensp":
      Tmp5 = 8194;
      break;
    case "emsp":
      Tmp5 = 8195;
      break;
    case "emsp13":
      Tmp5 = 8196;
      break;
    case "emsp14":
      Tmp5 = 8197;
      break;
    case "numsp":
      Tmp5 = 8199;
      break;
    case "puncsp":
      Tmp5 = 8200;
      break;
    case "thinsp":
    case "ThinSpace":
      Tmp5 = 8201;
      break;
    case "hairsp":
    case "VeryThinSpace":
      Tmp5 = 8202;
      break;
    case "ZeroWidthSpace":
    case "NegativeVeryThinSpace":
    case "NegativeThinSpace":
    case "NegativeMediumSpace":
    case "NegativeThickSpace":
      Tmp5 = 8203;
      break;
    case "zwnj":
      Tmp5 = 8204;
      break;
    case "zwj":
      Tmp5 = 8205;
      break;
    case "lrm":
      Tmp5 = 8206;
      break;
    case "rlm":
      Tmp5 = 8207;
      break;
    case "hyphen":
    case "dash":
      Tmp5 = 8208;
      break;
    case "ndash":
      Tmp5 = 8211;
      break;
    case "mdash":
      Tmp5 = 8212;
      break;
    case "horbar":
      Tmp5 = 8213;
      break;
    case "Verbar":
    case "Vert":
      Tmp5 = 8214;
      break;
    case "lsquo":
    case "OpenCurlyQuote":
      Tmp5 = 8216;
      break;
    case "rsquo":
    case "rsquor":
    case "CloseCurlyQuote":
      Tmp5 = 8217;
      break;
    case "lsquor":
    case "sbquo":
      Tmp5 = 8218;
      break;
    case "ldquo":
    case "OpenCurlyDoubleQuote":
      Tmp5 = 8220;
      break;
    case "rdquo":
    case "rdquor":
    case "CloseCurlyDoubleQuote":
      Tmp5 = 8221;
      break;
    case "ldquor":
    case "bdquo":
      Tmp5 = 8222;
      break;
    case "dagger":
      Tmp5 = 8224;
      break;
    case "Dagger":
    case "ddagger":
      Tmp5 = 8225;
      break;
    case "bull":
    case "bullet":
      Tmp5 = 8226;
      break;
    case "nldr":
      Tmp5 = 8229;
      break;
    case "hellip":
    case "mldr":
      Tmp5 = 8230;
      break;
    case "permil":
      Tmp5 = 8240;
      break;
    case "pertenk":
      Tmp5 = 8241;
      break;
    case "prime":
      Tmp5 = 8242;
      break;
    case "Prime":
      Tmp5 = 8243;
      break;
    case "tprime":
      Tmp5 = 8244;
      break;
    case "bprime":
    case "backprime":
      Tmp5 = 8245;
      break;
    case "lsaquo":
      Tmp5 = 8249;
      break;
    case "rsaquo":
      Tmp5 = 8250;
      break;
    case "oline":
      Tmp5 = 8254;
      break;
    case "caret":
      Tmp5 = 8257;
      break;
    case "hybull":
      Tmp5 = 8259;
      break;
    case "frasl":
      Tmp5 = 8260;
      break;
    case "bsemi":
      Tmp5 = 8271;
      break;
    case "qprime":
      Tmp5 = 8279;
      break;
    case "MediumSpace":
      Tmp5 = 8287;
      break;
    case "NoBreak":
      Tmp5 = 8288;
      break;
    case "ApplyFunction":
    case "af":
      Tmp5 = 8289;
      break;
    case "InvisibleTimes":
    case "it":
      Tmp5 = 8290;
      break;
    case "InvisibleComma":
    case "ic":
      Tmp5 = 8291;
      break;
    case "euro":
      Tmp5 = 8364;
      break;
    case "tdot":
    case "TripleDot":
      Tmp5 = 8411;
      break;
    case "DotDot":
      Tmp5 = 8412;
      break;
    case "Copf":
    case "complexes":
      Tmp5 = 8450;
      break;
    case "incare":
      Tmp5 = 8453;
      break;
    case "gscr":
      Tmp5 = 8458;
      break;
    case "hamilt":
    case "HilbertSpace":
    case "Hscr":
      Tmp5 = 8459;
      break;
    case "Hfr":
    case "Poincareplane":
      Tmp5 = 8460;
      break;
    case "quaternions":
    case "Hopf":
      Tmp5 = 8461;
      break;
    case "planckh":
      Tmp5 = 8462;
      break;
    case "planck":
    case "hbar":
    case "plankv":
    case "hslash":
      Tmp5 = 8463;
      break;
    case "Iscr":
    case "imagline":
      Tmp5 = 8464;
      break;
    case "image":
    case "Im":
    case "imagpart":
    case "Ifr":
      Tmp5 = 8465;
      break;
    case "Lscr":
    case "lagran":
    case "Laplacetrf":
      Tmp5 = 8466;
      break;
    case "ell":
      Tmp5 = 8467;
      break;
    case "Nopf":
    case "naturals":
      Tmp5 = 8469;
      break;
    case "numero":
      Tmp5 = 8470;
      break;
    case "copysr":
      Tmp5 = 8471;
      break;
    case "weierp":
    case "wp":
      Tmp5 = 8472;
      break;
    case "Popf":
    case "primes":
      Tmp5 = 8473;
      break;
    case "rationals":
    case "Qopf":
      Tmp5 = 8474;
      break;
    case "Rscr":
    case "realine":
      Tmp5 = 8475;
      break;
    case "real":
    case "Re":
    case "realpart":
    case "Rfr":
      Tmp5 = 8476;
      break;
    case "reals":
    case "Ropf":
      Tmp5 = 8477;
      break;
    case "rx":
      Tmp5 = 8478;
      break;
    case "trade":
    case "TRADE":
      Tmp5 = 8482;
      break;
    case "integers":
    case "Zopf":
      Tmp5 = 8484;
      break;
    case "ohm":
      Tmp5 = 8486;
      break;
    case "mho":
      Tmp5 = 8487;
      break;
    case "Zfr":
    case "zeetrf":
      Tmp5 = 8488;
      break;
    case "iiota":
      Tmp5 = 8489;
      break;
    case "angst":
      Tmp5 = 8491;
      break;
    case "bernou":
    case "Bernoullis":
    case "Bscr":
      Tmp5 = 8492;
      break;
    case "Cfr":
    case "Cayleys":
      Tmp5 = 8493;
      break;
    case "escr":
      Tmp5 = 8495;
      break;
    case "Escr":
    case "expectation":
      Tmp5 = 8496;
      break;
    case "Fscr":
    case "Fouriertrf":
      Tmp5 = 8497;
      break;
    case "phmmat":
    case "Mellintrf":
    case "Mscr":
      Tmp5 = 8499;
      break;
    case "order":
    case "orderof":
    case "oscr":
      Tmp5 = 8500;
      break;
    case "alefsym":
    case "aleph":
      Tmp5 = 8501;
      break;
    case "beth":
      Tmp5 = 8502;
      break;
    case "gimel":
      Tmp5 = 8503;
      break;
    case "daleth":
      Tmp5 = 8504;
      break;
    case "CapitalDifferentialD":
    case "DD":
      Tmp5 = 8517;
      break;
    case "DifferentialD":
    case "dd":
      Tmp5 = 8518;
      break;
    case "ExponentialE":
    case "exponentiale":
    case "ee":
      Tmp5 = 8519;
      break;
    case "ImaginaryI":
    case "ii":
      Tmp5 = 8520;
      break;
    case "frac13":
      Tmp5 = 8531;
      break;
    case "frac23":
      Tmp5 = 8532;
      break;
    case "frac15":
      Tmp5 = 8533;
      break;
    case "frac25":
      Tmp5 = 8534;
      break;
    case "frac35":
      Tmp5 = 8535;
      break;
    case "frac45":
      Tmp5 = 8536;
      break;
    case "frac16":
      Tmp5 = 8537;
      break;
    case "frac56":
      Tmp5 = 8538;
      break;
    case "frac18":
      Tmp5 = 8539;
      break;
    case "frac38":
      Tmp5 = 8540;
      break;
    case "frac58":
      Tmp5 = 8541;
      break;
    case "frac78":
      Tmp5 = 8542;
      break;
    case "larr":
    case "leftarrow":
    case "LeftArrow":
    case "slarr":
    case "ShortLeftArrow":
      Tmp5 = 8592;
      break;
    case "uarr":
    case "uparrow":
    case "UpArrow":
    case "ShortUpArrow":
      Tmp5 = 8593;
      break;
    case "rarr":
    case "rightarrow":
    case "RightArrow":
    case "srarr":
    case "ShortRightArrow":
      Tmp5 = 8594;
      break;
    case "darr":
    case "downarrow":
    case "DownArrow":
    case "ShortDownArrow":
      Tmp5 = 8595;
      break;
    case "harr":
    case "leftrightarrow":
    case "LeftRightArrow":
      Tmp5 = 8596;
      break;
    case "varr":
    case "updownarrow":
    case "UpDownArrow":
      Tmp5 = 8597;
      break;
    case "nwarr":
    case "UpperLeftArrow":
    case "nwarrow":
      Tmp5 = 8598;
      break;
    case "nearr":
    case "UpperRightArrow":
    case "nearrow":
      Tmp5 = 8599;
      break;
    case "searr":
    case "searrow":
    case "LowerRightArrow":
      Tmp5 = 8600;
      break;
    case "swarr":
    case "swarrow":
    case "LowerLeftArrow":
      Tmp5 = 8601;
      break;
    case "nlarr":
    case "nleftarrow":
      Tmp5 = 8602;
      break;
    case "nrarr":
    case "nrightarrow":
      Tmp5 = 8603;
      break;
    case "rarrw":
    case "rightsquigarrow":
      Tmp5 = 8605;
      break;
    case "Larr":
    case "twoheadleftarrow":
      Tmp5 = 8606;
      break;
    case "Uarr":
      Tmp5 = 8607;
      break;
    case "Rarr":
    case "twoheadrightarrow":
      Tmp5 = 8608;
      break;
    case "Darr":
      Tmp5 = 8609;
      break;
    case "larrtl":
    case "leftarrowtail":
      Tmp5 = 8610;
      break;
    case "rarrtl":
    case "rightarrowtail":
      Tmp5 = 8611;
      break;
    case "LeftTeeArrow":
    case "mapstoleft":
      Tmp5 = 8612;
      break;
    case "UpTeeArrow":
    case "mapstoup":
      Tmp5 = 8613;
      break;
    case "map":
    case "RightTeeArrow":
    case "mapsto":
      Tmp5 = 8614;
      break;
    case "DownTeeArrow":
    case "mapstodown":
      Tmp5 = 8615;
      break;
    case "larrhk":
    case "hookleftarrow":
      Tmp5 = 8617;
      break;
    case "rarrhk":
    case "hookrightarrow":
      Tmp5 = 8618;
      break;
    case "larrlp":
    case "looparrowleft":
      Tmp5 = 8619;
      break;
    case "rarrlp":
    case "looparrowright":
      Tmp5 = 8620;
      break;
    case "harrw":
    case "leftrightsquigarrow":
      Tmp5 = 8621;
      break;
    case "nharr":
    case "nleftrightarrow":
      Tmp5 = 8622;
      break;
    case "lsh":
    case "Lsh":
      Tmp5 = 8624;
      break;
    case "rsh":
    case "Rsh":
      Tmp5 = 8625;
      break;
    case "ldsh":
      Tmp5 = 8626;
      break;
    case "rdsh":
      Tmp5 = 8627;
      break;
    case "crarr":
      Tmp5 = 8629;
      break;
    case "cularr":
    case "curvearrowleft":
      Tmp5 = 8630;
      break;
    case "curarr":
    case "curvearrowright":
      Tmp5 = 8631;
      break;
    case "olarr":
    case "circlearrowleft":
      Tmp5 = 8634;
      break;
    case "orarr":
    case "circlearrowright":
      Tmp5 = 8635;
      break;
    case "lharu":
    case "LeftVector":
    case "leftharpoonup":
      Tmp5 = 8636;
      break;
    case "lhard":
    case "leftharpoondown":
    case "DownLeftVector":
      Tmp5 = 8637;
      break;
    case "uharr":
    case "upharpoonright":
    case "RightUpVector":
      Tmp5 = 8638;
      break;
    case "uharl":
    case "upharpoonleft":
    case "LeftUpVector":
      Tmp5 = 8639;
      break;
    case "rharu":
    case "RightVector":
    case "rightharpoonup":
      Tmp5 = 8640;
      break;
    case "rhard":
    case "rightharpoondown":
    case "DownRightVector":
      Tmp5 = 8641;
      break;
    case "dharr":
    case "RightDownVector":
    case "downharpoonright":
      Tmp5 = 8642;
      break;
    case "dharl":
    case "LeftDownVector":
    case "downharpoonleft":
      Tmp5 = 8643;
      break;
    case "rlarr":
    case "rightleftarrows":
    case "RightArrowLeftArrow":
      Tmp5 = 8644;
      break;
    case "udarr":
    case "UpArrowDownArrow":
      Tmp5 = 8645;
      break;
    case "lrarr":
    case "leftrightarrows":
    case "LeftArrowRightArrow":
      Tmp5 = 8646;
      break;
    case "llarr":
    case "leftleftarrows":
      Tmp5 = 8647;
      break;
    case "uuarr":
    case "upuparrows":
      Tmp5 = 8648;
      break;
    case "rrarr":
    case "rightrightarrows":
      Tmp5 = 8649;
      break;
    case "ddarr":
    case "downdownarrows":
      Tmp5 = 8650;
      break;
    case "lrhar":
    case "ReverseEquilibrium":
    case "leftrightharpoons":
      Tmp5 = 8651;
      break;
    case "rlhar":
    case "rightleftharpoons":
    case "Equilibrium":
      Tmp5 = 8652;
      break;
    case "nlArr":
    case "nLeftarrow":
      Tmp5 = 8653;
      break;
    case "nhArr":
    case "nLeftrightarrow":
      Tmp5 = 8654;
      break;
    case "nrArr":
    case "nRightarrow":
      Tmp5 = 8655;
      break;
    case "lArr":
    case "Leftarrow":
    case "DoubleLeftArrow":
      Tmp5 = 8656;
      break;
    case "uArr":
    case "Uparrow":
    case "DoubleUpArrow":
      Tmp5 = 8657;
      break;
    case "rArr":
    case "Rightarrow":
    case "Implies":
    case "DoubleRightArrow":
      Tmp5 = 8658;
      break;
    case "dArr":
    case "Downarrow":
    case "DoubleDownArrow":
      Tmp5 = 8659;
      break;
    case "hArr":
    case "Leftrightarrow":
    case "DoubleLeftRightArrow":
    case "iff":
      Tmp5 = 8660;
      break;
    case "vArr":
    case "Updownarrow":
    case "DoubleUpDownArrow":
      Tmp5 = 8661;
      break;
    case "nwArr":
      Tmp5 = 8662;
      break;
    case "neArr":
      Tmp5 = 8663;
      break;
    case "seArr":
      Tmp5 = 8664;
      break;
    case "swArr":
      Tmp5 = 8665;
      break;
    case "lAarr":
    case "Lleftarrow":
      Tmp5 = 8666;
      break;
    case "rAarr":
    case "Rrightarrow":
      Tmp5 = 8667;
      break;
    case "zigrarr":
      Tmp5 = 8669;
      break;
    case "larrb":
    case "LeftArrowBar":
      Tmp5 = 8676;
      break;
    case "rarrb":
    case "RightArrowBar":
      Tmp5 = 8677;
      break;
    case "duarr":
    case "DownArrowUpArrow":
      Tmp5 = 8693;
      break;
    case "loarr":
      Tmp5 = 8701;
      break;
    case "roarr":
      Tmp5 = 8702;
      break;
    case "hoarr":
      Tmp5 = 8703;
      break;
    case "forall":
    case "ForAll":
      Tmp5 = 8704;
      break;
    case "comp":
    case "complement":
      Tmp5 = 8705;
      break;
    case "part":
    case "PartialD":
      Tmp5 = 8706;
      break;
    case "exist":
    case "Exists":
      Tmp5 = 8707;
      break;
    case "nexist":
    case "NotExists":
    case "nexists":
      Tmp5 = 8708;
      break;
    case "empty":
    case "emptyset":
    case "emptyv":
    case "varnothing":
      Tmp5 = 8709;
      break;
    case "nabla":
    case "Del":
      Tmp5 = 8711;
      break;
    case "isin":
    case "isinv":
    case "Element":
    case "in":
      Tmp5 = 8712;
      break;
    case "notin":
    case "NotElement":
    case "notinva":
      Tmp5 = 8713;
      break;
    case "niv":
    case "ReverseElement":
    case "ni":
    case "SuchThat":
      Tmp5 = 8715;
      break;
    case "notni":
    case "notniva":
    case "NotReverseElement":
      Tmp5 = 8716;
      break;
    case "prod":
    case "Product":
      Tmp5 = 8719;
      break;
    case "coprod":
    case "Coproduct":
      Tmp5 = 8720;
      break;
    case "sum":
    case "Sum":
      Tmp5 = 8721;
      break;
    case "minus":
      Tmp5 = 8722;
      break;
    case "mnplus":
    case "mp":
    case "MinusPlus":
      Tmp5 = 8723;
      break;
    case "plusdo":
    case "dotplus":
      Tmp5 = 8724;
      break;
    case "setmn":
    case "setminus":
    case "Backslash":
    case "ssetmn":
    case "smallsetminus":
      Tmp5 = 8726;
      break;
    case "lowast":
      Tmp5 = 8727;
      break;
    case "compfn":
    case "SmallCircle":
      Tmp5 = 8728;
      break;
    case "radic":
    case "Sqrt":
      Tmp5 = 8730;
      break;
    case "prop":
    case "propto":
    case "Proportional":
    case "vprop":
    case "varpropto":
      Tmp5 = 8733;
      break;
    case "infin":
      Tmp5 = 8734;
      break;
    case "angrt":
      Tmp5 = 8735;
      break;
    case "ang":
    case "angle":
      Tmp5 = 8736;
      break;
    case "angmsd":
    case "measuredangle":
      Tmp5 = 8737;
      break;
    case "angsph":
      Tmp5 = 8738;
      break;
    case "mid":
    case "VerticalBar":
    case "smid":
    case "shortmid":
      Tmp5 = 8739;
      break;
    case "nmid":
    case "NotVerticalBar":
    case "nsmid":
    case "nshortmid":
      Tmp5 = 8740;
      break;
    case "par":
    case "parallel":
    case "DoubleVerticalBar":
    case "spar":
    case "shortparallel":
      Tmp5 = 8741;
      break;
    case "npar":
    case "nparallel":
    case "NotDoubleVerticalBar":
    case "nspar":
    case "nshortparallel":
      Tmp5 = 8742;
      break;
    case "and":
    case "wedge":
      Tmp5 = 8743;
      break;
    case "or":
    case "vee":
      Tmp5 = 8744;
      break;
    case "cap":
      Tmp5 = 8745;
      break;
    case "cup":
      Tmp5 = 8746;
      break;
    case "int":
    case "Integral":
      Tmp5 = 8747;
      break;
    case "Int":
      Tmp5 = 8748;
      break;
    case "tint":
    case "iiint":
      Tmp5 = 8749;
      break;
    case "conint":
    case "oint":
    case "ContourIntegral":
      Tmp5 = 8750;
      break;
    case "Conint":
    case "DoubleContourIntegral":
      Tmp5 = 8751;
      break;
    case "Cconint":
      Tmp5 = 8752;
      break;
    case "cwint":
      Tmp5 = 8753;
      break;
    case "cwconint":
    case "ClockwiseContourIntegral":
      Tmp5 = 8754;
      break;
    case "awconint":
    case "CounterClockwiseContourIntegral":
      Tmp5 = 8755;
      break;
    case "there4":
    case "therefore":
    case "Therefore":
      Tmp5 = 8756;
      break;
    case "becaus":
    case "because":
    case "Because":
      Tmp5 = 8757;
      break;
    case "ratio":
      Tmp5 = 8758;
      break;
    case "Colon":
    case "Proportion":
      Tmp5 = 8759;
      break;
    case "minusd":
    case "dotminus":
      Tmp5 = 8760;
      break;
    case "mDDot":
      Tmp5 = 8762;
      break;
    case "homtht":
      Tmp5 = 8763;
      break;
    case "sim":
    case "Tilde":
    case "thksim":
    case "thicksim":
      Tmp5 = 8764;
      break;
    case "bsim":
    case "backsim":
      Tmp5 = 8765;
      break;
    case "ac":
    case "mstpos":
      Tmp5 = 8766;
      break;
    case "acd":
      Tmp5 = 8767;
      break;
    case "wreath":
    case "VerticalTilde":
    case "wr":
      Tmp5 = 8768;
      break;
    case "nsim":
    case "NotTilde":
      Tmp5 = 8769;
      break;
    case "esim":
    case "EqualTilde":
    case "eqsim":
      Tmp5 = 8770;
      break;
    case "sime":
    case "TildeEqual":
    case "simeq":
      Tmp5 = 8771;
      break;
    case "nsime":
    case "nsimeq":
    case "NotTildeEqual":
      Tmp5 = 8772;
      break;
    case "cong":
    case "TildeFullEqual":
      Tmp5 = 8773;
      break;
    case "simne":
      Tmp5 = 8774;
      break;
    case "ncong":
    case "NotTildeFullEqual":
      Tmp5 = 8775;
      break;
    case "asymp":
    case "ap":
    case "TildeTilde":
    case "approx":
    case "thkap":
    case "thickapprox":
      Tmp5 = 8776;
      break;
    case "nap":
    case "NotTildeTilde":
    case "napprox":
      Tmp5 = 8777;
      break;
    case "ape":
    case "approxeq":
      Tmp5 = 8778;
      break;
    case "apid":
      Tmp5 = 8779;
      break;
    case "bcong":
    case "backcong":
      Tmp5 = 8780;
      break;
    case "asympeq":
    case "CupCap":
      Tmp5 = 8781;
      break;
    case "bump":
    case "HumpDownHump":
    case "Bumpeq":
      Tmp5 = 8782;
      break;
    case "bumpe":
    case "HumpEqual":
    case "bumpeq":
      Tmp5 = 8783;
      break;
    case "esdot":
    case "DotEqual":
    case "doteq":
      Tmp5 = 8784;
      break;
    case "eDot":
    case "doteqdot":
      Tmp5 = 8785;
      break;
    case "efDot":
    case "fallingdotseq":
      Tmp5 = 8786;
      break;
    case "erDot":
    case "risingdotseq":
      Tmp5 = 8787;
      break;
    case "colone":
    case "coloneq":
    case "Assign":
      Tmp5 = 8788;
      break;
    case "ecolon":
    case "eqcolon":
      Tmp5 = 8789;
      break;
    case "ecir":
    case "eqcirc":
      Tmp5 = 8790;
      break;
    case "cire":
    case "circeq":
      Tmp5 = 8791;
      break;
    case "wedgeq":
      Tmp5 = 8793;
      break;
    case "veeeq":
      Tmp5 = 8794;
      break;
    case "trie":
    case "triangleq":
      Tmp5 = 8796;
      break;
    case "equest":
    case "questeq":
      Tmp5 = 8799;
      break;
    case "ne":
    case "NotEqual":
      Tmp5 = 8800;
      break;
    case "equiv":
    case "Congruent":
      Tmp5 = 8801;
      break;
    case "nequiv":
    case "NotCongruent":
      Tmp5 = 8802;
      break;
    case "le":
    case "leq":
      Tmp5 = 8804;
      break;
    case "ge":
    case "GreaterEqual":
    case "geq":
      Tmp5 = 8805;
      break;
    case "lE":
    case "LessFullEqual":
    case "leqq":
      Tmp5 = 8806;
      break;
    case "gE":
    case "GreaterFullEqual":
    case "geqq":
      Tmp5 = 8807;
      break;
    case "lnE":
    case "lneqq":
      Tmp5 = 8808;
      break;
    case "gnE":
    case "gneqq":
      Tmp5 = 8809;
      break;
    case "Lt":
    case "NestedLessLess":
    case "ll":
      Tmp5 = 8810;
      break;
    case "Gt":
    case "NestedGreaterGreater":
    case "gg":
      Tmp5 = 8811;
      break;
    case "twixt":
    case "between":
      Tmp5 = 8812;
      break;
    case "NotCupCap":
      Tmp5 = 8813;
      break;
    case "nlt":
    case "NotLess":
    case "nless":
      Tmp5 = 8814;
      break;
    case "ngt":
    case "NotGreater":
    case "ngtr":
      Tmp5 = 8815;
      break;
    case "nle":
    case "NotLessEqual":
    case "nleq":
      Tmp5 = 8816;
      break;
    case "nge":
    case "NotGreaterEqual":
    case "ngeq":
      Tmp5 = 8817;
      break;
    case "lsim":
    case "LessTilde":
    case "lesssim":
      Tmp5 = 8818;
      break;
    case "gsim":
    case "gtrsim":
    case "GreaterTilde":
      Tmp5 = 8819;
      break;
    case "nlsim":
    case "NotLessTilde":
      Tmp5 = 8820;
      break;
    case "ngsim":
    case "NotGreaterTilde":
      Tmp5 = 8821;
      break;
    case "lg":
    case "lessgtr":
    case "LessGreater":
      Tmp5 = 8822;
      break;
    case "gl":
    case "gtrless":
    case "GreaterLess":
      Tmp5 = 8823;
      break;
    case "ntlg":
    case "NotLessGreater":
      Tmp5 = 8824;
      break;
    case "ntgl":
    case "NotGreaterLess":
      Tmp5 = 8825;
      break;
    case "pr":
    case "Precedes":
    case "prec":
      Tmp5 = 8826;
      break;
    case "sc":
    case "Succeeds":
    case "succ":
      Tmp5 = 8827;
      break;
    case "prcue":
    case "PrecedesSlantEqual":
    case "preccurlyeq":
      Tmp5 = 8828;
      break;
    case "sccue":
    case "SucceedsSlantEqual":
    case "succcurlyeq":
      Tmp5 = 8829;
      break;
    case "prsim":
    case "precsim":
    case "PrecedesTilde":
      Tmp5 = 8830;
      break;
    case "scsim":
    case "succsim":
    case "SucceedsTilde":
      Tmp5 = 8831;
      break;
    case "npr":
    case "nprec":
    case "NotPrecedes":
      Tmp5 = 8832;
      break;
    case "nsc":
    case "nsucc":
    case "NotSucceeds":
      Tmp5 = 8833;
      break;
    case "sub":
    case "subset":
      Tmp5 = 8834;
      break;
    case "sup":
    case "supset":
    case "Superset":
      Tmp5 = 8835;
      break;
    case "nsub":
      Tmp5 = 8836;
      break;
    case "nsup":
      Tmp5 = 8837;
      break;
    case "sube":
    case "SubsetEqual":
    case "subseteq":
      Tmp5 = 8838;
      break;
    case "supe":
    case "supseteq":
    case "SupersetEqual":
      Tmp5 = 8839;
      break;
    case "nsube":
    case "nsubseteq":
    case "NotSubsetEqual":
      Tmp5 = 8840;
      break;
    case "nsupe":
    case "nsupseteq":
    case "NotSupersetEqual":
      Tmp5 = 8841;
      break;
    case "subne":
    case "subsetneq":
      Tmp5 = 8842;
      break;
    case "supne":
    case "supsetneq":
      Tmp5 = 8843;
      break;
    case "cupdot":
      Tmp5 = 8845;
      break;
    case "uplus":
    case "UnionPlus":
      Tmp5 = 8846;
      break;
    case "sqsub":
    case "SquareSubset":
    case "sqsubset":
      Tmp5 = 8847;
      break;
    case "sqsup":
    case "SquareSuperset":
    case "sqsupset":
      Tmp5 = 8848;
      break;
    case "sqsube":
    case "SquareSubsetEqual":
    case "sqsubseteq":
      Tmp5 = 8849;
      break;
    case "sqsupe":
    case "SquareSupersetEqual":
    case "sqsupseteq":
      Tmp5 = 8850;
      break;
    case "sqcap":
    case "SquareIntersection":
      Tmp5 = 8851;
      break;
    case "sqcup":
    case "SquareUnion":
      Tmp5 = 8852;
      break;
    case "oplus":
    case "CirclePlus":
      Tmp5 = 8853;
      break;
    case "ominus":
    case "CircleMinus":
      Tmp5 = 8854;
      break;
    case "otimes":
    case "CircleTimes":
      Tmp5 = 8855;
      break;
    case "osol":
      Tmp5 = 8856;
      break;
    case "odot":
    case "CircleDot":
      Tmp5 = 8857;
      break;
    case "ocir":
    case "circledcirc":
      Tmp5 = 8858;
      break;
    case "oast":
    case "circledast":
      Tmp5 = 8859;
      break;
    case "odash":
    case "circleddash":
      Tmp5 = 8861;
      break;
    case "plusb":
    case "boxplus":
      Tmp5 = 8862;
      break;
    case "minusb":
    case "boxminus":
      Tmp5 = 8863;
      break;
    case "timesb":
    case "boxtimes":
      Tmp5 = 8864;
      break;
    case "sdotb":
    case "dotsquare":
      Tmp5 = 8865;
      break;
    case "vdash":
    case "RightTee":
      Tmp5 = 8866;
      break;
    case "dashv":
    case "LeftTee":
      Tmp5 = 8867;
      break;
    case "top":
    case "DownTee":
      Tmp5 = 8868;
      break;
    case "bottom":
    case "bot":
    case "perp":
    case "UpTee":
      Tmp5 = 8869;
      break;
    case "models":
      Tmp5 = 8871;
      break;
    case "vDash":
    case "DoubleRightTee":
      Tmp5 = 8872;
      break;
    case "Vdash":
      Tmp5 = 8873;
      break;
    case "Vvdash":
      Tmp5 = 8874;
      break;
    case "VDash":
      Tmp5 = 8875;
      break;
    case "nvdash":
      Tmp5 = 8876;
      break;
    case "nvDash":
      Tmp5 = 8877;
      break;
    case "nVdash":
      Tmp5 = 8878;
      break;
    case "nVDash":
      Tmp5 = 8879;
      break;
    case "prurel":
      Tmp5 = 8880;
      break;
    case "vltri":
    case "vartriangleleft":
    case "LeftTriangle":
      Tmp5 = 8882;
      break;
    case "vrtri":
    case "vartriangleright":
    case "RightTriangle":
      Tmp5 = 8883;
      break;
    case "ltrie":
    case "trianglelefteq":
    case "LeftTriangleEqual":
      Tmp5 = 8884;
      break;
    case "rtrie":
    case "trianglerighteq":
    case "RightTriangleEqual":
      Tmp5 = 8885;
      break;
    case "origof":
      Tmp5 = 8886;
      break;
    case "imof":
      Tmp5 = 8887;
      break;
    case "mumap":
    case "multimap":
      Tmp5 = 8888;
      break;
    case "hercon":
      Tmp5 = 8889;
      break;
    case "intcal":
    case "intercal":
      Tmp5 = 8890;
      break;
    case "veebar":
      Tmp5 = 8891;
      break;
    case "barvee":
      Tmp5 = 8893;
      break;
    case "angrtvb":
      Tmp5 = 8894;
      break;
    case "lrtri":
      Tmp5 = 8895;
      break;
    case "xwedge":
    case "Wedge":
    case "bigwedge":
      Tmp5 = 8896;
      break;
    case "xvee":
    case "Vee":
    case "bigvee":
      Tmp5 = 8897;
      break;
    case "xcap":
    case "Intersection":
    case "bigcap":
      Tmp5 = 8898;
      break;
    case "xcup":
    case "Union":
    case "bigcup":
      Tmp5 = 8899;
      break;
    case "diam":
    case "diamond":
    case "Diamond":
      Tmp5 = 8900;
      break;
    case "sdot":
      Tmp5 = 8901;
      break;
    case "sstarf":
    case "Star":
      Tmp5 = 8902;
      break;
    case "divonx":
    case "divideontimes":
      Tmp5 = 8903;
      break;
    case "bowtie":
      Tmp5 = 8904;
      break;
    case "ltimes":
      Tmp5 = 8905;
      break;
    case "rtimes":
      Tmp5 = 8906;
      break;
    case "lthree":
    case "leftthreetimes":
      Tmp5 = 8907;
      break;
    case "rthree":
    case "rightthreetimes":
      Tmp5 = 8908;
      break;
    case "bsime":
    case "backsimeq":
      Tmp5 = 8909;
      break;
    case "cuvee":
    case "curlyvee":
      Tmp5 = 8910;
      break;
    case "cuwed":
    case "curlywedge":
      Tmp5 = 8911;
      break;
    case "Sub":
    case "Subset":
      Tmp5 = 8912;
      break;
    case "Sup":
    case "Supset":
      Tmp5 = 8913;
      break;
    case "Cap":
      Tmp5 = 8914;
      break;
    case "Cup":
      Tmp5 = 8915;
      break;
    case "fork":
    case "pitchfork":
      Tmp5 = 8916;
      break;
    case "epar":
      Tmp5 = 8917;
      break;
    case "ltdot":
    case "lessdot":
      Tmp5 = 8918;
      break;
    case "gtdot":
    case "gtrdot":
      Tmp5 = 8919;
      break;
    case "Ll":
      Tmp5 = 8920;
      break;
    case "Gg":
    case "ggg":
      Tmp5 = 8921;
      break;
    case "leg":
    case "LessEqualGreater":
    case "lesseqgtr":
      Tmp5 = 8922;
      break;
    case "gel":
    case "gtreqless":
    case "GreaterEqualLess":
      Tmp5 = 8923;
      break;
    case "cuepr":
    case "curlyeqprec":
      Tmp5 = 8926;
      break;
    case "cuesc":
    case "curlyeqsucc":
      Tmp5 = 8927;
      break;
    case "nprcue":
    case "NotPrecedesSlantEqual":
      Tmp5 = 8928;
      break;
    case "nsccue":
    case "NotSucceedsSlantEqual":
      Tmp5 = 8929;
      break;
    case "nsqsube":
    case "NotSquareSubsetEqual":
      Tmp5 = 8930;
      break;
    case "nsqsupe":
    case "NotSquareSupersetEqual":
      Tmp5 = 8931;
      break;
    case "lnsim":
      Tmp5 = 8934;
      break;
    case "gnsim":
      Tmp5 = 8935;
      break;
    case "prnsim":
    case "precnsim":
      Tmp5 = 8936;
      break;
    case "scnsim":
    case "succnsim":
      Tmp5 = 8937;
      break;
    case "nltri":
    case "ntriangleleft":
    case "NotLeftTriangle":
      Tmp5 = 8938;
      break;
    case "nrtri":
    case "ntriangleright":
    case "NotRightTriangle":
      Tmp5 = 8939;
      break;
    case "nltrie":
    case "ntrianglelefteq":
    case "NotLeftTriangleEqual":
      Tmp5 = 8940;
      break;
    case "nrtrie":
    case "ntrianglerighteq":
    case "NotRightTriangleEqual":
      Tmp5 = 8941;
      break;
    case "vellip":
      Tmp5 = 8942;
      break;
    case "ctdot":
      Tmp5 = 8943;
      break;
    case "utdot":
      Tmp5 = 8944;
      break;
    case "dtdot":
      Tmp5 = 8945;
      break;
    case "disin":
      Tmp5 = 8946;
      break;
    case "isinsv":
      Tmp5 = 8947;
      break;
    case "isins":
      Tmp5 = 8948;
      break;
    case "isindot":
      Tmp5 = 8949;
      break;
    case "notinvc":
      Tmp5 = 8950;
      break;
    case "notinvb":
      Tmp5 = 8951;
      break;
    case "isinE":
      Tmp5 = 8953;
      break;
    case "nisd":
      Tmp5 = 8954;
      break;
    case "xnis":
      Tmp5 = 8955;
      break;
    case "nis":
      Tmp5 = 8956;
      break;
    case "notnivc":
      Tmp5 = 8957;
      break;
    case "notnivb":
      Tmp5 = 8958;
      break;
    case "barwed":
    case "barwedge":
      Tmp5 = 8965;
      break;
    case "Barwed":
    case "doublebarwedge":
      Tmp5 = 8966;
      break;
    case "lceil":
    case "LeftCeiling":
      Tmp5 = 8968;
      break;
    case "rceil":
    case "RightCeiling":
      Tmp5 = 8969;
      break;
    case "lfloor":
    case "LeftFloor":
      Tmp5 = 8970;
      break;
    case "rfloor":
    case "RightFloor":
      Tmp5 = 8971;
      break;
    case "drcrop":
      Tmp5 = 8972;
      break;
    case "dlcrop":
      Tmp5 = 8973;
      break;
    case "urcrop":
      Tmp5 = 8974;
      break;
    case "ulcrop":
      Tmp5 = 8975;
      break;
    case "bnot":
      Tmp5 = 8976;
      break;
    case "profline":
      Tmp5 = 8978;
      break;
    case "profsurf":
      Tmp5 = 8979;
      break;
    case "telrec":
      Tmp5 = 8981;
      break;
    case "target":
      Tmp5 = 8982;
      break;
    case "ulcorn":
    case "ulcorner":
      Tmp5 = 8988;
      break;
    case "urcorn":
    case "urcorner":
      Tmp5 = 8989;
      break;
    case "dlcorn":
    case "llcorner":
      Tmp5 = 8990;
      break;
    case "drcorn":
    case "lrcorner":
      Tmp5 = 8991;
      break;
    case "frown":
    case "sfrown":
      Tmp5 = 8994;
      break;
    case "smile":
    case "ssmile":
      Tmp5 = 8995;
      break;
    case "cylcty":
      Tmp5 = 9005;
      break;
    case "profalar":
      Tmp5 = 9006;
      break;
    case "topbot":
      Tmp5 = 9014;
      break;
    case "ovbar":
      Tmp5 = 9021;
      break;
    case "solbar":
      Tmp5 = 9023;
      break;
    case "angzarr":
      Tmp5 = 9084;
      break;
    case "lmoust":
    case "lmoustache":
      Tmp5 = 9136;
      break;
    case "rmoust":
    case "rmoustache":
      Tmp5 = 9137;
      break;
    case "tbrk":
    case "OverBracket":
      Tmp5 = 9140;
      break;
    case "bbrk":
    case "UnderBracket":
      Tmp5 = 9141;
      break;
    case "bbrktbrk":
      Tmp5 = 9142;
      break;
    case "OverParenthesis":
      Tmp5 = 9180;
      break;
    case "UnderParenthesis":
      Tmp5 = 9181;
      break;
    case "OverBrace":
      Tmp5 = 9182;
      break;
    case "UnderBrace":
      Tmp5 = 9183;
      break;
    case "trpezium":
      Tmp5 = 9186;
      break;
    case "elinters":
      Tmp5 = 9191;
      break;
    case "blank":
      Tmp5 = 9251;
      break;
    case "oS":
    case "circledS":
      Tmp5 = 9416;
      break;
    case "boxh":
    case "HorizontalLine":
      Tmp5 = 9472;
      break;
    case "boxv":
      Tmp5 = 9474;
      break;
    case "boxdr":
      Tmp5 = 9484;
      break;
    case "boxdl":
      Tmp5 = 9488;
      break;
    case "boxur":
      Tmp5 = 9492;
      break;
    case "boxul":
      Tmp5 = 9496;
      break;
    case "boxvr":
      Tmp5 = 9500;
      break;
    case "boxvl":
      Tmp5 = 9508;
      break;
    case "boxhd":
      Tmp5 = 9516;
      break;
    case "boxhu":
      Tmp5 = 9524;
      break;
    case "boxvh":
      Tmp5 = 9532;
      break;
    case "boxH":
      Tmp5 = 9552;
      break;
    case "boxV":
      Tmp5 = 9553;
      break;
    case "boxdR":
      Tmp5 = 9554;
      break;
    case "boxDr":
      Tmp5 = 9555;
      break;
    case "boxDR":
      Tmp5 = 9556;
      break;
    case "boxdL":
      Tmp5 = 9557;
      break;
    case "boxDl":
      Tmp5 = 9558;
      break;
    case "boxDL":
      Tmp5 = 9559;
      break;
    case "boxuR":
      Tmp5 = 9560;
      break;
    case "boxUr":
      Tmp5 = 9561;
      break;
    case "boxUR":
      Tmp5 = 9562;
      break;
    case "boxuL":
      Tmp5 = 9563;
      break;
    case "boxUl":
      Tmp5 = 9564;
      break;
    case "boxUL":
      Tmp5 = 9565;
      break;
    case "boxvR":
      Tmp5 = 9566;
      break;
    case "boxVr":
      Tmp5 = 9567;
      break;
    case "boxVR":
      Tmp5 = 9568;
      break;
    case "boxvL":
      Tmp5 = 9569;
      break;
    case "boxVl":
      Tmp5 = 9570;
      break;
    case "boxVL":
      Tmp5 = 9571;
      break;
    case "boxHd":
      Tmp5 = 9572;
      break;
    case "boxhD":
      Tmp5 = 9573;
      break;
    case "boxHD":
      Tmp5 = 9574;
      break;
    case "boxHu":
      Tmp5 = 9575;
      break;
    case "boxhU":
      Tmp5 = 9576;
      break;
    case "boxHU":
      Tmp5 = 9577;
      break;
    case "boxvH":
      Tmp5 = 9578;
      break;
    case "boxVh":
      Tmp5 = 9579;
      break;
    case "boxVH":
      Tmp5 = 9580;
      break;
    case "uhblk":
      Tmp5 = 9600;
      break;
    case "lhblk":
      Tmp5 = 9604;
      break;
    case "block":
      Tmp5 = 9608;
      break;
    case "blk14":
      Tmp5 = 9617;
      break;
    case "blk12":
      Tmp5 = 9618;
      break;
    case "blk34":
      Tmp5 = 9619;
      break;
    case "squ":
    case "square":
    case "Square":
      Tmp5 = 9633;
      break;
    case "squf":
    case "squarf":
    case "blacksquare":
    case "FilledVerySmallSquare":
      Tmp5 = 9642;
      break;
    case "EmptyVerySmallSquare":
      Tmp5 = 9643;
      break;
    case "rect":
      Tmp5 = 9645;
      break;
    case "marker":
      Tmp5 = 9646;
      break;
    case "fltns":
      Tmp5 = 9649;
      break;
    case "xutri":
    case "bigtriangleup":
      Tmp5 = 9651;
      break;
    case "utrif":
    case "blacktriangle":
      Tmp5 = 9652;
      break;
    case "utri":
    case "triangle":
      Tmp5 = 9653;
      break;
    case "rtrif":
    case "blacktriangleright":
      Tmp5 = 9656;
      break;
    case "rtri":
    case "triangleright":
      Tmp5 = 9657;
      break;
    case "xdtri":
    case "bigtriangledown":
      Tmp5 = 9661;
      break;
    case "dtrif":
    case "blacktriangledown":
      Tmp5 = 9662;
      break;
    case "dtri":
    case "triangledown":
      Tmp5 = 9663;
      break;
    case "ltrif":
    case "blacktriangleleft":
      Tmp5 = 9666;
      break;
    case "ltri":
    case "triangleleft":
      Tmp5 = 9667;
      break;
    case "loz":
    case "lozenge":
      Tmp5 = 9674;
      break;
    case "cir":
      Tmp5 = 9675;
      break;
    case "tridot":
      Tmp5 = 9708;
      break;
    case "xcirc":
    case "bigcirc":
      Tmp5 = 9711;
      break;
    case "ultri":
      Tmp5 = 9720;
      break;
    case "urtri":
      Tmp5 = 9721;
      break;
    case "lltri":
      Tmp5 = 9722;
      break;
    case "EmptySmallSquare":
      Tmp5 = 9723;
      break;
    case "FilledSmallSquare":
      Tmp5 = 9724;
      break;
    case "starf":
    case "bigstar":
      Tmp5 = 9733;
      break;
    case "star":
      Tmp5 = 9734;
      break;
    case "phone":
      Tmp5 = 9742;
      break;
    case "female":
      Tmp5 = 9792;
      break;
    case "male":
      Tmp5 = 9794;
      break;
    case "spades":
    case "spadesuit":
      Tmp5 = 9824;
      break;
    case "clubs":
    case "clubsuit":
      Tmp5 = 9827;
      break;
    case "hearts":
    case "heartsuit":
      Tmp5 = 9829;
      break;
    case "diams":
    case "diamondsuit":
      Tmp5 = 9830;
      break;
    case "sung":
      Tmp5 = 9834;
      break;
    case "flat":
      Tmp5 = 9837;
      break;
    case "natur":
    case "natural":
      Tmp5 = 9838;
      break;
    case "sharp":
      Tmp5 = 9839;
      break;
    case "check":
    case "checkmark":
      Tmp5 = 10003;
      break;
    case "cross":
      Tmp5 = 10007;
      break;
    case "malt":
    case "maltese":
      Tmp5 = 10016;
      break;
    case "sext":
      Tmp5 = 10038;
      break;
    case "VerticalSeparator":
      Tmp5 = 10072;
      break;
    case "lbbrk":
      Tmp5 = 10098;
      break;
    case "rbbrk":
      Tmp5 = 10099;
      break;
    case "lobrk":
    case "LeftDoubleBracket":
      Tmp5 = 10214;
      break;
    case "robrk":
    case "RightDoubleBracket":
      Tmp5 = 10215;
      break;
    case "lang":
    case "LeftAngleBracket":
    case "langle":
      Tmp5 = 10216;
      break;
    case "rang":
    case "RightAngleBracket":
    case "rangle":
      Tmp5 = 10217;
      break;
    case "Lang":
      Tmp5 = 10218;
      break;
    case "Rang":
      Tmp5 = 10219;
      break;
    case "loang":
      Tmp5 = 10220;
      break;
    case "roang":
      Tmp5 = 10221;
      break;
    case "xlarr":
    case "longleftarrow":
    case "LongLeftArrow":
      Tmp5 = 10229;
      break;
    case "xrarr":
    case "longrightarrow":
    case "LongRightArrow":
      Tmp5 = 10230;
      break;
    case "xharr":
    case "longleftrightarrow":
    case "LongLeftRightArrow":
      Tmp5 = 10231;
      break;
    case "xlArr":
    case "Longleftarrow":
    case "DoubleLongLeftArrow":
      Tmp5 = 10232;
      break;
    case "xrArr":
    case "Longrightarrow":
    case "DoubleLongRightArrow":
      Tmp5 = 10233;
      break;
    case "xhArr":
    case "Longleftrightarrow":
    case "DoubleLongLeftRightArrow":
      Tmp5 = 10234;
      break;
    case "xmap":
    case "longmapsto":
      Tmp5 = 10236;
      break;
    case "dzigrarr":
      Tmp5 = 10239;
      break;
    case "nvlArr":
      Tmp5 = 10498;
      break;
    case "nvrArr":
      Tmp5 = 10499;
      break;
    case "nvHarr":
      Tmp5 = 10500;
      break;
    case "Map":
      Tmp5 = 10501;
      break;
    case "lbarr":
      Tmp5 = 10508;
      break;
    case "rbarr":
    case "bkarow":
      Tmp5 = 10509;
      break;
    case "lBarr":
      Tmp5 = 10510;
      break;
    case "rBarr":
    case "dbkarow":
      Tmp5 = 10511;
      break;
    case "RBarr":
    case "drbkarow":
      Tmp5 = 10512;
      break;
    case "DDotrahd":
      Tmp5 = 10513;
      break;
    case "UpArrowBar":
      Tmp5 = 10514;
      break;
    case "DownArrowBar":
      Tmp5 = 10515;
      break;
    case "Rarrtl":
      Tmp5 = 10518;
      break;
    case "latail":
      Tmp5 = 10521;
      break;
    case "ratail":
      Tmp5 = 10522;
      break;
    case "lAtail":
      Tmp5 = 10523;
      break;
    case "rAtail":
      Tmp5 = 10524;
      break;
    case "larrfs":
      Tmp5 = 10525;
      break;
    case "rarrfs":
      Tmp5 = 10526;
      break;
    case "larrbfs":
      Tmp5 = 10527;
      break;
    case "rarrbfs":
      Tmp5 = 10528;
      break;
    case "nwarhk":
      Tmp5 = 10531;
      break;
    case "nearhk":
      Tmp5 = 10532;
      break;
    case "searhk":
    case "hksearow":
      Tmp5 = 10533;
      break;
    case "swarhk":
    case "hkswarow":
      Tmp5 = 10534;
      break;
    case "nwnear":
      Tmp5 = 10535;
      break;
    case "nesear":
    case "toea":
      Tmp5 = 10536;
      break;
    case "seswar":
    case "tosa":
      Tmp5 = 10537;
      break;
    case "swnwar":
      Tmp5 = 10538;
      break;
    case "rarrc":
      Tmp5 = 10547;
      break;
    case "cudarrr":
      Tmp5 = 10549;
      break;
    case "ldca":
      Tmp5 = 10550;
      break;
    case "rdca":
      Tmp5 = 10551;
      break;
    case "cudarrl":
      Tmp5 = 10552;
      break;
    case "larrpl":
      Tmp5 = 10553;
      break;
    case "curarrm":
      Tmp5 = 10556;
      break;
    case "cularrp":
      Tmp5 = 10557;
      break;
    case "rarrpl":
      Tmp5 = 10565;
      break;
    case "harrcir":
      Tmp5 = 10568;
      break;
    case "Uarrocir":
      Tmp5 = 10569;
      break;
    case "lurdshar":
      Tmp5 = 10570;
      break;
    case "ldrushar":
      Tmp5 = 10571;
      break;
    case "LeftRightVector":
      Tmp5 = 10574;
      break;
    case "RightUpDownVector":
      Tmp5 = 10575;
      break;
    case "DownLeftRightVector":
      Tmp5 = 10576;
      break;
    case "LeftUpDownVector":
      Tmp5 = 10577;
      break;
    case "LeftVectorBar":
      Tmp5 = 10578;
      break;
    case "RightVectorBar":
      Tmp5 = 10579;
      break;
    case "RightUpVectorBar":
      Tmp5 = 10580;
      break;
    case "RightDownVectorBar":
      Tmp5 = 10581;
      break;
    case "DownLeftVectorBar":
      Tmp5 = 10582;
      break;
    case "DownRightVectorBar":
      Tmp5 = 10583;
      break;
    case "LeftUpVectorBar":
      Tmp5 = 10584;
      break;
    case "LeftDownVectorBar":
      Tmp5 = 10585;
      break;
    case "LeftTeeVector":
      Tmp5 = 10586;
      break;
    case "RightTeeVector":
      Tmp5 = 10587;
      break;
    case "RightUpTeeVector":
      Tmp5 = 10588;
      break;
    case "RightDownTeeVector":
      Tmp5 = 10589;
      break;
    case "DownLeftTeeVector":
      Tmp5 = 10590;
      break;
    case "DownRightTeeVector":
      Tmp5 = 10591;
      break;
    case "LeftUpTeeVector":
      Tmp5 = 10592;
      break;
    case "LeftDownTeeVector":
      Tmp5 = 10593;
      break;
    case "lHar":
      Tmp5 = 10594;
      break;
    case "uHar":
      Tmp5 = 10595;
      break;
    case "rHar":
      Tmp5 = 10596;
      break;
    case "dHar":
      Tmp5 = 10597;
      break;
    case "luruhar":
      Tmp5 = 10598;
      break;
    case "ldrdhar":
      Tmp5 = 10599;
      break;
    case "ruluhar":
      Tmp5 = 10600;
      break;
    case "rdldhar":
      Tmp5 = 10601;
      break;
    case "lharul":
      Tmp5 = 10602;
      break;
    case "llhard":
      Tmp5 = 10603;
      break;
    case "rharul":
      Tmp5 = 10604;
      break;
    case "lrhard":
      Tmp5 = 10605;
      break;
    case "udhar":
    case "UpEquilibrium":
      Tmp5 = 10606;
      break;
    case "duhar":
    case "ReverseUpEquilibrium":
      Tmp5 = 10607;
      break;
    case "RoundImplies":
      Tmp5 = 10608;
      break;
    case "erarr":
      Tmp5 = 10609;
      break;
    case "simrarr":
      Tmp5 = 10610;
      break;
    case "larrsim":
      Tmp5 = 10611;
      break;
    case "rarrsim":
      Tmp5 = 10612;
      break;
    case "rarrap":
      Tmp5 = 10613;
      break;
    case "ltlarr":
      Tmp5 = 10614;
      break;
    case "gtrarr":
      Tmp5 = 10616;
      break;
    case "subrarr":
      Tmp5 = 10617;
      break;
    case "suplarr":
      Tmp5 = 10619;
      break;
    case "lfisht":
      Tmp5 = 10620;
      break;
    case "rfisht":
      Tmp5 = 10621;
      break;
    case "ufisht":
      Tmp5 = 10622;
      break;
    case "dfisht":
      Tmp5 = 10623;
      break;
    case "lopar":
      Tmp5 = 10629;
      break;
    case "ropar":
      Tmp5 = 10630;
      break;
    case "lbrke":
      Tmp5 = 10635;
      break;
    case "rbrke":
      Tmp5 = 10636;
      break;
    case "lbrkslu":
      Tmp5 = 10637;
      break;
    case "rbrksld":
      Tmp5 = 10638;
      break;
    case "lbrksld":
      Tmp5 = 10639;
      break;
    case "rbrkslu":
      Tmp5 = 10640;
      break;
    case "langd":
      Tmp5 = 10641;
      break;
    case "rangd":
      Tmp5 = 10642;
      break;
    case "lparlt":
      Tmp5 = 10643;
      break;
    case "rpargt":
      Tmp5 = 10644;
      break;
    case "gtlPar":
      Tmp5 = 10645;
      break;
    case "ltrPar":
      Tmp5 = 10646;
      break;
    case "vzigzag":
      Tmp5 = 10650;
      break;
    case "vangrt":
      Tmp5 = 10652;
      break;
    case "angrtvbd":
      Tmp5 = 10653;
      break;
    case "ange":
      Tmp5 = 10660;
      break;
    case "range":
      Tmp5 = 10661;
      break;
    case "dwangle":
      Tmp5 = 10662;
      break;
    case "uwangle":
      Tmp5 = 10663;
      break;
    case "angmsdaa":
      Tmp5 = 10664;
      break;
    case "angmsdab":
      Tmp5 = 10665;
      break;
    case "angmsdac":
      Tmp5 = 10666;
      break;
    case "angmsdad":
      Tmp5 = 10667;
      break;
    case "angmsdae":
      Tmp5 = 10668;
      break;
    case "angmsdaf":
      Tmp5 = 10669;
      break;
    case "angmsdag":
      Tmp5 = 10670;
      break;
    case "angmsdah":
      Tmp5 = 10671;
      break;
    case "bemptyv":
      Tmp5 = 10672;
      break;
    case "demptyv":
      Tmp5 = 10673;
      break;
    case "cemptyv":
      Tmp5 = 10674;
      break;
    case "raemptyv":
      Tmp5 = 10675;
      break;
    case "laemptyv":
      Tmp5 = 10676;
      break;
    case "ohbar":
      Tmp5 = 10677;
      break;
    case "omid":
      Tmp5 = 10678;
      break;
    case "opar":
      Tmp5 = 10679;
      break;
    case "operp":
      Tmp5 = 10681;
      break;
    case "olcross":
      Tmp5 = 10683;
      break;
    case "odsold":
      Tmp5 = 10684;
      break;
    case "olcir":
      Tmp5 = 10686;
      break;
    case "ofcir":
      Tmp5 = 10687;
      break;
    case "olt":
      Tmp5 = 10688;
      break;
    case "ogt":
      Tmp5 = 10689;
      break;
    case "cirscir":
      Tmp5 = 10690;
      break;
    case "cirE":
      Tmp5 = 10691;
      break;
    case "solb":
      Tmp5 = 10692;
      break;
    case "bsolb":
      Tmp5 = 10693;
      break;
    case "boxbox":
      Tmp5 = 10697;
      break;
    case "trisb":
      Tmp5 = 10701;
      break;
    case "rtriltri":
      Tmp5 = 10702;
      break;
    case "LeftTriangleBar":
      Tmp5 = 10703;
      break;
    case "RightTriangleBar":
      Tmp5 = 10704;
      break;
    case "race":
      Tmp5 = 10714;
      break;
    case "iinfin":
      Tmp5 = 10716;
      break;
    case "infintie":
      Tmp5 = 10717;
      break;
    case "nvinfin":
      Tmp5 = 10718;
      break;
    case "eparsl":
      Tmp5 = 10723;
      break;
    case "smeparsl":
      Tmp5 = 10724;
      break;
    case "eqvparsl":
      Tmp5 = 10725;
      break;
    case "lozf":
    case "blacklozenge":
      Tmp5 = 10731;
      break;
    case "RuleDelayed":
      Tmp5 = 10740;
      break;
    case "dsol":
      Tmp5 = 10742;
      break;
    case "xodot":
    case "bigodot":
      Tmp5 = 10752;
      break;
    case "xoplus":
    case "bigoplus":
      Tmp5 = 10753;
      break;
    case "xotime":
    case "bigotimes":
      Tmp5 = 10754;
      break;
    case "xuplus":
    case "biguplus":
      Tmp5 = 10756;
      break;
    case "xsqcup":
    case "bigsqcup":
      Tmp5 = 10758;
      break;
    case "qint":
    case "iiiint":
      Tmp5 = 10764;
      break;
    case "fpartint":
      Tmp5 = 10765;
      break;
    case "cirfnint":
      Tmp5 = 10768;
      break;
    case "awint":
      Tmp5 = 10769;
      break;
    case "rppolint":
      Tmp5 = 10770;
      break;
    case "scpolint":
      Tmp5 = 10771;
      break;
    case "npolint":
      Tmp5 = 10772;
      break;
    case "pointint":
      Tmp5 = 10773;
      break;
    case "quatint":
      Tmp5 = 10774;
      break;
    case "intlarhk":
      Tmp5 = 10775;
      break;
    case "pluscir":
      Tmp5 = 10786;
      break;
    case "plusacir":
      Tmp5 = 10787;
      break;
    case "simplus":
      Tmp5 = 10788;
      break;
    case "plusdu":
      Tmp5 = 10789;
      break;
    case "plussim":
      Tmp5 = 10790;
      break;
    case "plustwo":
      Tmp5 = 10791;
      break;
    case "mcomma":
      Tmp5 = 10793;
      break;
    case "minusdu":
      Tmp5 = 10794;
      break;
    case "loplus":
      Tmp5 = 10797;
      break;
    case "roplus":
      Tmp5 = 10798;
      break;
    case "Cross":
      Tmp5 = 10799;
      break;
    case "timesd":
      Tmp5 = 10800;
      break;
    case "timesbar":
      Tmp5 = 10801;
      break;
    case "smashp":
      Tmp5 = 10803;
      break;
    case "lotimes":
      Tmp5 = 10804;
      break;
    case "rotimes":
      Tmp5 = 10805;
      break;
    case "otimesas":
      Tmp5 = 10806;
      break;
    case "Otimes":
      Tmp5 = 10807;
      break;
    case "odiv":
      Tmp5 = 10808;
      break;
    case "triplus":
      Tmp5 = 10809;
      break;
    case "triminus":
      Tmp5 = 10810;
      break;
    case "tritime":
      Tmp5 = 10811;
      break;
    case "iprod":
    case "intprod":
      Tmp5 = 10812;
      break;
    case "amalg":
      Tmp5 = 10815;
      break;
    case "capdot":
      Tmp5 = 10816;
      break;
    case "ncup":
      Tmp5 = 10818;
      break;
    case "ncap":
      Tmp5 = 10819;
      break;
    case "capand":
      Tmp5 = 10820;
      break;
    case "cupor":
      Tmp5 = 10821;
      break;
    case "cupcap":
      Tmp5 = 10822;
      break;
    case "capcup":
      Tmp5 = 10823;
      break;
    case "cupbrcap":
      Tmp5 = 10824;
      break;
    case "capbrcup":
      Tmp5 = 10825;
      break;
    case "cupcup":
      Tmp5 = 10826;
      break;
    case "capcap":
      Tmp5 = 10827;
      break;
    case "ccups":
      Tmp5 = 10828;
      break;
    case "ccaps":
      Tmp5 = 10829;
      break;
    case "ccupssm":
      Tmp5 = 10832;
      break;
    case "And":
      Tmp5 = 10835;
      break;
    case "Or":
      Tmp5 = 10836;
      break;
    case "andand":
      Tmp5 = 10837;
      break;
    case "oror":
      Tmp5 = 10838;
      break;
    case "orslope":
      Tmp5 = 10839;
      break;
    case "andslope":
      Tmp5 = 10840;
      break;
    case "andv":
      Tmp5 = 10842;
      break;
    case "orv":
      Tmp5 = 10843;
      break;
    case "andd":
      Tmp5 = 10844;
      break;
    case "ord":
      Tmp5 = 10845;
      break;
    case "wedbar":
      Tmp5 = 10847;
      break;
    case "sdote":
      Tmp5 = 10854;
      break;
    case "simdot":
      Tmp5 = 10858;
      break;
    case "congdot":
      Tmp5 = 10861;
      break;
    case "easter":
      Tmp5 = 10862;
      break;
    case "apacir":
      Tmp5 = 10863;
      break;
    case "apE":
      Tmp5 = 10864;
      break;
    case "eplus":
      Tmp5 = 10865;
      break;
    case "pluse":
      Tmp5 = 10866;
      break;
    case "Esim":
      Tmp5 = 10867;
      break;
    case "Colone":
      Tmp5 = 10868;
      break;
    case "Equal":
      Tmp5 = 10869;
      break;
    case "eDDot":
    case "ddotseq":
      Tmp5 = 10871;
      break;
    case "equivDD":
      Tmp5 = 10872;
      break;
    case "ltcir":
      Tmp5 = 10873;
      break;
    case "gtcir":
      Tmp5 = 10874;
      break;
    case "ltquest":
      Tmp5 = 10875;
      break;
    case "gtquest":
      Tmp5 = 10876;
      break;
    case "les":
    case "LessSlantEqual":
    case "leqslant":
      Tmp5 = 10877;
      break;
    case "ges":
    case "GreaterSlantEqual":
    case "geqslant":
      Tmp5 = 10878;
      break;
    case "lesdot":
      Tmp5 = 10879;
      break;
    case "gesdot":
      Tmp5 = 10880;
      break;
    case "lesdoto":
      Tmp5 = 10881;
      break;
    case "gesdoto":
      Tmp5 = 10882;
      break;
    case "lesdotor":
      Tmp5 = 10883;
      break;
    case "gesdotol":
      Tmp5 = 10884;
      break;
    case "lap":
    case "lessapprox":
      Tmp5 = 10885;
      break;
    case "gap":
    case "gtrapprox":
      Tmp5 = 10886;
      break;
    case "lne":
    case "lneq":
      Tmp5 = 10887;
      break;
    case "gne":
    case "gneq":
      Tmp5 = 10888;
      break;
    case "lnap":
    case "lnapprox":
      Tmp5 = 10889;
      break;
    case "gnap":
    case "gnapprox":
      Tmp5 = 10890;
      break;
    case "lEg":
    case "lesseqqgtr":
      Tmp5 = 10891;
      break;
    case "gEl":
    case "gtreqqless":
      Tmp5 = 10892;
      break;
    case "lsime":
      Tmp5 = 10893;
      break;
    case "gsime":
      Tmp5 = 10894;
      break;
    case "lsimg":
      Tmp5 = 10895;
      break;
    case "gsiml":
      Tmp5 = 10896;
      break;
    case "lgE":
      Tmp5 = 10897;
      break;
    case "glE":
      Tmp5 = 10898;
      break;
    case "lesges":
      Tmp5 = 10899;
      break;
    case "gesles":
      Tmp5 = 10900;
      break;
    case "els":
    case "eqslantless":
      Tmp5 = 10901;
      break;
    case "egs":
    case "eqslantgtr":
      Tmp5 = 10902;
      break;
    case "elsdot":
      Tmp5 = 10903;
      break;
    case "egsdot":
      Tmp5 = 10904;
      break;
    case "el":
      Tmp5 = 10905;
      break;
    case "eg":
      Tmp5 = 10906;
      break;
    case "siml":
      Tmp5 = 10909;
      break;
    case "simg":
      Tmp5 = 10910;
      break;
    case "simlE":
      Tmp5 = 10911;
      break;
    case "simgE":
      Tmp5 = 10912;
      break;
    case "LessLess":
      Tmp5 = 10913;
      break;
    case "GreaterGreater":
      Tmp5 = 10914;
      break;
    case "glj":
      Tmp5 = 10916;
      break;
    case "gla":
      Tmp5 = 10917;
      break;
    case "ltcc":
      Tmp5 = 10918;
      break;
    case "gtcc":
      Tmp5 = 10919;
      break;
    case "lescc":
      Tmp5 = 10920;
      break;
    case "gescc":
      Tmp5 = 10921;
      break;
    case "smt":
      Tmp5 = 10922;
      break;
    case "lat":
      Tmp5 = 10923;
      break;
    case "smte":
      Tmp5 = 10924;
      break;
    case "late":
      Tmp5 = 10925;
      break;
    case "bumpE":
      Tmp5 = 10926;
      break;
    case "pre":
    case "preceq":
    case "PrecedesEqual":
      Tmp5 = 10927;
      break;
    case "sce":
    case "succeq":
    case "SucceedsEqual":
      Tmp5 = 10928;
      break;
    case "prE":
      Tmp5 = 10931;
      break;
    case "scE":
      Tmp5 = 10932;
      break;
    case "prnE":
    case "precneqq":
      Tmp5 = 10933;
      break;
    case "scnE":
    case "succneqq":
      Tmp5 = 10934;
      break;
    case "prap":
    case "precapprox":
      Tmp5 = 10935;
      break;
    case "scap":
    case "succapprox":
      Tmp5 = 10936;
      break;
    case "prnap":
    case "precnapprox":
      Tmp5 = 10937;
      break;
    case "scnap":
    case "succnapprox":
      Tmp5 = 10938;
      break;
    case "Pr":
      Tmp5 = 10939;
      break;
    case "Sc":
      Tmp5 = 10940;
      break;
    case "subdot":
      Tmp5 = 10941;
      break;
    case "supdot":
      Tmp5 = 10942;
      break;
    case "subplus":
      Tmp5 = 10943;
      break;
    case "supplus":
      Tmp5 = 10944;
      break;
    case "submult":
      Tmp5 = 10945;
      break;
    case "supmult":
      Tmp5 = 10946;
      break;
    case "subedot":
      Tmp5 = 10947;
      break;
    case "supedot":
      Tmp5 = 10948;
      break;
    case "subE":
    case "subseteqq":
      Tmp5 = 10949;
      break;
    case "supE":
    case "supseteqq":
      Tmp5 = 10950;
      break;
    case "subsim":
      Tmp5 = 10951;
      break;
    case "supsim":
      Tmp5 = 10952;
      break;
    case "subnE":
    case "subsetneqq":
      Tmp5 = 10955;
      break;
    case "supnE":
    case "supsetneqq":
      Tmp5 = 10956;
      break;
    case "csub":
      Tmp5 = 10959;
      break;
    case "csup":
      Tmp5 = 10960;
      break;
    case "csube":
      Tmp5 = 10961;
      break;
    case "csupe":
      Tmp5 = 10962;
      break;
    case "subsup":
      Tmp5 = 10963;
      break;
    case "supsub":
      Tmp5 = 10964;
      break;
    case "subsub":
      Tmp5 = 10965;
      break;
    case "supsup":
      Tmp5 = 10966;
      break;
    case "suphsub":
      Tmp5 = 10967;
      break;
    case "supdsub":
      Tmp5 = 10968;
      break;
    case "forkv":
      Tmp5 = 10969;
      break;
    case "topfork":
      Tmp5 = 10970;
      break;
    case "mlcp":
      Tmp5 = 10971;
      break;
    case "Dashv":
    case "DoubleLeftTee":
      Tmp5 = 10980;
      break;
    case "Vdashl":
      Tmp5 = 10982;
      break;
    case "Barv":
      Tmp5 = 10983;
      break;
    case "vBar":
      Tmp5 = 10984;
      break;
    case "vBarv":
      Tmp5 = 10985;
      break;
    case "Vbar":
      Tmp5 = 10987;
      break;
    case "Not":
      Tmp5 = 10988;
      break;
    case "bNot":
      Tmp5 = 10989;
      break;
    case "rnmid":
      Tmp5 = 10990;
      break;
    case "cirmid":
      Tmp5 = 10991;
      break;
    case "midcir":
      Tmp5 = 10992;
      break;
    case "topcir":
      Tmp5 = 10993;
      break;
    case "nhpar":
      Tmp5 = 10994;
      break;
    case "parsim":
      Tmp5 = 10995;
      break;
    case "parsl":
      Tmp5 = 11005;
      break;
    case "fflig":
      Tmp5 = 64256;
      break;
    case "filig":
      Tmp5 = 64257;
      break;
    case "fllig":
      Tmp5 = 64258;
      break;
    case "ffilig":
      Tmp5 = 64259;
      break;
    case "ffllig":
      Tmp5 = 64260;
      break;
    case "Ascr":
      Tmp5 = 119964;
      break;
    case "Cscr":
      Tmp5 = 119966;
      break;
    case "Dscr":
      Tmp5 = 119967;
      break;
    case "Gscr":
      Tmp5 = 119970;
      break;
    case "Jscr":
      Tmp5 = 119973;
      break;
    case "Kscr":
      Tmp5 = 119974;
      break;
    case "Nscr":
      Tmp5 = 119977;
      break;
    case "Oscr":
      Tmp5 = 119978;
      break;
    case "Pscr":
      Tmp5 = 119979;
      break;
    case "Qscr":
      Tmp5 = 119980;
      break;
    case "Sscr":
      Tmp5 = 119982;
      break;
    case "Tscr":
      Tmp5 = 119983;
      break;
    case "Uscr":
      Tmp5 = 119984;
      break;
    case "Vscr":
      Tmp5 = 119985;
      break;
    case "Wscr":
      Tmp5 = 119986;
      break;
    case "Xscr":
      Tmp5 = 119987;
      break;
    case "Yscr":
      Tmp5 = 119988;
      break;
    case "Zscr":
      Tmp5 = 119989;
      break;
    case "ascr":
      Tmp5 = 119990;
      break;
    case "bscr":
      Tmp5 = 119991;
      break;
    case "cscr":
      Tmp5 = 119992;
      break;
    case "dscr":
      Tmp5 = 119993;
      break;
    case "fscr":
      Tmp5 = 119995;
      break;
    case "hscr":
      Tmp5 = 119997;
      break;
    case "iscr":
      Tmp5 = 119998;
      break;
    case "jscr":
      Tmp5 = 119999;
      break;
    case "kscr":
      Tmp5 = 120000;
      break;
    case "lscr":
      Tmp5 = 120001;
      break;
    case "mscr":
      Tmp5 = 120002;
      break;
    case "nscr":
      Tmp5 = 120003;
      break;
    case "pscr":
      Tmp5 = 120005;
      break;
    case "qscr":
      Tmp5 = 120006;
      break;
    case "rscr":
      Tmp5 = 120007;
      break;
    case "sscr":
      Tmp5 = 120008;
      break;
    case "tscr":
      Tmp5 = 120009;
      break;
    case "uscr":
      Tmp5 = 120010;
      break;
    case "vscr":
      Tmp5 = 120011;
      break;
    case "wscr":
      Tmp5 = 120012;
      break;
    case "xscr":
      Tmp5 = 120013;
      break;
    case "yscr":
      Tmp5 = 120014;
      break;
    case "zscr":
      Tmp5 = 120015;
      break;
    case "Afr":
      Tmp5 = 120068;
      break;
    case "Bfr":
      Tmp5 = 120069;
      break;
    case "Dfr":
      Tmp5 = 120071;
      break;
    case "Efr":
      Tmp5 = 120072;
      break;
    case "Ffr":
      Tmp5 = 120073;
      break;
    case "Gfr":
      Tmp5 = 120074;
      break;
    case "Jfr":
      Tmp5 = 120077;
      break;
    case "Kfr":
      Tmp5 = 120078;
      break;
    case "Lfr":
      Tmp5 = 120079;
      break;
    case "Mfr":
      Tmp5 = 120080;
      break;
    case "Nfr":
      Tmp5 = 120081;
      break;
    case "Ofr":
      Tmp5 = 120082;
      break;
    case "Pfr":
      Tmp5 = 120083;
      break;
    case "Qfr":
      Tmp5 = 120084;
      break;
    case "Sfr":
      Tmp5 = 120086;
      break;
    case "Tfr":
      Tmp5 = 120087;
      break;
    case "Ufr":
      Tmp5 = 120088;
      break;
    case "Vfr":
      Tmp5 = 120089;
      break;
    case "Wfr":
      Tmp5 = 120090;
      break;
    case "Xfr":
      Tmp5 = 120091;
      break;
    case "Yfr":
      Tmp5 = 120092;
      break;
    case "afr":
      Tmp5 = 120094;
      break;
    case "bfr":
      Tmp5 = 120095;
      break;
    case "cfr":
      Tmp5 = 120096;
      break;
    case "dfr":
      Tmp5 = 120097;
      break;
    case "efr":
      Tmp5 = 120098;
      break;
    case "ffr":
      Tmp5 = 120099;
      break;
    case "gfr":
      Tmp5 = 120100;
      break;
    case "hfr":
      Tmp5 = 120101;
      break;
    case "ifr":
      Tmp5 = 120102;
      break;
    case "jfr":
      Tmp5 = 120103;
      break;
    case "kfr":
      Tmp5 = 120104;
      break;
    case "lfr":
      Tmp5 = 120105;
      break;
    case "mfr":
      Tmp5 = 120106;
      break;
    case "nfr":
      Tmp5 = 120107;
      break;
    case "ofr":
      Tmp5 = 120108;
      break;
    case "pfr":
      Tmp5 = 120109;
      break;
    case "qfr":
      Tmp5 = 120110;
      break;
    case "rfr":
      Tmp5 = 120111;
      break;
    case "sfr":
      Tmp5 = 120112;
      break;
    case "tfr":
      Tmp5 = 120113;
      break;
    case "ufr":
      Tmp5 = 120114;
      break;
    case "vfr":
      Tmp5 = 120115;
      break;
    case "wfr":
      Tmp5 = 120116;
      break;
    case "xfr":
      Tmp5 = 120117;
      break;
    case "yfr":
      Tmp5 = 120118;
      break;
    case "zfr":
      Tmp5 = 120119;
      break;
    case "Aopf":
      Tmp5 = 120120;
      break;
    case "Bopf":
      Tmp5 = 120121;
      break;
    case "Dopf":
      Tmp5 = 120123;
      break;
    case "Eopf":
      Tmp5 = 120124;
      break;
    case "Fopf":
      Tmp5 = 120125;
      break;
    case "Gopf":
      Tmp5 = 120126;
      break;
    case "Iopf":
      Tmp5 = 120128;
      break;
    case "Jopf":
      Tmp5 = 120129;
      break;
    case "Kopf":
      Tmp5 = 120130;
      break;
    case "Lopf":
      Tmp5 = 120131;
      break;
    case "Mopf":
      Tmp5 = 120132;
      break;
    case "Oopf":
      Tmp5 = 120134;
      break;
    case "Sopf":
      Tmp5 = 120138;
      break;
    case "Topf":
      Tmp5 = 120139;
      break;
    case "Uopf":
      Tmp5 = 120140;
      break;
    case "Vopf":
      Tmp5 = 120141;
      break;
    case "Wopf":
      Tmp5 = 120142;
      break;
    case "Xopf":
      Tmp5 = 120143;
      break;
    case "Yopf":
      Tmp5 = 120144;
      break;
    case "aopf":
      Tmp5 = 120146;
      break;
    case "bopf":
      Tmp5 = 120147;
      break;
    case "copf":
      Tmp5 = 120148;
      break;
    case "dopf":
      Tmp5 = 120149;
      break;
    case "eopf":
      Tmp5 = 120150;
      break;
    case "fopf":
      Tmp5 = 120151;
      break;
    case "gopf":
      Tmp5 = 120152;
      break;
    case "hopf":
      Tmp5 = 120153;
      break;
    case "iopf":
      Tmp5 = 120154;
      break;
    case "jopf":
      Tmp5 = 120155;
      break;
    case "kopf":
      Tmp5 = 120156;
      break;
    case "lopf":
      Tmp5 = 120157;
      break;
    case "mopf":
      Tmp5 = 120158;
      break;
    case "nopf":
      Tmp5 = 120159;
      break;
    case "oopf":
      Tmp5 = 120160;
      break;
    case "popf":
      Tmp5 = 120161;
      break;
    case "qopf":
      Tmp5 = 120162;
      break;
    case "ropf":
      Tmp5 = 120163;
      break;
    case "sopf":
      Tmp5 = 120164;
      break;
    case "topf":
      Tmp5 = 120165;
      break;
    case "uopf":
      Tmp5 = 120166;
      break;
    case "vopf":
      Tmp5 = 120167;
      break;
    case "wopf":
      Tmp5 = 120168;
      break;
    case "xopf":
      Tmp5 = 120169;
      break;
    case "yopf":
      Tmp5 = 120170;
      break;
    case "zopf":
      Tmp5 = 120171;
      break;
    default: 
      Tmp5 = 0;
      break;
    }
    result_12400117 = Tmp5;
  } while (false);

  return result_12400117;

}
function entityToUtf8_12426481(entity_12426483) {
  var result_12426484 = [];

    var rune_12426485 = entityToRune_12400114(entity_12426483);
    if ((rune_12426485 <= 0)) {
    result_12426484 = nimCopy(null, [], NTI1188013);
    }
    else {
      result_12426484 = nimCopy(null, nuctoUTF8(rune_12426485), NTI1188013);
    }
    

  return result_12426484;

}
function parse_12430022(x_12430025, errors_12430028, errors_12430028_Idx) {
      var Tmp1;
      var Tmp2;
      var Tmp3;
      var Tmp4;
      var Tmp5;
              var Tmp8;
              var Tmp9;
      var Tmp10;
      var Tmp11;

  var result_12550030 = null;

    switch (kind_11956215(x_12430025)) {
    case 4:
      result_12550030 = newComment_12180214((Tmp1 = rawData_11956258(x_12430025), Tmp1)[0][Tmp1[1]]);
      next_12050021(x_12430025);
      break;
    case 2:
    case 3:
      result_12550030 = newText_12171162((Tmp2 = rawData_11956258(x_12430025), Tmp2)[0][Tmp2[1]]);
      next_12050021(x_12430025);
      break;
    case 5:
    case 13:
      next_12050021(x_12430025);
      break;
    case 0:
      errors_12430028[errors_12430028_Idx].push(errorMsg_11956366(x_12430025));;
      next_12050021(x_12430025);
      break;
    case 6:
      result_12550030 = newElement_12171113(nsuToLowerAsciiStr((Tmp3 = rawData_11956258(x_12430025), Tmp3)[0][Tmp3[1]]));
      next_12050021(x_12430025);
      untilElementEnd_12430056(x_12430025, result_12550030, errors_12430028, errors_12430028_Idx);
      break;
    case 7:
      errors_12430028[errors_12430028_Idx].push(errorMsg_11965236(x_12430025, (makeNimstrLit("unexpected ending tag: ") || []).concat((Tmp4 = rawData_11956258(x_12430025), Tmp4)[0][Tmp4[1]] || [])));;
      break;
    case 8:
      result_12550030 = newElement_12171113(nsuToLowerAsciiStr((Tmp5 = rawData_11956258(x_12430025), Tmp5)[0][Tmp5[1]]));
      next_12050021(x_12430025);
      attrsHEX3D_12325215(result_12550030, nstnewStringTableWithTableConstr([], 0));
      L6: do {
          L7: while (true) {
          if (!true) break L7;
            switch (kind_11956215(x_12430025)) {
            case 9:
              nstPut(attrs_12315246(result_12550030), (Tmp8 = rawData_11956258(x_12430025), Tmp8)[0][Tmp8[1]], (Tmp9 = rawData2_11956279(x_12430025), Tmp9)[0][Tmp9[1]]);
              next_12050021(x_12430025);
              break;
            case 10:
              next_12050021(x_12430025);
              break L6;
              break;
            case 0:
              errors_12430028[errors_12430028_Idx].push(errorMsg_11956366(x_12430025));;
              next_12050021(x_12430025);
              break L6;
              break;
            default: 
              errors_12430028[errors_12430028_Idx].push(errorMsg_11965236(x_12430025, makeNimstrLit("\'>\' expected")));;
              next_12050021(x_12430025);
              break L6;
              break;
            }
          }
      } while(false);
      untilElementEnd_12430056(x_12430025, result_12550030, errors_12430028, errors_12430028_Idx);
      break;
    case 9:
    case 10:
      errors_12430028[errors_12430028_Idx].push(errorMsg_11965236(x_12430025, makeNimstrLit("<some_tag> expected")));;
      next_12050021(x_12430025);
      break;
    case 11:
      result_12550030 = newCData_12180232((Tmp10 = rawData_11956258(x_12430025), Tmp10)[0][Tmp10[1]]);
      next_12050021(x_12430025);
      break;
    case 12:
      var u_12590009 = entityToUtf8_12426481((Tmp11 = rawData_11956258(x_12430025), Tmp11)[0][Tmp11[1]]);
      if (!(((u_12590009).length == 0))) {
      result_12550030 = newText_12171162(u_12590009);
      }
      
      next_12050021(x_12430025);
      break;
    case 1:
      break;
    }

  return result_12550030;

}
function close_11541188(s_11541190) {
    if (!((s_11541190.closeImpl == null))) {
    s_11541190.closeImpl(s_11541190);
    }
    

  
}
function close_11811069(L_11811072) {
    close_11541188(L_11811072.input);

  
}
function close_11956198(my_11956201) {
    close_11811069(my_11956201);

  
}
function len_12275428(n_12275430) {
    var Tmp1;

  var result_12275431 = 0;

    if ((n_12275430.k == 2)) {
    var Tmp1 = n_12275430;
    if (ConstSet36[Tmp1.k]===undefined) { raiseFieldError(makeNimstrLit("\'s\' is not accessible using discriminant \'k\' of type \'XmlNodeObj\'")); }
    result_12275431 = (Tmp1.s).length;
    }
    

  return result_12275431;

}
function HEX5BHEX5D_12285215(n_12285218, n_12285218_Idx, i_12285219) {
    var Tmp1;
    var Tmp2;

  var result_12285221 = null;
  var result_12285221_Idx = 0;

    if (!((n_12285218[n_12285218_Idx].k == 2))) {
    failedAssertImpl_1305480(makeNimstrLit("xmltree.nim(382, 10) `n.k == xnElement` "));
    }
    
    var Tmp1 = n_12285218[n_12285218_Idx];
    if (ConstSet37[Tmp1.k]===undefined) { raiseFieldError(makeNimstrLit("\'s\' is not accessible using discriminant \'k\' of type \'XmlNodeObj\'")); }
    result_12285221 = (Tmp2 = Tmp1.s, Tmp2); result_12285221_Idx = chckIndx(i_12285219, 0, (Tmp2).length-1);

  return [result_12285221, result_12285221_Idx];

}
function parseHtml_12595029(s_12595031, filename_12595032, errors_12595035, errors_12595035_Idx) {
    var Tmp3;

  var result_12595036 = [null];

    var x_12595037 = [({m_type: NTI11956023, a: [], b: [], c: [], kind: 0, err: 0, state: 0, cIsEmpty: false, filename: [], options: {}, bufpos: 0, buf: [], input: null, lineNumber: 0, sentinel: 0, lineStart: 0, offsetBase: 0, refillChars: {}})];
    open_11956101(x_12595037[0], s_12595031, filename_12595032, ConstSet3);
    next_12050021(x_12595037[0]);
    if ((kind_11956215(x_12595037[0]) == 13)) {
    next_12050021(x_12595037[0]);
    }
    
    result_12595036[0] = newElement_12171113(makeNimstrLit("document"));
    addNode_12426503(result_12595036[0], parse_12430022(x_12595037[0], errors_12595035, errors_12595035_Idx));
    L1: do {
        L2: while (true) {
        if (!!((kind_11956215(x_12595037[0]) == 1))) break L2;
          var oldPos_12600006 = x_12595037[0].bufpos;
          addNode_12426503(result_12595036[0], parse_12430022(x_12595037[0], errors_12595035, errors_12595035_Idx));
          if ((x_12595037[0].bufpos == oldPos_12600006)) {
          next_12050021(x_12595037[0]);
          }
          
        }
    } while(false);
    close_11956198(x_12595037[0]);
    if ((len_12275428(result_12595036[0]) == 1)) {
    result_12595036[0] = (Tmp3 = HEX5BHEX5D_12285215(result_12595036, 0, 0), Tmp3)[0][Tmp3[1]];
    }
    

  return result_12595036[0];

}
function parseHtml_12600026(s_12600028) {
  var result_12600029 = null;

    var errors_12600046 = [[]];
    result_12600029 = parseHtml_12595029(s_12600028, makeNimstrLit("unknown_html_doc"), errors_12600046, 0);

  return result_12600029;

}
function ssClose_11800021(s_11800023) {
    var s_11800024 = s_11800023;
    s_11800024.data = nimCopy(null, [], NTI1188013);

  
}
function ssAtEnd_11705297(s_11705299) {
  var result_11705300 = false;

  BeforeRet: do {
    var s_11705301 = s_11705299;
    result_11705300 = ((s_11705301.data).length <= s_11705301.pos);
    break BeforeRet;
  } while (false);

  return result_11705300;

}
function clamp_11710049(x_11710052, a_11710053, b_11710054) {
  var result_11710055 = 0;

  BeforeRet: do {
    if ((x_11710052 < a_11710053)) {
    result_11710055 = a_11710053;
    break BeforeRet;
    }
    
    if ((b_11710054 < x_11710052)) {
    result_11710055 = b_11710054;
    break BeforeRet;
    }
    
    result_11710055 = x_11710052;
    break BeforeRet;
  } while (false);

  return result_11710055;

}
function ssSetPosition_11710044(s_11710046, pos_11710047) {
    var s_11710048 = s_11710046;
    s_11710048.pos = clamp_11710049(pos_11710047, 0, (s_11710048.data).length);

  
}
function ssGetPosition_11710082(s_11710084) {
  var result_11710085 = 0;

  BeforeRet: do {
    var s_11710086 = s_11710084;
    result_11710085 = s_11710086.pos;
    break BeforeRet;
  } while (false);

  return result_11710085;

}
function HEX5BHEX5DHEX3D_9945021(s_9945025, s_9945025_Idx, x_9945027, b_9945028) {
    var a_9945201 = x_9945027.a;
    var L_9945401 = addInt(subInt(x_9945027.b, a_9945201), 1);
    if ((L_9945401 == (b_9945028).length)) {
    L1: do {
      var i_9945409 = 0;
      var i_12926751 = 0;
      L2: do {
          L3: while (true) {
          if (!(i_12926751 < L_9945401)) break L3;
            i_9945409 = i_12926751;
            s_9945025[s_9945025_Idx][chckIndx(addInt(i_9945409, a_9945201), 0, (s_9945025[s_9945025_Idx]).length-1)] = b_9945028[chckIndx(i_9945409, 0, (b_9945028).length-1)];
            i_12926751 = addInt(i_12926751, 1);
          }
      } while(false);
    } while(false);
    }
    else {
      var shiftHEX60gensym78_9955002 = subInt((b_9945028).length, nimMax(0, L_9945401));
      var newLenHEX60gensym78_9955003 = addInt((s_9945025[s_9945025_Idx]).length, shiftHEX60gensym78_9955002);
      if ((0 < shiftHEX60gensym78_9955002)) {
      (s_9945025[s_9945025_Idx].length = chckRange(newLenHEX60gensym78_9955003, 0, 2147483647));
      L4: do {
        var iHEX60gensym78_9955010 = 0;
        var colontmp__12926754 = 0;
        var colontmp__12926755 = 0;
        colontmp__12926754 = subInt(newLenHEX60gensym78_9955003, 1);
        colontmp__12926755 = addInt(a_9945201, (b_9945028).length);
        var res_12926760 = colontmp__12926754;
        L5: do {
            L6: while (true) {
            if (!(colontmp__12926755 <= res_12926760)) break L6;
              iHEX60gensym78_9955010 = res_12926760;
              s_9945025[s_9945025_Idx][chckIndx(iHEX60gensym78_9955010, 0, (s_9945025[s_9945025_Idx]).length-1)] = s_9945025[s_9945025_Idx][chckIndx(subInt(iHEX60gensym78_9955010, shiftHEX60gensym78_9955002), 0, (s_9945025[s_9945025_Idx]).length-1)];
              res_12926760 = subInt(res_12926760, 1);
            }
        } while(false);
      } while(false);
      }
      else {
        L7: do {
          var iHEX60gensym78_9955017 = 0;
          var colontmp__12926766 = 0;
          var colontmp__12926767 = 0;
          colontmp__12926766 = addInt(a_9945201, (b_9945028).length);
          colontmp__12926767 = subInt(newLenHEX60gensym78_9955003, 1);
          var res_12926768 = colontmp__12926766;
          L8: do {
              L9: while (true) {
              if (!(res_12926768 <= colontmp__12926767)) break L9;
                iHEX60gensym78_9955017 = res_12926768;
                s_9945025[s_9945025_Idx][chckIndx(iHEX60gensym78_9955017, 0, (s_9945025[s_9945025_Idx]).length-1)] = s_9945025[s_9945025_Idx][chckIndx(subInt(iHEX60gensym78_9955017, shiftHEX60gensym78_9955002), 0, (s_9945025[s_9945025_Idx]).length-1)];
                res_12926768 = addInt(res_12926768, 1);
              }
          } while(false);
        } while(false);
        (s_9945025[s_9945025_Idx].length = chckRange(newLenHEX60gensym78_9955003, 0, 2147483647));
      }
      
      L10: do {
        var iHEX60gensym78_9955025 = 0;
        var colontmp__12926774 = 0;
        colontmp__12926774 = (b_9945028).length;
        var i_12926775 = 0;
        L11: do {
            L12: while (true) {
            if (!(i_12926775 < colontmp__12926774)) break L12;
              iHEX60gensym78_9955025 = i_12926775;
              s_9945025[s_9945025_Idx][chckIndx(addInt(a_9945201, iHEX60gensym78_9955025), 0, (s_9945025[s_9945025_Idx]).length-1)] = b_9945028[chckIndx(iHEX60gensym78_9955025, 0, (b_9945028).length-1)];
              i_12926775 = addInt(i_12926775, 1);
            }
        } while(false);
      } while(false);
    }
    

  
}
function HEX5BHEX5D_3440283(s_3440287, x_3440289) {
  var result_3440290 = [];

    var a_3440401 = x_3440289.a;
    var L_3440601 = addInt(subInt(x_3440289.b, a_3440401), 1);
    result_3440290 = nimCopy(null, mnewString(chckRange(L_3440601, 0, 2147483647)), NTI1188013);
    L1: do {
      var i_3440609 = 0;
      var i_12926780 = 0;
      L2: do {
          L3: while (true) {
          if (!(i_12926780 < L_3440601)) break L3;
            i_3440609 = i_12926780;
            result_3440290[chckIndx(i_3440609, 0, (result_3440290).length-1)] = s_3440287[chckIndx(addInt(i_3440609, a_3440401), 0, (s_3440287).length-1)];
            i_12926780 = addInt(i_12926780, 1);
          }
      } while(false);
    } while(false);

  return result_3440290;

}
function ssReadDataStr_11710100(s_11710102, buffer_11710104, buffer_11710104_Idx, slice_11710109) {
  var result_11710110 = 0;

    var s_11710111 = s_11710102;
    result_11710110 = nimMin(subInt(addInt(slice_11710109.b, 1), slice_11710109.a), subInt((s_11710111.data).length, s_11710111.pos));
    if ((0 < result_11710110)) {
    L1: do {
    } while(false);
    HEX5BHEX5DHEX3D_9945021(buffer_11710104, buffer_11710104_Idx, HEX2EHEX2E_3440220(slice_11710109.a, subInt(addInt(slice_11710109.a, result_11710110), 1)), HEX5BHEX5D_3440283(s_11710111.data, HEX2EHEX2E_3440220(s_11710111.pos, subInt(addInt(s_11710111.pos, result_11710110), 1))));
    s_11710111.pos = addInt(s_11710111.pos, result_11710110);
    }
    else {
      result_11710110 = 0;
    }
    

  return result_11710110;

}
function isNimException_1375704() {
    return lastJSError && lastJSError.m_type;

  
}
function getCurrentException() {
  var result_1375723 = null;

    if (isNimException_1375704()) {
    result_1375723 = lastJSError;
    }
    

  return result_1375723;

}
function ssReadData_11740420(s_11740422, buffer_11740423, buffer_11740423_Idx, bufLen_11740424) {
    var Tmp2;

  var result_11740425 = 0;

    var s_11740426 = s_11740422;
    result_11740425 = nimMin(bufLen_11740424, subInt((s_11740426.data).length, s_11740426.pos));
    if ((0 < result_11740425)) {
++excHandler;
    Tmp2 = framePtr;
    try {
    HEX5BHEX5DHEX3D_9945021(buffer_11740423, buffer_11740423_Idx, HEX2EHEX2E_3440220(0, subInt(result_11740425, 1)), HEX5BHEX5D_3440283(s_11740426.data, HEX2EHEX2E_3440220(s_11740426.pos, subInt(addInt(s_11740426.pos, result_11740425), 1))));
--excHandler;
} catch (EXC) {
 var prevJSError = lastJSError;
 lastJSError = EXC;
 --excHandler;
    framePtr = Tmp2;
    raiseException({message: makeNimstrLit("could not read string stream, did you use a non-string buffer pointer?"), parent: getCurrentException(), m_type: NTI1194619, name: null, trace: [], up: null}, "Defect");
    lastJSError = prevJSError;
    } finally {
    framePtr = Tmp2;
    }
    s_11740426.pos = addInt(s_11740426.pos, result_11740425);
    }
    else {
      result_11740425 = 0;
    }
    

  return result_11740425;

}
function ssPeekData_11760051(s_11760053, buffer_11760054, buffer_11760054_Idx, bufLen_11760055) {
    var Tmp2;

  var result_11760056 = 0;

    var s_11760057 = s_11760053;
    result_11760056 = nimMin(bufLen_11760055, subInt((s_11760057.data).length, s_11760057.pos));
    if ((0 < result_11760056)) {
++excHandler;
    Tmp2 = framePtr;
    try {
    HEX5BHEX5DHEX3D_9945021(buffer_11760054, buffer_11760054_Idx, HEX2EHEX2E_3440220(0, subInt(result_11760056, 1)), HEX5BHEX5D_3440283(s_11760057.data, HEX2EHEX2E_3440220(s_11760057.pos, subInt(addInt(s_11760057.pos, result_11760056), 1))));
--excHandler;
} catch (EXC) {
 var prevJSError = lastJSError;
 lastJSError = EXC;
 --excHandler;
    framePtr = Tmp2;
    raiseException({message: makeNimstrLit("could not peek string stream, did you use a non-string buffer pointer?"), parent: getCurrentException(), m_type: NTI1194619, name: null, trace: [], up: null}, "Defect");
    lastJSError = prevJSError;
    } finally {
    framePtr = Tmp2;
    }
    }
    else {
      result_11760056 = 0;
    }
    

  return result_11760056;

}
function ssWriteData_11780015(s_11780017, buffer_11780018, buffer_11780018_Idx, bufLen_11780019) {
    var Tmp2;

  BeforeRet: do {
    var s_11780020 = s_11780017;
    if ((bufLen_11780019 <= 0)) {
    break BeforeRet;
    }
    
    if (((s_11780020.data).length < addInt(s_11780020.pos, bufLen_11780019))) {
    (s_11780020.data.length = chckRange(addInt(s_11780020.pos, bufLen_11780019), 0, 2147483647));
    }
    
++excHandler;
    Tmp2 = framePtr;
    try {
    HEX5BHEX5DHEX3D_9945021(s_11780020, "data", HEX2EHEX2E_3440220(s_11780020.pos, subInt(addInt(s_11780020.pos, bufLen_11780019), 1)), HEX5BHEX5D_3440283(buffer_11780018[buffer_11780018_Idx], HEX2EHEX2E_3440220(0, subInt(bufLen_11780019, 1))));
--excHandler;
} catch (EXC) {
 var prevJSError = lastJSError;
 lastJSError = EXC;
 --excHandler;
    framePtr = Tmp2;
    raiseException({message: makeNimstrLit("could not write to string stream, did you use a non-string buffer pointer?"), parent: getCurrentException(), m_type: NTI1194619, name: null, trace: [], up: null}, "Defect");
    lastJSError = prevJSError;
    } finally {
    framePtr = Tmp2;
    }
    s_11780020.pos = addInt(s_11780020.pos, bufLen_11780019);
  } while (false);

  
}
function newStringStream_11800214(s_11800216) {
  var result_11800218 = null;

    result_11800218 = ({m_type: NTI11705253, data: [], pos: 0, closeImpl: null, atEndImpl: null, setPositionImpl: null, getPositionImpl: null, readDataStrImpl: null, readLineImpl: null, readDataImpl: null, peekDataImpl: null, writeDataImpl: null, flushImpl: null});
    result_11800218.data = nimCopy(null, s_11800216, NTI1188013);
    result_11800218.pos = 0;
    result_11800218.closeImpl = ssClose_11800021;
    result_11800218.atEndImpl = ssAtEnd_11705297;
    result_11800218.setPositionImpl = ssSetPosition_11710044;
    result_11800218.getPositionImpl = ssGetPosition_11710082;
    result_11800218.readDataStrImpl = ssReadDataStr_11710100;
    result_11800218.readDataImpl = ssReadData_11740420;
    result_11800218.peekDataImpl = ssPeekData_11760051;
    result_11800218.writeDataImpl = ssWriteData_11780015;

  return result_11800218;

}
function parseHtml_12600061(html_12600063) {
  var result_12600064 = null;

    result_12600064 = parseHtml_12600026(newStringStream_11800214(html_12600063));

  return result_12600064;

}
function HEX5BHEX5D_12275473(n_12275475, i_12275476) {
    var Tmp1;
    var Tmp2;

  var result_12275477 = null;

    if (!((n_12275475.k == 2))) {
    failedAssertImpl_1305480(makeNimstrLit("xmltree.nim(377, 10) `n.k == xnElement` "));
    }
    
    var Tmp1 = n_12275475;
    if (ConstSet38[Tmp1.k]===undefined) { raiseFieldError(makeNimstrLit("\'s\' is not accessible using discriminant \'k\' of type \'XmlNodeObj\'")); }
    result_12275477 = (Tmp2 = Tmp1.s, Tmp2)[chckIndx(i_12275476, 0, (Tmp2).length-1)];

  return result_12275477;

}
function findAll_12375224(n_12375226, tag_12375227, result_12375230, result_12375230_Idx, caseInsensitive_12375231) {
    if (!((n_12375226.k == 2))) {
    failedAssertImpl_1305480(makeNimstrLit("xmltree.nim(717, 10) `n.k == xnElement` "));
    }
    
    L1: do {
      var child_12385202 = null;
      if (!((n_12375226.k == 2))) {
      failedAssertImpl_1305480(makeNimstrLit("xmltree.nim(434, 10) `n.k == xnElement` "));
      }
      
      L2: do {
        var i_12926799 = 0;
        var colontmp__12926800 = 0;
        colontmp__12926800 = subInt(len_12275428(n_12375226), 1);
        var res_12926801 = 0;
        L3: do {
            L4: while (true) {
            if (!(res_12926801 <= colontmp__12926800)) break L4;
              i_12926799 = res_12926801;
              child_12385202 = HEX5BHEX5D_12275473(n_12375226, i_12926799);
              L5: do {
                if (!((child_12385202.k == 2))) {
                break L5;
                }
                
                if ((eqStrings(tag_12210215(child_12385202), tag_12375227) || (caseInsensitive_12375231 && (nsuCmpIgnoreCase(tag_12210215(child_12385202), tag_12375227) == 0)))) {
                result_12375230[result_12375230_Idx].push(child_12385202);;
                }
                
                findAll_12375224(child_12385202, tag_12375227, result_12375230, result_12375230_Idx, false);
              } while(false);
              res_12926801 = addInt(res_12926801, 1);
            }
        } while(false);
      } while(false);
    } while(false);

  
}
function findAll_12390032(n_12390034, tag_12390035, caseInsensitive_12390036) {
  var result_12390038 = [[]];

    result_12390038[0] = new Array(0); for (var i=0;i<0;++i) {result_12390038[0][i]=null;}    findAll_12375224(n_12390034, tag_12390035, result_12390038, 0, caseInsensitive_12390036);

  return result_12390038[0];

}
function kind_12275456(n_12275458) {
  var result_12275459 = 0;

    result_12275459 = n_12275458.k;

  return result_12275459;

}
function getOrDefault_12080057(t_12080059, key_12080060, default_12080061) {
  var result_12080062 = [];

    var index_12080063 = rawGet_12065232(t_12080059, key_12080060);
    if ((0 <= index_12080063)) {
    result_12080062 = nimCopy(null, t_12080059.data[chckIndx(index_12080063, 0, (t_12080059.data).length-1)].Field1, NTI1188013);
    }
    else {
      result_12080062 = nimCopy(null, default_12080061, NTI1188013);
    }
    

  return result_12080062;

}
function attr_12345221(n_12345223, name_12345224) {
  var result_12345225 = [];

  BeforeRet: do {
    if (!((kind_12275456(n_12345223) == 2))) {
    failedAssertImpl_1305480(makeNimstrLit("xmltree.nim(523, 10) `n.kind == xnElement` "));
    }
    
    if ((attrs_12315246(n_12345223) == null)) {
    result_12345225 = nimCopy(null, [], NTI1188013);
    break BeforeRet;
    }
    
    result_12345225 = nimCopy(null, getOrDefault_12080057(attrs_12315246(n_12345223), name_12345224, []), NTI1188013);
    break BeforeRet;
  } while (false);

  return result_12345225;

}
function HEX5BHEX5D_12855005(s_12855009, i_12855010) {
  var result_12855011 = [];

    result_12855011 = nimCopy(null, s_12855009[chckIndx(subInt((s_12855009).length, i_12855010), 0, (s_12855009).length-1)], NTI1188013);

  return result_12855011;

}
function substrEq_9510026(s_9510028, pos_9510029, substr_9510030) {
  var result_9510031 = false;

  BeforeRet: do {
    var i_9510033 = 0;
    var length_9510034 = (substr_9510030).length;
    L1: do {
        L2: while (true) {
        if (!(((i_9510033 < length_9510034) && (addInt(pos_9510029, i_9510033) < (s_9510028).length)) && (s_9510028[chckIndx(addInt(pos_9510029, i_9510033), 0, (s_9510028).length-1)] == substr_9510030[chckIndx(i_9510033, 0, (substr_9510030).length-1)]))) break L2;
          i_9510033 = addInt(i_9510033, 1);
        }
    } while(false);
    result_9510031 = (i_9510033 == length_9510034);
    break BeforeRet;
  } while (false);

  return result_9510031;

}
function nsuSplitString(s_9685040, sep_9685041, maxsplit_9685042) {
  var result_9685044 = [];

    if (!((0 < (sep_9685041).length))) {
    failedAssertImpl_1305480(makeNimstrLit("strutils.nim(779, 11) `sep.len > 0` "));
    }
    
    result_9685044 = nimCopy(null, [], NTI9705015);
    L1: do {
      var xHEX60gensym64_9705016 = [];
      var lastHEX60gensym33_12926809 = 0;
      var splitsHEX60gensym33_12926810 = maxsplit_9685042;
      L2: do {
          L3: while (true) {
          if (!(lastHEX60gensym33_12926809 <= (s_9685040).length)) break L3;
            var firstHEX60gensym33_12926812 = lastHEX60gensym33_12926809;
            L4: do {
                L5: while (true) {
                if (!((lastHEX60gensym33_12926809 < (s_9685040).length) && !(substrEq_9510026(s_9685040, lastHEX60gensym33_12926809, sep_9685041)))) break L5;
                  lastHEX60gensym33_12926809 = addInt(lastHEX60gensym33_12926809, 1);
                }
            } while(false);
            if ((splitsHEX60gensym33_12926810 == 0)) {
            lastHEX60gensym33_12926809 = (s_9685040).length;
            }
            
            xHEX60gensym64_9705016 = substr_1571022(s_9685040, firstHEX60gensym33_12926812, subInt(lastHEX60gensym33_12926809, 1));
            var Tmp6 = nimCopy(null, xHEX60gensym64_9705016, NTI1188013);
            result_9685044.push(Tmp6);;
            if ((splitsHEX60gensym33_12926810 == 0)) {
            break L2;
            }
            
            splitsHEX60gensym33_12926810 = subInt(splitsHEX60gensym33_12926810, 1);
            lastHEX60gensym33_12926809 = addInt(lastHEX60gensym33_12926809, (sep_9685041).length);
          }
      } while(false);
    } while(false);

  return result_9685044;

}
function child_12365063(n_12365065, name_12365066) {
  var result_12365067 = null;

  BeforeRet: do {
    if (!((kind_12275456(n_12365065) == 2))) {
    failedAssertImpl_1305480(makeNimstrLit("xmltree.nim(681, 10) `n.kind == xnElement` "));
    }
    
    L1: do {
      var i_12375201 = null;
      if (!((n_12365065.k == 2))) {
      failedAssertImpl_1305480(makeNimstrLit("xmltree.nim(434, 10) `n.k == xnElement` "));
      }
      
      L2: do {
        var i_12926817 = 0;
        var colontmp__12926818 = 0;
        colontmp__12926818 = subInt(len_12275428(n_12365065), 1);
        var res_12926819 = 0;
        L3: do {
            L4: while (true) {
            if (!(res_12926819 <= colontmp__12926818)) break L4;
              i_12926817 = res_12926819;
              i_12375201 = HEX5BHEX5D_12275473(n_12365065, i_12926817);
              if ((kind_12275456(i_12375201) == 2)) {
              if (eqStrings(tag_12210215(i_12375201), name_12365066)) {
              result_12365067 = i_12375201;
              break BeforeRet;
              }
              
              }
              
              res_12926819 = addInt(res_12926819, 1);
            }
        } while(false);
      } while(false);
    } while(false);
  } while (false);

  return result_12365067;

}
function parse3dexport_12850275(data_12850277, getcount_12850278) {
              var Tmp4;

  var result_12850283 = {Field0: [], Field1: 0};

    var xmldata_12850284 = parseHtml_12600061(data_12850277);
    var count_12850285 = 0;
    if ((getcount_12850278 == true)) {
    L1: do {
      var item_12850294 = null;
      var item_12850294_Idx = 0;
      var colontmp__12925170 = [];
      colontmp__12925170 = findAll_12390032(xmldata_12850284, makeNimstrLit("a"), false);
      var i_12925172 = 0;
      var L_12925173 = (colontmp__12925170).length;
      L2: do {
          L3: while (true) {
          if (!(i_12925172 < L_12925173)) break L3;
            item_12850294 = colontmp__12925170; item_12850294_Idx = chckIndx(i_12925172, 0, (colontmp__12925170).length-1);
              if (!eqStrings(attr_12345221(item_12850294[item_12850294_Idx], makeNimstrLit("class")), makeNimstrLit("btn btn-primary m-b-mini"))) Tmp4 = false; else {                Tmp4 = eqStrings(attr_12345221(item_12850294[item_12850294_Idx], makeNimstrLit("rel")), makeNimstrLit("next"));              }            if (Tmp4) {
            var link_12850302 = attr_12345221(item_12850294[item_12850294_Idx], makeNimstrLit("href"));
            count_12850285 = nsuParseInt(HEX5BHEX5D_12855005(nsuSplitString(link_12850302, makeNimstrLit("="), -1), 1));
            break L1;
            }
            
            i_12925172 = addInt(i_12925172, 1);
            if (!(((colontmp__12925170).length == L_12925173))) {
            failedAssertImpl_1305480(makeNimstrLit("iterators.nim(204, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while(false);
    } while(false);
    }
    
    L5: do {
      var each_12855037 = null;
      var each_12855037_Idx = 0;
      var colontmp__12925181 = [];
      colontmp__12925181 = findAll_12390032(xmldata_12850284, makeNimstrLit("div"), false);
      var i_12925182 = 0;
      var L_12925183 = (colontmp__12925181).length;
      L6: do {
          L7: while (true) {
          if (!(i_12925182 < L_12925183)) break L7;
            each_12855037 = colontmp__12925181; each_12855037_Idx = chckIndx(i_12925182, 0, (colontmp__12925181).length-1);
            if (eqStrings(attr_12345221(each_12855037[each_12855037_Idx], makeNimstrLit("class")), makeNimstrLit("dribomos"))) {
            var answ_12855041 = ({img: [], name: [], website: [], link: [], dimension: []});
            var name_12855043 = attr_12345221(each_12855037[each_12855037_Idx], makeNimstrLit("data-name"));
            L8: do {
              var item_12855052 = null;
              var item_12855052_Idx = 0;
              var colontmp__12925177 = [];
              colontmp__12925177 = findAll_12390032(xmldata_12850284, makeNimstrLit("span"), false);
              var i_12925178 = 0;
              var L_12925179 = (colontmp__12925177).length;
              L9: do {
                  L10: while (true) {
                  if (!(i_12925178 < L_12925179)) break L10;
                    item_12855052 = colontmp__12925177; item_12855052_Idx = chckIndx(i_12925178, 0, (colontmp__12925177).length-1);
                    if (eqStrings(attr_12345221(item_12855052[item_12855052_Idx], makeNimstrLit("class")), makeNimstrLit("thumbnail"))) {
                    var linknode_12855057 = child_12365063(item_12855052[item_12855052_Idx], makeNimstrLit("a"));
                    var link_12855059 = attr_12345221(linknode_12855057, makeNimstrLit("href"));
                    var image_12855062 = attr_12345221(child_12365063(linknode_12855057, makeNimstrLit("img")), makeNimstrLit("src"));
                    answ_12855041.name = nimCopy(null, name_12855043, NTI1188013);
                    answ_12855041.dimension = nimCopy(null, makeNimstrLit("3d"), NTI1188013);
                    answ_12855041.img = nimCopy(null, image_12855062, NTI1188013);
                    answ_12855041.link = nimCopy(null, link_12855059, NTI1188013);
                    answ_12855041.website = nimCopy(null, makeNimstrLit("3dexport.com"), NTI1188013);
                    }
                    
                    i_12925178 = addInt(i_12925178, 1);
                    if (!(((colontmp__12925177).length == L_12925179))) {
                    failedAssertImpl_1305480(makeNimstrLit("iterators.nim(204, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                    }
                    
                  }
              } while(false);
            } while(false);
            var Tmp11 = nimCopy(null, answ_12855041, NTI12826015);
            result_12850283.Field0.push(Tmp11);;
            }
            
            i_12925182 = addInt(i_12925182, 1);
            if (!(((colontmp__12925181).length == L_12925183))) {
            failedAssertImpl_1305480(makeNimstrLit("iterators.nim(204, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while(false);
    } while(false);
    result_12850283.Field1 = count_12850285;
    condition_12826032[0] = true;

  return result_12850283;

}
function HEX3DHEX3D_12881025(x_12881028, y_12881029) {
  var result_12881030 = false;

  BeforeRet: do {
    if (!(eqStrings(x_12881028.img, y_12881029.img))) {
    result_12881030 = false;
    break BeforeRet;
    }
    
    if (!(eqStrings(x_12881028.name, y_12881029.name))) {
    result_12881030 = false;
    break BeforeRet;
    }
    
    if (!(eqStrings(x_12881028.website, y_12881029.website))) {
    result_12881030 = false;
    break BeforeRet;
    }
    
    if (!(eqStrings(x_12881028.link, y_12881029.link))) {
    result_12881030 = false;
    break BeforeRet;
    }
    
    if (!(eqStrings(x_12881028.dimension, y_12881029.dimension))) {
    result_12881030 = false;
    break BeforeRet;
    }
    
    result_12881030 = true;
    break BeforeRet;
  } while (false);

  return result_12881030;

}
function HEX3DHEX3D_12880117(x_12880121, y_12880123) {
  var result_12880124 = false;

  BeforeRet: do {
    var sameObject_12880601 = false;
    sameObject_12880601 = x_12880121 === y_12880123
    if (sameObject_12880601) {
    result_12880124 = true;
    break BeforeRet;
    }
    
    if (!(((x_12880121).length == (y_12880123).length))) {
    result_12880124 = false;
    break BeforeRet;
    }
    
    L1: do {
      var i_12881024 = 0;
      var colontmp__12926851 = 0;
      colontmp__12926851 = subInt((x_12880121).length, 1);
      var res_12926852 = 0;
      L2: do {
          L3: while (true) {
          if (!(res_12926852 <= colontmp__12926851)) break L3;
            i_12881024 = res_12926852;
            if (!(HEX3DHEX3D_12881025(x_12880121[chckIndx(i_12881024, 0, (x_12880121).length-1)], y_12880123[chckIndx(i_12881024, 0, (y_12880123).length-1)]))) {
            result_12880124 = false;
            break BeforeRet;
            }
            
            res_12926852 = addInt(res_12926852, 1);
          }
      } while(false);
    } while(false);
    result_12880124 = true;
    break BeforeRet;
  } while (false);

  return result_12880124;

}
function nsuFormatVarargs(formatstr_10365094, a_10365096) {
  var result_10365097 = [[]];

    result_10365097[0] = nimCopy(null, mnewString(0), NTI1188013);
    nsuAddf(result_10365097, 0, formatstr_10365094, a_10365096);

  return result_10365097[0];

}
function constatus_12835332() {
    var loadimg_12835334 = document.getElementById("loadimg");
    var cond_12835335 = true;
      var resultHEX60gensym2_12840001 = false;
      L1: do {
        var it_12850214 = null;
        var it_12850214_Idx = 0;
        var i_12926858 = 0;
        var L_12926859 = (statuss_12826075[0]).length;
        L2: do {
            L3: while (true) {
            if (!(i_12926858 < L_12926859)) break L3;
              it_12850214 = statuss_12826075[0]; it_12850214_Idx = chckIndx(i_12926858, 0, (statuss_12826075[0]).length-1);
              if ((it_12850214[it_12850214_Idx].cond == true)) {
              resultHEX60gensym2_12840001 = true;
              break L1;
              }
              
              i_12926858 = addInt(i_12926858, 1);
              if (!(((statuss_12826075[0]).length == L_12926859))) {
              failedAssertImpl_1305480(makeNimstrLit("iterators.nim(204, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        } while(false);
      } while(false);
    if (resultHEX60gensym2_12840001) {
    cond_12835335 = false;
    }
    
    if ((cond_12835335 == true)) {
    loadimg_12835334.innerText = toJSStr(nsuFormatVarargs(makeNimstrLit("Could not get Assets for the search $1"), [cstrToNimstr(getkeyword())]));
    loadimg_12835334.id = "loadtext";
    }
    

  
}
function newVNode_10560428(kind_10560430) {
  var result_10560431 = null;

    result_10560431 = {kind: kind_10560430, index: -1, m_type: NTI10465031, id: null, class: null, text: null, kids: [], attrs: [], events: [], style: null, dom: null};

  return result_10560431;

}
function setAttr_10500105(n_10500107, key_10500108, val_10500109) {
  BeforeRet: do {
    if (((n_10500107.attrs).length == 0)) {
    n_10500107.attrs = nimCopy(null, [key_10500108, val_10500109], NTI10500125);
    }
    else {
      L1: do {
        var i_10500138 = 0;
        var colontmp__12926863 = 0;
        colontmp__12926863 = subInt((n_10500107.attrs).length, 2);
        var res_12926864 = 0;
        L2: do {
            L3: while (true) {
            if (!(res_12926864 <= colontmp__12926863)) break L3;
              i_10500138 = res_12926864;
              if ((n_10500107.attrs[chckIndx(i_10500138, 0, (n_10500107.attrs).length-1)] == key_10500108)) {
              n_10500107.attrs[chckIndx(addInt(i_10500138, 1), 0, (n_10500107.attrs).length-1)] = val_10500109;
              break BeforeRet;
              }
              
              res_12926864 = addInt(res_12926864, 2);
            }
        } while(false);
      } while(false);
      n_10500107.attrs.push(key_10500108);;
      n_10500107.attrs.push(val_10500109);;
    }
    
  } while (false);

  
}
function vnodeToDom_11470073(n_11470075, kxi_11470076) {
  var result_11470077 = null;

    result_11470077 = toDom_11010154(n_11470075, false, kxi_11470076);

  return result_11470077;

}
function nsuFindChar(s_10115216, sub_10115217, start_10115218, last_10115219) {
    var Tmp1;

  var result_10115221 = 0;

  BeforeRet: do {
    if ((last_10115219 == 0)) {
    Tmp1 = ((s_10115216).length-1);
    }
    else {
    Tmp1 = last_10115219;
    }
    
    var last_10115223 = Tmp1;
    L2: do {
      var i_10115606 = 0;
      var colontmp__12926879 = 0;
      colontmp__12926879 = start_10115218;
      var res_12926880 = colontmp__12926879;
      L3: do {
          L4: while (true) {
          if (!(res_12926880 <= last_10115223)) break L4;
            i_10115606 = res_12926880;
            if ((sub_10115217 == s_10115216[chckIndx(i_10115606, 0, (s_10115216).length-1)])) {
            result_10115221 = i_10115606;
            break BeforeRet;
            }
            
            res_12926880 = addInt(res_12926880, 1);
          }
      } while(false);
    } while(false);
    result_10115221 = -1;
    break BeforeRet;
  } while (false);

  return result_10115221;

}
function nsuInitSkipTable(a_10110081, sub_10110082) {
    var m_10110083 = (sub_10110082).length;
    var i_10110085 = 0;
    L1: do {
        L2: while (true) {
        if (!(i_10110085 <= 248)) break L2;
          a_10110081[chckIndx(chckRange(addInt(i_10110085, 0), 0, 255), 0, (a_10110081).length-1)] = m_10110083;
          a_10110081[chckIndx(chckRange(addInt(i_10110085, 1), 0, 255), 0, (a_10110081).length-1)] = m_10110083;
          a_10110081[chckIndx(chckRange(addInt(i_10110085, 2), 0, 255), 0, (a_10110081).length-1)] = m_10110083;
          a_10110081[chckIndx(chckRange(addInt(i_10110085, 3), 0, 255), 0, (a_10110081).length-1)] = m_10110083;
          a_10110081[chckIndx(chckRange(addInt(i_10110085, 4), 0, 255), 0, (a_10110081).length-1)] = m_10110083;
          a_10110081[chckIndx(chckRange(addInt(i_10110085, 5), 0, 255), 0, (a_10110081).length-1)] = m_10110083;
          a_10110081[chckIndx(chckRange(addInt(i_10110085, 6), 0, 255), 0, (a_10110081).length-1)] = m_10110083;
          a_10110081[chckIndx(chckRange(addInt(i_10110085, 7), 0, 255), 0, (a_10110081).length-1)] = m_10110083;
          i_10110085 = addInt(i_10110085, 8);
        }
    } while(false);
    L3: do {
      var i_10110101 = 0;
      var colontmp__12926887 = 0;
      colontmp__12926887 = subInt(m_10110083, 1);
      var i_12926888 = 0;
      L4: do {
          L5: while (true) {
          if (!(i_12926888 < colontmp__12926887)) break L5;
            i_10110101 = i_12926888;
            a_10110081[chckIndx(sub_10110082[chckIndx(i_10110101, 0, (sub_10110082).length-1)], 0, (a_10110081).length-1)] = subInt(subInt(m_10110083, 1), i_10110101);
            i_12926888 = addInt(i_12926888, 1);
          }
      } while(false);
    } while(false);

  
}
function nsuFindStrA(a_10110117, s_10110118, sub_10110119, start_10110120, last_10110121) {
    var Tmp1;

  var result_10110123 = 0;

  BeforeRet: do {
    if ((last_10110121 == 0)) {
    Tmp1 = ((s_10110118).length-1);
    }
    else {
    Tmp1 = last_10110121;
    }
    
    var last_10110125 = Tmp1;
    var subLast_10110126 = subInt((sub_10110119).length, 1);
    if ((subLast_10110126 == -1)) {
    result_10110123 = start_10110120;
    break BeforeRet;
    }
    
    var skip_10110127 = start_10110120;
    L2: do {
        L3: while (true) {
        if (!(subLast_10110126 <= subInt(last_10110125, skip_10110127))) break L3;
          var i_10115001 = subLast_10110126;
          L4: do {
              L5: while (true) {
              if (!(s_10110118[chckIndx(addInt(skip_10110127, i_10115001), 0, (s_10110118).length-1)] == sub_10110119[chckIndx(i_10115001, 0, (sub_10110119).length-1)])) break L5;
                if ((i_10115001 == 0)) {
                result_10110123 = skip_10110127;
                break BeforeRet;
                }
                
                i_10115001 = subInt(i_10115001, 1);
              }
          } while(false);
          skip_10110127 = addInt(skip_10110127, a_10110117[chckIndx(s_10110118[chckIndx(addInt(skip_10110127, subLast_10110126), 0, (s_10110118).length-1)], 0, (a_10110117).length-1)]);
        }
    } while(false);
    result_10110123 = -1;
    break BeforeRet;
  } while (false);

  return result_10110123;

}
function nsuFindStr(s_10120022, sub_10120023, start_10120024, last_10120025) {
  var result_10120027 = 0;

  BeforeRet: do {
    if (((s_10120022).length < (sub_10120023).length)) {
    result_10120027 = -1;
    break BeforeRet;
    }
    
    if (((sub_10120023).length == 1)) {
    result_10120027 = nsuFindChar(s_10120022, sub_10120023[chckIndx(0, 0, (sub_10120023).length-1)], start_10120024, last_10120025);
    break BeforeRet;
    }
    
    var a_10125001 = [new Int32Array(256)];
    nsuInitSkipTable(a_10125001[0], sub_10120023);
    result_10120027 = nsuFindStrA(a_10125001[0], s_10120022, sub_10120023, start_10120024, last_10120025);
  } while (false);

  return result_10120027;

}
function contains_10175277(s_10175279, sub_10175280) {
  var result_10175281 = false;

  BeforeRet: do {
    result_10175281 = (0 <= nsuFindStr(s_10175279, sub_10175280, 0, 0));
    break BeforeRet;
  } while (false);

  return result_10175281;

}
function comlink_12880075(tail_12880077, head_12880078) {
  var result_12880079 = [];

    if ((contains_10175277(tail_12880077, makeNimstrLit("https")) || contains_10175277(tail_12880077, head_12880078))) {
    result_12880079 = nimCopy(null, tail_12880077, NTI1188013);
    }
    else {
      result_12880079 = nimCopy(null, (makeNimstrLit("https://") || []).concat(head_12880078 || [],tail_12880077 || []), NTI1188013);
    }
    

  return result_12880079;

}
function toCstr_12880057(data_12880059) {
  var result_12880060 = null;

    var data_12880061 = toJSStr(data_12880059);
    result_12880060 = data_12880061;

  return result_12880060;

}
function HEX3DHEX3D_12890018(x_12890022, y_12890024) {
  var result_12890025 = false;

  BeforeRet: do {
    var sameObject_12890601 = false;
    sameObject_12890601 = x_12890022 === y_12890024
    if (sameObject_12890601) {
    result_12890025 = true;
    break BeforeRet;
    }
    
    if (!(((x_12890022).length == (y_12890024).length))) {
    result_12890025 = false;
    break BeforeRet;
    }
    
    L1: do {
      var i_12891024 = 0;
      var colontmp__12926893 = 0;
      colontmp__12926893 = subInt((x_12890022).length, 1);
      var res_12926894 = 0;
      L2: do {
          L3: while (true) {
          if (!(res_12926894 <= colontmp__12926893)) break L3;
            i_12891024 = res_12926894;
            if (!((x_12890022[chckIndx(i_12891024, 0, (x_12890022).length-1)] == y_12890024[chckIndx(i_12891024, 0, (y_12890024).length-1)]))) {
            result_12890025 = false;
            break BeforeRet;
            }
            
            res_12926894 = addInt(res_12926894, 1);
          }
      } while(false);
    } while(false);
    result_12890025 = true;
    break BeforeRet;
  } while (false);

  return result_12890025;

}
function addmodels_12880095(data_12880101, name_12880102) {
    var canvas_12880103 = document.getElementById("models");
    var size_12880109 = (data_12880101.Field0).length;
    var count1_12880111 = 0;
    var count2_12880113 = 3;
    var prev_12880114 = [];
    if (HEX3DHEX3D_12880117(data_12880101.Field0, fluke_12826037[0].Field0)) {
    L1: do {
      var item_12881093 = null;
      var item_12881093_Idx = 0;
      var i_12926826 = 0;
      var L_12926827 = (statuss_12826075[0]).length;
      L2: do {
          L3: while (true) {
          if (!(i_12926826 < L_12926827)) break L3;
            item_12881093 = statuss_12826075[0]; item_12881093_Idx = chckIndx(i_12926826, 0, (statuss_12826075[0]).length-1);
            L4: do {
              if (eqStrings(cstrToNimstr(item_12881093[item_12881093_Idx].name), name_12880102)) {
              item_12881093[item_12881093_Idx].cond = false;
              if ((pos_12826031[0] == 1)) {
              constatus_12835332();
              }
              
              break L1;
              }
              else {
                break L4;
              }
              
            } while(false);
            i_12926826 = addInt(i_12926826, 1);
            if (!(((statuss_12826075[0]).length == L_12926827))) {
            failedAssertImpl_1305480(makeNimstrLit("iterators.nim(204, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while(false);
    } while(false);
    }
    
    if ((4 < size_12880109)) {
    L5: do {
      var i_12885009 = 0;
      var colontmp__12926837 = 0;
      colontmp__12926837 = divInt(size_12880109, 4);
      var res_12926838 = 0;
      L6: do {
          L7: while (true) {
          if (!(res_12926838 <= colontmp__12926837)) break L7;
            i_12885009 = res_12926838;
            var row_12885010 = newVNode_10560428(43);
            setAttr_10500105(row_12885010, "class", "row");
            var rown_12885011 = vnodeToDom_11470073(row_12885010, null);
            L8: do {
              var j_12885017 = 0;
              var res_12926832 = count1_12880111;
              L9: do {
                  L10: while (true) {
                  if (!(res_12926832 <= count2_12880113)) break L10;
                    j_12885017 = res_12926832;
                    L11: do {
                      if (eqStrings(prev_12880114, data_12880101.Field0[chckIndx(j_12885017, 0, (data_12880101.Field0).length-1)].link)) {
                      break L11;
                      }
                      
                      prev_12880114 = nimCopy(null, data_12880101.Field0[chckIndx(j_12885017, 0, (data_12880101.Field0).length-1)].link, NTI1188013);
                      var model_12885020 = newVNode_10560428(43);
                      var name_12885021 = newVNode_10560428(31);
                      var site_12885022 = newVNode_10560428(31);
                      var dimension_12885023 = newVNode_10560428(31);
                      var img_12885024 = newVNode_10560428(75);
                      var link_12885025 = newVNode_10560428(44);
                      setAttr_10500105(link_12885025, "href", toJSStr(comlink_12880075(data_12880101.Field0[chckIndx(j_12885017, 0, (data_12880101.Field0).length-1)].link, data_12880101.Field0[chckIndx(j_12885017, 0, (data_12880101.Field0).length-1)].website)));
                      setAttr_10500105(img_12885024, "src", toJSStr(comlink_12880075(data_12880101.Field0[chckIndx(j_12885017, 0, (data_12880101.Field0).length-1)].img, data_12880101.Field0[chckIndx(j_12885017, 0, (data_12880101.Field0).length-1)].website)));
                      var modeln_12885026 = vnodeToDom_11470073(model_12885020, null);
                      var linkn_12885027 = vnodeToDom_11470073(link_12885025, null);
                      var imgn_12885028 = vnodeToDom_11470073(img_12885024, null);
                      var siten_12885029 = vnodeToDom_11470073(site_12885022, null);
                      siten_12885029.innerText = toCstr_12880057(data_12880101.Field0[chckIndx(j_12885017, 0, (data_12880101.Field0).length-1)].website);
                      var namen_12885030 = vnodeToDom_11470073(name_12885021, null);
                      namen_12885030.innerText = toCstr_12880057(data_12880101.Field0[chckIndx(j_12885017, 0, (data_12880101.Field0).length-1)].name);
                      var dimensionn_12885031 = vnodeToDom_11470073(dimension_12885023, null);
                      dimensionn_12885031.innerText = toCstr_12880057(data_12880101.Field0[chckIndx(j_12885017, 0, (data_12880101.Field0).length-1)].dimension);
                      modeln_12885026.appendChild(imgn_12885028);
                      modeln_12885026.appendChild(namen_12885030);
                      modeln_12885026.appendChild(siten_12885029);
                      modeln_12885026.appendChild(dimensionn_12885031);
                      linkn_12885027.appendChild(modeln_12885026);
                      rown_12885011.appendChild(linkn_12885027);
                    } while(false);
                    res_12926832 = addInt(res_12926832, 1);
                  }
              } while(false);
            } while(false);
            count1_12880111 = addInt(count2_12880113, 1);
            count2_12880113 = addInt(count1_12880111, 3);
            if (!(HEX3DHEX3D_12890018(rown_12885011.children, []))) {
            canvas_12880103.appendChild(rown_12885011);
            }
            
            res_12926838 = addInt(res_12926838, 1);
          }
      } while(false);
    } while(false);
    }
    else {
      var row_12891045 = newVNode_10560428(43);
      setAttr_10500105(row_12891045, "class", "row");
      var rown_12891046 = vnodeToDom_11470073(row_12891045, null);
      L12: do {
        var j_12891052 = 0;
        var res_12926845 = count1_12880111;
        L13: do {
            L14: while (true) {
            if (!(res_12926845 <= count2_12880113)) break L14;
              j_12891052 = res_12926845;
              L15: do {
                if (eqStrings(prev_12880114, data_12880101.Field0[chckIndx(j_12891052, 0, (data_12880101.Field0).length-1)].link)) {
                break L15;
                }
                
                prev_12880114 = nimCopy(null, data_12880101.Field0[chckIndx(j_12891052, 0, (data_12880101.Field0).length-1)].link, NTI1188013);
                var model_12891055 = newVNode_10560428(43);
                var name_12891056 = newVNode_10560428(31);
                var site_12891057 = newVNode_10560428(31);
                var dimension_12891058 = newVNode_10560428(31);
                var img_12891059 = newVNode_10560428(75);
                var link_12891060 = newVNode_10560428(44);
                setAttr_10500105(link_12891060, "href", toJSStr(comlink_12880075(data_12880101.Field0[chckIndx(j_12891052, 0, (data_12880101.Field0).length-1)].link, data_12880101.Field0[chckIndx(j_12891052, 0, (data_12880101.Field0).length-1)].website)));
                setAttr_10500105(img_12891059, "src", toJSStr(comlink_12880075(data_12880101.Field0[chckIndx(j_12891052, 0, (data_12880101.Field0).length-1)].img, data_12880101.Field0[chckIndx(j_12891052, 0, (data_12880101.Field0).length-1)].website)));
                var modeln_12891061 = vnodeToDom_11470073(model_12891055, null);
                var linkn_12891062 = vnodeToDom_11470073(link_12891060, null);
                var imgn_12891063 = vnodeToDom_11470073(img_12891059, null);
                var siten_12891064 = vnodeToDom_11470073(site_12891057, null);
                siten_12891064.innerText = toCstr_12880057(data_12880101.Field0[chckIndx(j_12891052, 0, (data_12880101.Field0).length-1)].website);
                var namen_12891065 = vnodeToDom_11470073(name_12891056, null);
                namen_12891065.innerText = toCstr_12880057(data_12880101.Field0[chckIndx(j_12891052, 0, (data_12880101.Field0).length-1)].name);
                var dimensionn_12891066 = vnodeToDom_11470073(dimension_12891058, null);
                dimensionn_12891066.innerText = toCstr_12880057(data_12880101.Field0[chckIndx(j_12891052, 0, (data_12880101.Field0).length-1)].dimension);
                modeln_12891061.appendChild(imgn_12891063);
                modeln_12891061.appendChild(namen_12891065);
                modeln_12891061.appendChild(siten_12891064);
                modeln_12891061.appendChild(dimensionn_12891066);
                linkn_12891062.appendChild(modeln_12891061);
                rown_12891046.appendChild(linkn_12891062);
                count1_12880111 = addInt(count2_12880113, 1);
                count2_12880113 = addInt(count1_12880111, 3);
                if (!(HEX3DHEX3D_12890018(rown_12891046.children, []))) {
                canvas_12880103.appendChild(rown_12891046);
                }
                
              } while(false);
              res_12926845 = addInt(res_12926845, 1);
            }
        } while(false);
      } while(false);
    }
    

  
}
function innerText_12230615(n_12230617) {
    function worker_12230619(res_12230622, res_12230622_Idx, n_12230623) {
          var Tmp1;
            var Tmp3;

        switch (n_12230623.k) {
        case 0:
        case 4:
          var Tmp1 = n_12230623;
          if (ConstSet39[Tmp1.k]===undefined) { raiseFieldError(makeNimstrLit("\'fText\' is not accessible using discriminant \'k\' of type \'XmlNodeObj\'")); }
          res_12230622[res_12230622_Idx].push.apply(res_12230622[res_12230622_Idx], Tmp1.fText);;
          break;
        case 2:
          L2: do {
            var sub_12240214 = null;
            var sub_12240214_Idx = 0;
            var colontmp__12926911 = [];
            var Tmp3 = n_12230623;
            if (ConstSet40[Tmp3.k]===undefined) { raiseFieldError(makeNimstrLit("\'s\' is not accessible using discriminant \'k\' of type \'XmlNodeObj\'")); }
            colontmp__12926911 = Tmp3.s;
            var i_12926912 = 0;
            var L_12926913 = (colontmp__12926911).length;
            L4: do {
                L5: while (true) {
                if (!(i_12926912 < L_12926913)) break L5;
                  sub_12240214 = colontmp__12926911; sub_12240214_Idx = chckIndx(i_12926912, 0, (colontmp__12926911).length-1);
                  worker_12230619(res_12230622, res_12230622_Idx, sub_12240214[sub_12240214_Idx]);
                  i_12926912 = addInt(i_12926912, 1);
                  if (!(((colontmp__12926911).length == L_12926913))) {
                  failedAssertImpl_1305480(makeNimstrLit("iterators.nim(204, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                  }
                  
                }
            } while(false);
          } while(false);
          break;
        default: 
          break;
        }

      
    }

  var result_12230618 = [[]];

    result_12230618[0] = nimCopy(null, [], NTI1188013);
    worker_12230619(result_12230618, 0, n_12230617);

  return result_12230618[0];

}
function toInt_1216693(f_1216695) {
    var Tmp1;

  var result_1216696 = 0;

    if ((0.0 <= f_1216695)) {
    Tmp1 = (((f_1216695 + 5.0000000000000000e-01))|0);
    }
    else {
    Tmp1 = (((f_1216695 - 5.0000000000000000e-01))|0);
    }
    
    result_1216696 = Tmp1;

  return result_1216696;

}
function toFloat_1216659(i_1216661) {
  var result_1216662 = 0.0;

    result_1216662 = i_1216661;

  return result_1216662;

}
function HEX2F_1555648(x_1555650, y_1555651) {
  var result_1555652 = 0.0;

    result_1555652 = (toFloat_1216659(x_1555650) / toFloat_1216659(y_1555651));

  return result_1555652;

}
function parseclara_12855102(data_12855104, getcount_12855105) {
  var result_12855110 = {Field0: [], Field1: 0};

    var xmldata_12855111 = parseHtml_12600061(data_12855104);
    var count_12855112 = 0;
    if ((getcount_12855105 == true)) {
    L1: do {
      var item_12855121 = null;
      var item_12855121_Idx = 0;
      var colontmp__12926901 = [];
      colontmp__12926901 = findAll_12390032(xmldata_12855111, makeNimstrLit("ul"), false);
      var i_12926902 = 0;
      var L_12926903 = (colontmp__12926901).length;
      L2: do {
          L3: while (true) {
          if (!(i_12926902 < L_12926903)) break L3;
            item_12855121 = colontmp__12926901; item_12855121_Idx = chckIndx(i_12926902, 0, (colontmp__12926901).length-1);
            if (eqStrings(attr_12345221(item_12855121[item_12855121_Idx], makeNimstrLit("class")), makeNimstrLit("pagination"))) {
            var content_12855126 = findAll_12390032(item_12855121[item_12855121_Idx], makeNimstrLit("li"), false);
            var total_12860011 = nsuParseInt(HEX5BHEX5D_12855005(nsuSplitString(innerText_12230615(child_12365063(content_12855126[chckIndx(1, 0, (content_12855126).length-1)], makeNimstrLit("span"))), makeNimstrLit(" "), -1), 1));
            count_12855112 = toInt_1216693(HEX2F_1555648(total_12860011, 50));
            break L1;
            }
            
            i_12926902 = addInt(i_12926902, 1);
            if (!(((colontmp__12926901).length == L_12926903))) {
            failedAssertImpl_1305480(makeNimstrLit("iterators.nim(204, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while(false);
    } while(false);
    }
    
    L4: do {
      var item_12860020 = null;
      var item_12860020_Idx = 0;
      var colontmp__12926906 = [];
      colontmp__12926906 = findAll_12390032(xmldata_12855111, makeNimstrLit("a"), false);
      var i_12926907 = 0;
      var L_12926908 = (colontmp__12926906).length;
      L5: do {
          L6: while (true) {
          if (!(i_12926907 < L_12926908)) break L6;
            item_12860020 = colontmp__12926906; item_12860020_Idx = chckIndx(i_12926907, 0, (colontmp__12926906).length-1);
            if (eqStrings(attr_12345221(item_12860020[item_12860020_Idx], makeNimstrLit("class")), makeNimstrLit("thumbnail"))) {
            var imagenode_12860026 = child_12365063(child_12365063(item_12860020[item_12860020_Idx], makeNimstrLit("div")), makeNimstrLit("img"));
            var info_12860027 = ({img: [], name: [], website: [], link: [], dimension: []});
            info_12860027.link = nimCopy(null, attr_12345221(item_12860020[item_12860020_Idx], makeNimstrLit("href")), NTI1188013);
            info_12860027.dimension = nimCopy(null, makeNimstrLit("3d"), NTI1188013);
            info_12860027.website = nimCopy(null, makeNimstrLit("clara.io"), NTI1188013);
            info_12860027.img = nimCopy(null, attr_12345221(imagenode_12860026, makeNimstrLit("src")), NTI1188013);
            info_12860027.name = nimCopy(null, attr_12345221(imagenode_12860026, makeNimstrLit("title")), NTI1188013);
            var Tmp7 = nimCopy(null, info_12860027, NTI12826015);
            result_12855110.Field0.push(Tmp7);;
            }
            
            i_12926907 = addInt(i_12926907, 1);
            if (!(((colontmp__12926906).length == L_12926908))) {
            failedAssertImpl_1305480(makeNimstrLit("iterators.nim(204, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while(false);
    } while(false);
    result_12855110.Field1 = count_12855112;
    condition_12826032[0] = true;

  return result_12855110;

}
function HEX5BHEX5D_12865005(s_12865010, i_12865011) {
  var result_12865013 = null;
  var result_12865013_Idx = 0;

    result_12865013 = s_12865010; result_12865013_Idx = chckIndx(subInt((s_12865010).length, i_12865011), 0, (s_12865010).length-1);

  return [result_12865013, result_12865013_Idx];

}
function parseblendswap_12860052(data_12860054, getcount_12860055) {
    var Tmp2;
    var Tmp6;

  var result_12860060 = {Field0: [], Field1: 0};

    var xmldata_12860061 = parseHtml_12600061(data_12860054);
    var count_12860062 = 0;
    if ((getcount_12860055 == true)) {
    var countcan_12860064 = [];
++excHandler;
    Tmp2 = framePtr;
    try {
    L3: do {
      var item_12860073 = null;
      var item_12860073_Idx = 0;
      var colontmp__12926919 = [];
      colontmp__12926919 = findAll_12390032(xmldata_12860061, makeNimstrLit("a"), false);
      var i_12926920 = 0;
      var L_12926921 = (colontmp__12926919).length;
      L4: do {
          L5: while (true) {
          if (!(i_12926920 < L_12926921)) break L5;
            item_12860073 = colontmp__12926919; item_12860073_Idx = chckIndx(i_12926920, 0, (colontmp__12926919).length-1);
            if (eqStrings(attr_12345221(item_12860073[item_12860073_Idx], makeNimstrLit("class")), makeNimstrLit("page-link page-number"))) {
            countcan_12860064.push(item_12860073[item_12860073_Idx]);;
            }
            
            i_12926920 = addInt(i_12926920, 1);
            if (!(((colontmp__12926919).length == L_12926921))) {
            failedAssertImpl_1305480(makeNimstrLit("iterators.nim(204, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while(false);
    } while(false);
    count_12860062 = nsuParseInt(innerText_12230615((Tmp6 = HEX5BHEX5D_12865005(countcan_12860064, 1), Tmp6)[0][Tmp6[1]]));
--excHandler;
} catch (EXC) {
 var prevJSError = lastJSError;
 lastJSError = EXC;
 --excHandler;
    framePtr = Tmp2;
    lastJSError = prevJSError;
    } finally {
    framePtr = Tmp2;
    }
    }
    
    L7: do {
      var item_12865041 = null;
      var item_12865041_Idx = 0;
      var colontmp__12926925 = [];
      colontmp__12926925 = findAll_12390032(xmldata_12860061, makeNimstrLit("div"), false);
      var i_12926926 = 0;
      var L_12926927 = (colontmp__12926925).length;
      L8: do {
          L9: while (true) {
          if (!(i_12926926 < L_12926927)) break L9;
            item_12865041 = colontmp__12926925; item_12865041_Idx = chckIndx(i_12926926, 0, (colontmp__12926925).length-1);
            if (eqStrings(attr_12345221(item_12865041[item_12865041_Idx], makeNimstrLit("class")), makeNimstrLit("card"))) {
            var info_12865045 = ({img: [], name: [], website: [], link: [], dimension: []});
            var linknode_12865047 = child_12365063(item_12865041[item_12865041_Idx], makeNimstrLit("a"));
            if (!((linknode_12865047 == null))) {
            info_12865045.link = nimCopy(null, attr_12345221(linknode_12865047, makeNimstrLit("href")), NTI1188013);
            info_12865045.dimension = nimCopy(null, makeNimstrLit("3d"), NTI1188013);
            info_12865045.website = nimCopy(null, makeNimstrLit("blendswap.com"), NTI1188013);
            info_12865045.name = nimCopy(null, attr_12345221(child_12365063(linknode_12865047, makeNimstrLit("img")), makeNimstrLit("title")), NTI1188013);
            info_12865045.img = nimCopy(null, attr_12345221(child_12365063(linknode_12865047, makeNimstrLit("img")), makeNimstrLit("src")), NTI1188013);
            var Tmp10 = nimCopy(null, info_12865045, NTI12826015);
            result_12860060.Field0.push(Tmp10);;
            }
            
            }
            
            i_12926926 = addInt(i_12926926, 1);
            if (!(((colontmp__12926925).length == L_12926927))) {
            failedAssertImpl_1305480(makeNimstrLit("iterators.nim(204, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while(false);
    } while(false);
    result_12860060.Field1 = count_12860062;
    condition_12826032[0] = true;

  return result_12860060;

}
function parse3dmodelhaven_12870047(data_12870049, getcount_12870050) {
  var result_12870055 = {Field0: [], Field1: 0};

    var xmldata_12870056 = parseHtml_12600061(data_12870049);
    var count_12870057 = 0;
    L1: do {
      var item_12870066 = null;
      var item_12870066_Idx = 0;
      var colontmp__12926940 = [];
      colontmp__12926940 = findAll_12390032(xmldata_12870056, makeNimstrLit("div"), false);
      var i_12926941 = 0;
      var L_12926942 = (colontmp__12926940).length;
      L2: do {
          L3: while (true) {
          if (!(i_12926941 < L_12926942)) break L3;
            item_12870066 = colontmp__12926940; item_12870066_Idx = chckIndx(i_12926941, 0, (colontmp__12926940).length-1);
            if (eqStrings(attr_12345221(item_12870066[item_12870066_Idx], makeNimstrLit("id")), makeNimstrLit("item-grid"))) {
            var info_12870071 = findAll_12390032(item_12870066[item_12870066_Idx], makeNimstrLit("a"), false);
            L4: do {
              var each_12870079 = null;
              var each_12870079_Idx = 0;
              var i_12926937 = 0;
              var L_12926938 = (info_12870071).length;
              L5: do {
                  L6: while (true) {
                  if (!(i_12926937 < L_12926938)) break L6;
                    each_12870079 = info_12870071; each_12870079_Idx = chckIndx(i_12926937, 0, (info_12870071).length-1);
                    var infos_12870080 = ({img: [], name: [], website: [], link: [], dimension: []});
                    infos_12870080.link = nimCopy(null, attr_12345221(each_12870079[each_12870079_Idx], makeNimstrLit("href")), NTI1188013);
                    infos_12870080.dimension = nimCopy(null, makeNimstrLit("3d"), NTI1188013);
                    infos_12870080.website = nimCopy(null, makeNimstrLit("3dmodelhaven.com"), NTI1188013);
                    L7: do {
                      var i_12870090 = null;
                      var i_12870090_Idx = 0;
                      var colontmp__12926933 = [];
                      colontmp__12926933 = findAll_12390032(each_12870079[each_12870079_Idx], makeNimstrLit("img"), false);
                      var i_12926934 = 0;
                      var L_12926935 = (colontmp__12926933).length;
                      L8: do {
                          L9: while (true) {
                          if (!(i_12926934 < L_12926935)) break L9;
                            i_12870090 = colontmp__12926933; i_12870090_Idx = chckIndx(i_12926934, 0, (colontmp__12926933).length-1);
                            if (eqStrings(attr_12345221(i_12870090[i_12870090_Idx], makeNimstrLit("class")), makeNimstrLit("thumbnail"))) {
                            infos_12870080.img = nimCopy(null, attr_12345221(i_12870090[i_12870090_Idx], makeNimstrLit("src")), NTI1188013);
                            infos_12870080.name = nimCopy(null, attr_12345221(i_12870090[i_12870090_Idx], makeNimstrLit("alt")), NTI1188013);
                            }
                            
                            i_12926934 = addInt(i_12926934, 1);
                            if (!(((colontmp__12926933).length == L_12926935))) {
                            failedAssertImpl_1305480(makeNimstrLit("iterators.nim(204, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                            }
                            
                          }
                      } while(false);
                    } while(false);
                    var Tmp10 = nimCopy(null, infos_12870080, NTI12826015);
                    result_12870055.Field0.push(Tmp10);;
                    i_12926937 = addInt(i_12926937, 1);
                    if (!(((info_12870071).length == L_12926938))) {
                    failedAssertImpl_1305480(makeNimstrLit("iterators.nim(204, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                    }
                    
                  }
              } while(false);
            } while(false);
            }
            
            i_12926941 = addInt(i_12926941, 1);
            if (!(((colontmp__12926940).length == L_12926942))) {
            failedAssertImpl_1305480(makeNimstrLit("iterators.nim(204, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while(false);
    } while(false);
    result_12870055.Field1 = count_12870057;
    condition_12826032[0] = true;

  return result_12870055;

}
function parseopengameart_12870117(data_12870119, getcount_12870120) {
              var Tmp10;

  var result_12870125 = {Field0: [], Field1: 0};

    var xmldata_12870126 = parseHtml_12600061(data_12870119);
    var count_12870127 = 0;
    if ((getcount_12870120 == true)) {
    L1: do {
      var item_12870136 = null;
      var item_12870136_Idx = 0;
      var colontmp__12926947 = [];
      colontmp__12926947 = findAll_12390032(xmldata_12870126, makeNimstrLit("a"), false);
      var i_12926948 = 0;
      var L_12926949 = (colontmp__12926947).length;
      L2: do {
          L3: while (true) {
          if (!(i_12926948 < L_12926949)) break L3;
            item_12870136 = colontmp__12926947; item_12870136_Idx = chckIndx(i_12926948, 0, (colontmp__12926947).length-1);
            L4: do {
              if (eqStrings(attr_12345221(item_12870136[item_12870136_Idx], makeNimstrLit("title")), makeNimstrLit("Go to last page"))) {
              count_12870127 = nsuParseInt(HEX5BHEX5D_12855005(nsuSplitString(attr_12345221(item_12870136[item_12870136_Idx], makeNimstrLit("href")), makeNimstrLit("="), -1), 1));
              break L1;
              }
              else {
                break L4;
              }
              
            } while(false);
            i_12926948 = addInt(i_12926948, 1);
            if (!(((colontmp__12926947).length == L_12926949))) {
            failedAssertImpl_1305480(makeNimstrLit("iterators.nim(204, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while(false);
    } while(false);
    }
    
    L5: do {
      var item_12875019 = null;
      var item_12875019_Idx = 0;
      var colontmp__12926953 = [];
      colontmp__12926953 = findAll_12390032(xmldata_12870126, makeNimstrLit("div"), false);
      var i_12926954 = 0;
      var L_12926955 = (colontmp__12926953).length;
      L6: do {
          L7: while (true) {
          if (!(i_12926954 < L_12926955)) break L7;
            item_12875019 = colontmp__12926953; item_12875019_Idx = chckIndx(i_12926954, 0, (colontmp__12926953).length-1);
            L8: do {
              if (eqStrings(attr_12345221(item_12875019[item_12875019_Idx], makeNimstrLit("class")), makeNimstrLit("ds-1col node node-art view-mode-art_preview clearfix"))) {
++excHandler;
              Tmp10 = framePtr;
              try {
              var info_12875023 = ({img: [], name: [], website: [], link: [], dimension: []});
              var infos_12875025 = findAll_12390032(item_12875019[item_12875019_Idx], makeNimstrLit("a"), false);
              info_12875023.name = nimCopy(null, innerText_12230615(infos_12875025[chckIndx(0, 0, (infos_12875025).length-1)]), NTI1188013);
              if ((infos_12875025[chckIndx(1, 0, (infos_12875025).length-1)] == null)) {
              info_12875023.link = nimCopy(null, attr_12345221(infos_12875025[chckIndx(0, 0, (infos_12875025).length-1)], makeNimstrLit("href")), NTI1188013);
              info_12875023.img = nimCopy(null, attr_12345221(child_12365063(infos_12875025[chckIndx(0, 0, (infos_12875025).length-1)], makeNimstrLit("img")), makeNimstrLit("src")), NTI1188013);
              }
              else {
                info_12875023.link = nimCopy(null, attr_12345221(infos_12875025[chckIndx(1, 0, (infos_12875025).length-1)], makeNimstrLit("href")), NTI1188013);
                info_12875023.img = nimCopy(null, attr_12345221(child_12365063(infos_12875025[chckIndx(1, 0, (infos_12875025).length-1)], makeNimstrLit("img")), makeNimstrLit("src")), NTI1188013);
              }
              
              info_12875023.dimension = nimCopy(null, makeNimstrLit("2d"), NTI1188013);
              info_12875023.website = nimCopy(null, makeNimstrLit("opengameart.org"), NTI1188013);
              var Tmp11 = nimCopy(null, info_12875023, NTI12826015);
              result_12870125.Field0.push(Tmp11);;
--excHandler;
} catch (EXC) {
 var prevJSError = lastJSError;
 lastJSError = EXC;
 --excHandler;
              framePtr = Tmp10;
              break L8;
              lastJSError = prevJSError;
              } finally {
              framePtr = Tmp10;
              }
              }
              
            } while(false);
            i_12926954 = addInt(i_12926954, 1);
            if (!(((colontmp__12926953).length == L_12926955))) {
            failedAssertImpl_1305480(makeNimstrLit("iterators.nim(204, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while(false);
    } while(false);
    result_12870125.Field1 = count_12870127;
    condition_12826032[0] = true;

  return result_12870125;

}
function parsegameart2d_12875062(data_12875064, keyword_12875065) {
  var result_12875070 = {Field0: [], Field1: 0};

    var xmldata_12875071 = parseHtml_12600061(data_12875064);
    var count_12875072 = 0;
    L1: do {
      var item_12875081 = null;
      var item_12875081_Idx = 0;
      var colontmp__12926959 = [];
      colontmp__12926959 = findAll_12390032(xmldata_12875071, makeNimstrLit("div"), false);
      var i_12926960 = 0;
      var L_12926961 = (colontmp__12926959).length;
      L2: do {
          L3: while (true) {
          if (!(i_12926960 < L_12926961)) break L3;
            item_12875081 = colontmp__12926959; item_12875081_Idx = chckIndx(i_12926960, 0, (colontmp__12926959).length-1);
            L4: do {
              if (eqStrings(attr_12345221(item_12875081[item_12875081_Idx], makeNimstrLit("class")), makeNimstrLit("galleryInnerImageHolder"))) {
              var linknode_12875086 = child_12365063(item_12875081[item_12875081_Idx], makeNimstrLit("a"));
              var name_12875088 = attr_12345221(linknode_12875086, makeNimstrLit("title"));
              if (!(contains_10175277(nsuToLowerAsciiStr(name_12875088), nsuToLowerAsciiStr(keyword_12875065)))) {
              break L4;
              }
              
              var info_12875090 = ({img: [], name: [], website: [], link: [], dimension: []});
              info_12875090.link = nimCopy(null, attr_12345221(linknode_12875086, makeNimstrLit("href")), NTI1188013);
              info_12875090.name = nimCopy(null, name_12875088, NTI1188013);
              info_12875090.website = nimCopy(null, makeNimstrLit("gameart2d.com"), NTI1188013);
              info_12875090.dimension = nimCopy(null, makeNimstrLit("2d"), NTI1188013);
              info_12875090.img = nimCopy(null, attr_12345221(child_12365063(linknode_12875086, makeNimstrLit("img")), makeNimstrLit("src")), NTI1188013);
              var Tmp5 = nimCopy(null, info_12875090, NTI12826015);
              result_12875070.Field0.push(Tmp5);;
              }
              
            } while(false);
            i_12926960 = addInt(i_12926960, 1);
            if (!(((colontmp__12926959).length == L_12926961))) {
            failedAssertImpl_1305480(makeNimstrLit("iterators.nim(204, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while(false);
    } while(false);
    result_12875070.Field1 = count_12875072;

  return result_12875070;

}
function nsuStrip(s_10365118, leading_10365119, trailing_10365120, chars_10365122) {
          var Tmp5;

  var result_10365123 = [];

    var first_10365125 = 0;
    var last_10365126 = subInt((s_10365118).length, 1);
    if (leading_10365119) {
    L1: do {
        L2: while (true) {
        if (!((first_10365125 <= last_10365126) && (chars_10365122[s_10365118[chckIndx(first_10365125, 0, (s_10365118).length-1)]] != undefined))) break L2;
          first_10365125 = addInt(first_10365125, 1);
        }
    } while(false);
    }
    
    if (trailing_10365120) {
    L3: do {
        L4: while (true) {
          if (!(0 <= last_10365126)) Tmp5 = false; else {            Tmp5 = (chars_10365122[s_10365118[chckIndx(last_10365126, 0, (s_10365118).length-1)]] != undefined);          }        if (!Tmp5) break L4;
          last_10365126 = subInt(last_10365126, 1);
        }
    } while(false);
    }
    
    result_10365123 = nimCopy(null, substr_1571022(s_10365118, first_10365125, last_10365126), NTI1188013);

  return result_10365123;

}
function parsecraftpix_12875115(data_12875117, getcount_12875118) {
            var Tmp7;

  var result_12875123 = {Field0: [], Field1: 0};

    var xmldata_12875124 = parseHtml_12600061(data_12875117);
    var count_12875125 = 0;
    if ((getcount_12875118 == true)) {
    L1: do {
      var item_12875134 = null;
      var item_12875134_Idx = 0;
      var colontmp__12926965 = [];
      colontmp__12926965 = findAll_12390032(xmldata_12875124, makeNimstrLit("a"), false);
      var i_12926966 = 0;
      var L_12926967 = (colontmp__12926965).length;
      L2: do {
          L3: while (true) {
          if (!(i_12926966 < L_12926967)) break L3;
            item_12875134 = colontmp__12926965; item_12875134_Idx = chckIndx(i_12926966, 0, (colontmp__12926965).length-1);
            if (eqStrings(attr_12345221(item_12875134[item_12875134_Idx], makeNimstrLit("class")), makeNimstrLit("last"))) {
            var link_12875139 = attr_12345221(item_12875134[item_12875134_Idx], makeNimstrLit("href"));
            count_12875125 = nsuParseInt(HEX5BHEX5D_12855005(nsuSplitString(link_12875139, makeNimstrLit("/"), -1), 2));
            break L1;
            }
            
            i_12926966 = addInt(i_12926966, 1);
            if (!(((colontmp__12926965).length == L_12926967))) {
            failedAssertImpl_1305480(makeNimstrLit("iterators.nim(204, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while(false);
    } while(false);
    }
    
    L4: do {
      var item_12880019 = null;
      var item_12880019_Idx = 0;
      var colontmp__12926970 = [];
      colontmp__12926970 = findAll_12390032(xmldata_12875124, makeNimstrLit("div"), false);
      var i_12926971 = 0;
      var L_12926972 = (colontmp__12926970).length;
      L5: do {
          L6: while (true) {
          if (!(i_12926971 < L_12926972)) break L6;
            item_12880019 = colontmp__12926970; item_12880019_Idx = chckIndx(i_12926971, 0, (colontmp__12926970).length-1);
            if (eqStrings(attr_12345221(item_12880019[item_12880019_Idx], makeNimstrLit("class")), makeNimstrLit("blog-grid-item"))) {
            var variant_12880025 = innerText_12230615(HEX5BHEX5D_12275473(child_12365063(item_12880019[item_12880019_Idx], makeNimstrLit("div")), 2));
            if (eqStrings(nsuStrip(variant_12880025, true, true, ConstSet41), makeNimstrLit("free"))) {
            var info_12880028 = ({img: [], name: [], website: [], link: [], dimension: []});
            info_12880028.website = nimCopy(null, makeNimstrLit("craftpix.net"), NTI1188013);
            info_12880028.dimension = nimCopy(null, makeNimstrLit("2d"), NTI1188013);
            var linknode_12880030 = child_12365063(item_12880019[item_12880019_Idx], makeNimstrLit("a"));
            info_12880028.name = nimCopy(null, attr_12345221(linknode_12880030, makeNimstrLit("title")), NTI1188013);
            info_12880028.link = nimCopy(null, attr_12345221(linknode_12880030, makeNimstrLit("href")), NTI1188013);
            var imgnode_12880034 = findAll_12390032(item_12880019[item_12880019_Idx], makeNimstrLit("img"), false);
            info_12880028.img = nimCopy(null, (Tmp7 = nsuSplitString(attr_12345221(imgnode_12880034[chckIndx(0, 0, (imgnode_12880034).length-1)], makeNimstrLit("data-srcset")), makeNimstrLit(" "), -1), Tmp7)[chckIndx(0, 0, (Tmp7).length-1)], NTI1188013);
            var Tmp8 = nimCopy(null, info_12880028, NTI12826015);
            result_12875123.Field0.push(Tmp8);;
            }
            
            }
            
            i_12926971 = addInt(i_12926971, 1);
            if (!(((colontmp__12926970).length == L_12926972))) {
            failedAssertImpl_1305480(makeNimstrLit("iterators.nim(204, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while(false);
    } while(false);
    result_12875123.Field1 = count_12875125;
    condition_12826032[0] = true;

  return result_12875123;

}
function HEX5BHEX5DHEX3D_12900003(s_12900008, i_12900009, x_12900010) {
    s_12900008[chckIndx(subInt((s_12900008).length, i_12900009), 0, (s_12900008).length-1)] = nimCopy(null, x_12900010, NTI1188013);

  
}
function nsuRemoveSuffixCharSet(s_10080054, s_10080054_Idx, chars_10080056) {
          var Tmp3;

  BeforeRet: do {
    if (((s_10080054[s_10080054_Idx]).length == 0)) {
    break BeforeRet;
    }
    
    var last_10080058 = ((s_10080054[s_10080054_Idx]).length-1);
    L1: do {
        L2: while (true) {
          if (!(-1 < last_10080058)) Tmp3 = false; else {            Tmp3 = (chars_10080056[s_10080054[s_10080054_Idx][chckIndx(last_10080058, 0, (s_10080054[s_10080054_Idx]).length-1)]] != undefined);          }        if (!Tmp3) break L2;
          last_10080058 = subInt(last_10080058, 1);
        }
    } while(false);
    (s_10080054[s_10080054_Idx].length = chckRange(addInt(last_10080058, 1), 0, 2147483647));
  } while (false);

  
}
function nsuRemoveSuffixChar(s_10090029, s_10090029_Idx, c_10090030) {
    nsuRemoveSuffixCharSet(s_10090029, s_10090029_Idx, setConstr(c_10090030));

  
}
function refineurl_12895053(url_12895055) {
  var result_12895056 = [[]];

    var url_12895057 = nsuSplitString(url_12895055, makeNimstrLit("/"), -1);
    HEX5BHEX5DHEX3D_12900003(url_12895057, 3, cstrToNimstr((pos_12826031[0])+""));
    L1: do {
      var item_12910214 = null;
      var item_12910214_Idx = 0;
      var i_12926979 = 0;
      var L_12926980 = (url_12895057).length;
      L2: do {
          L3: while (true) {
          if (!(i_12926979 < L_12926980)) break L3;
            item_12910214 = url_12895057; item_12910214_Idx = chckIndx(i_12926979, 0, (url_12895057).length-1);
            result_12895056[0].push.apply(result_12895056[0], (item_12910214[item_12910214_Idx] || []).concat(makeNimstrLit("/") || []));;
            i_12926979 = addInt(i_12926979, 1);
            if (!(((url_12895057).length == L_12926980))) {
            failedAssertImpl_1305480(makeNimstrLit("iterators.nim(204, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while(false);
    } while(false);
    nsuRemoveSuffixChar(result_12895056, 0, 47);

  return result_12895056[0];

}
function getdata_12910230(info_12910233, url_12910234, keyword_12910235, page_12910236) {
              var Tmp6;
                function HEX3Aanonymous_12910249(resolve_12910253) {
                    function HEX3Aanonymous_12910254(status_12910256, resp_12910257) {
                        if ((status_12910256 == 200)) {
                        var data_12910259 = parse3dexport_12850275(cstrToNimstr(resp_12910257), true);
                        if ((count_12826030[0] < data_12910259.Field1)) {
                        count_12826030[0] = data_12910259.Field1;
                        }
                        
                        addmodels_12880095(data_12910259, makeNimstrLit("3dexport.com"));
                        }
                        

                      
                    }

                    ajaxGet_12805237(toJSStr(url_12910248), headers_12910239, HEX3Aanonymous_12910254, true, kxi_10897284[0]);

                  
                }
                function HEX3Aanonymous_12910347(resolve_12910351) {
                    function HEX3Aanonymous_12910352(status_12910354, resp_12910355) {
                        if ((status_12910354 == 200)) {
                        var data_12910357 = parseclara_12855102(cstrToNimstr(resp_12910355), true);
                        if ((count_12826030[0] < data_12910357.Field1)) {
                        count_12826030[0] = data_12910357.Field1;
                        }
                        
                        addmodels_12880095(data_12910357, makeNimstrLit("clara.io"));
                        }
                        

                      
                    }

                    ajaxGet_12805237(toJSStr(url_12910248), headers_12910239, HEX3Aanonymous_12910352, true, kxi_10897284[0]);

                  
                }
                function HEX3Aanonymous_12910385(resolve_12910389) {
                    function HEX3Aanonymous_12910390(status_12910392, resp_12910393) {
                        if ((status_12910392 == 200)) {
                        var data_12910395 = parseblendswap_12860052(cstrToNimstr(resp_12910393), true);
                        if ((count_12826030[0] < data_12910395.Field1)) {
                        count_12826030[0] = data_12910395.Field1;
                        }
                        
                        addmodels_12880095(data_12910395, makeNimstrLit("blendswap.com"));
                        }
                        

                      
                    }

                    ajaxGet_12805237(toJSStr(url_12910248), headers_12910239, HEX3Aanonymous_12910390, true, kxi_10897284[0]);

                  
                }
                function HEX3Aanonymous_12910423(resolve_12910427) {
                    function HEX3Aanonymous_12910428(status_12910430, resp_12910431) {
                        if ((status_12910430 == 200)) {
                        var data_12910433 = parse3dmodelhaven_12870047(cstrToNimstr(resp_12910431), true);
                        if ((count_12826030[0] < data_12910433.Field1)) {
                        count_12826030[0] = data_12910433.Field1;
                        }
                        
                        addmodels_12880095(data_12910433, makeNimstrLit("3dmodelhaven"));
                        }
                        

                      
                    }

                    ajaxGet_12805237(toJSStr(url_12910248), headers_12910239, HEX3Aanonymous_12910428, true, kxi_10897284[0]);

                  
                }
                function HEX3Aanonymous_12910461(resolve_12910465) {
                    function HEX3Aanonymous_12910466(status_12910468, resp_12910469) {
                        if ((status_12910468 == 200)) {
                        var data_12910471 = parseopengameart_12870117(cstrToNimstr(resp_12910469), true);
                        if ((count_12826030[0] < data_12910471.Field1)) {
                        count_12826030[0] = data_12910471.Field1;
                        }
                        
                        addmodels_12880095(data_12910471, makeNimstrLit("opengameart.org"));
                        }
                        

                      
                    }

                    ajaxGet_12805237(toJSStr(url_12910248), headers_12910239, HEX3Aanonymous_12910466, true, kxi_10897284[0]);

                  
                }
                keyword_12910235 = nimCopy(null, keyword_12910235, NTI1188013);
                function HEX3Aanonymous_12910499(resolve_12910503) {
                    function HEX3Aanonymous_12910504(status_12910506, resp_12910507) {
                        if ((status_12910506 == 200)) {
                        var data_12910509 = parsegameart2d_12875062(cstrToNimstr(resp_12910507), keyword_12910235);
                        addmodels_12880095(data_12910509, makeNimstrLit("gameart2d.com"));
                        }
                        

                      
                    }

                    ajaxGet_12805237(toJSStr(url_12910248), headers_12910239, HEX3Aanonymous_12910504, true, kxi_10897284[0]);

                  
                }
                function HEX3Aanonymous_12910537(resolve_12910541) {
                    function HEX3Aanonymous_12910542(status_12910544, resp_12910545) {
                        if ((status_12910544 == 200)) {
                        var data_12910547 = parsecraftpix_12875115(cstrToNimstr(resp_12910545), true);
                        if ((count_12826030[0] < data_12910547.Field1)) {
                        count_12826030[0] = data_12910547.Field1;
                        }
                        
                        addmodels_12880095(data_12910547, makeNimstrLit("craftpix.net"));
                        }
                        

                      
                    }

                    ajaxGet_12805237(toJSStr(url_12910248), headers_12910239, HEX3Aanonymous_12910542, true, kxi_10897284[0]);

                  
                }
                var Tmp12;
                  function HEX3Aanonymous_12910584(resolve_12910588) {
                      function HEX3Aanonymous_12910589(status_12910591, resp_12910592) {
                          if ((status_12910591 == 200)) {
                          var data_12910594 = parse3dexport_12850275(cstrToNimstr(resp_12910592), false);
                          addmodels_12880095(data_12910594, makeNimstrLit("3dexport.com"));
                          }
                          

                        
                      }

                      ajaxGet_12805237(toJSStr(url_12910583), headers_12910239, HEX3Aanonymous_12910589, true, kxi_10897284[0]);

                    
                  }
                  function HEX3Aanonymous_12910622(resolve_12910626) {
                      function HEX3Aanonymous_12910627(status_12910629, resp_12910630) {
                          if ((status_12910629 == 200)) {
                          var data_12910632 = parseclara_12855102(cstrToNimstr(resp_12910630), false);
                          addmodels_12880095(data_12910632, makeNimstrLit("clara.io"));
                          }
                          

                        
                      }

                      ajaxGet_12805237(toJSStr(url_12910583), headers_12910239, HEX3Aanonymous_12910627, true, kxi_10897284[0]);

                    
                  }
                  function HEX3Aanonymous_12910660(resolve_12910664) {
                      function HEX3Aanonymous_12910665(status_12910667, resp_12910668) {
                          if ((status_12910667 == 200)) {
                          var data_12910670 = parseblendswap_12860052(cstrToNimstr(resp_12910668), false);
                          addmodels_12880095(data_12910670, makeNimstrLit("blendswap.com"));
                          }
                          

                        
                      }

                      ajaxGet_12805237(toJSStr(url_12910583), headers_12910239, HEX3Aanonymous_12910665, true, kxi_10897284[0]);

                    
                  }
                  function HEX3Aanonymous_12910698(resolve_12910702) {
                      function HEX3Aanonymous_12910703(status_12910705, resp_12910706) {
                          if ((status_12910705 == 200)) {
                          var data_12910708 = parseopengameart_12870117(cstrToNimstr(resp_12910706), false);
                          addmodels_12880095(data_12910708, makeNimstrLit("opengameart.org"));
                          }
                          

                        
                      }

                      ajaxGet_12805237(toJSStr(url_12910583), headers_12910239, HEX3Aanonymous_12910703, true, kxi_10897284[0]);

                    
                  }
                  function HEX3Aanonymous_12910736(resolve_12910740) {
                      function HEX3Aanonymous_12910741(status_12910743, resp_12910744) {
                          if ((status_12910743 == 200)) {
                          var data_12910746 = parsecraftpix_12875115(cstrToNimstr(resp_12910744), false);
                          addmodels_12880095(data_12910746, makeNimstrLit("craftpix.net"));
                          }
                          

                        
                      }

                      ajaxGet_12805237(toJSStr(url_12910583), headers_12910239, HEX3Aanonymous_12910741, true, kxi_10897284[0]);

                    
                  }

    var headers_12910239 = [];
    if ((page_12910236 == 1)) {
    L1: do {
      var item_12910247 = null;
      var i_12925031 = 0;
      var L_12925032 = (info_12910233).length;
      L2: do {
          L3: while (true) {
          if (!(i_12925031 < L_12925032)) break L3;
            item_12910247 = info_12910233[chckIndx(i_12925031, 0, (info_12910233).length-1)];
            L4: do {
              var url_12910248 = nimCopy(null, url_12910234, NTI1188013);
++excHandler;
              Tmp6 = framePtr;
              try {
              switch (toJSStr(cstrToNimstr(item_12910247.name))) {
              case "3dexport.com":
                url_12910248 = nimCopy(null, (url_12910248 || []).concat(makeNimstrLit("/3dexport.com") || []), NTI1188013);
                var _ = (new Promise(HEX3Aanonymous_12910249));
                break;
              case "clara.io":
                url_12910248 = nimCopy(null, (url_12910248 || []).concat(makeNimstrLit("/clara.io") || []), NTI1188013);
                var _ = (new Promise(HEX3Aanonymous_12910347));
                break;
              case "blendswap.com":
                url_12910248 = nimCopy(null, (url_12910248 || []).concat(makeNimstrLit("/blendswap.com") || []), NTI1188013);
                var _ = (new Promise(HEX3Aanonymous_12910385));
                break;
              case "3dmodelhaven":
                url_12910248 = nimCopy(null, (url_12910248 || []).concat(makeNimstrLit("/3dmodelhaven") || []), NTI1188013);
                var _ = (new Promise(HEX3Aanonymous_12910423));
                break;
              case "opengameart.org":
                url_12910248 = nimCopy(null, (url_12910248 || []).concat(makeNimstrLit("/opengameart.org") || []), NTI1188013);
                var _ = (new Promise(HEX3Aanonymous_12910461));
                break;
              case "gameart2d.com":
                url_12910248 = nimCopy(null, (url_12910248 || []).concat(makeNimstrLit("/gameart2d.com") || []), NTI1188013);
                var _ = (new Promise(HEX3Aanonymous_12910499));
                break;
              case "craftpix.net":
                url_12910248 = nimCopy(null, (url_12910248 || []).concat(makeNimstrLit("/craftpix.net") || []), NTI1188013);
                var _ = (new Promise(HEX3Aanonymous_12910537));
                break;
              default: 
                break L4;
                break;
              }
--excHandler;
} catch (EXC) {
 var prevJSError = lastJSError;
 lastJSError = EXC;
 --excHandler;
              framePtr = Tmp6;
              break L4;
              lastJSError = prevJSError;
              } finally {
              framePtr = Tmp6;
              }
            } while(false);
            i_12925031 = addInt(i_12925031, 1);
            if (!(((info_12910233).length == L_12925032))) {
            failedAssertImpl_1305480(makeNimstrLit("iterators.nim(204, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while(false);
    } while(false);
    }
    else {
      L7: do {
        var item_12910582 = null;
        var i_12925036 = 0;
        var L_12925037 = (info_12910233).length;
        L8: do {
            L9: while (true) {
            if (!(i_12925036 < L_12925037)) break L9;
              item_12910582 = info_12910233[chckIndx(i_12925036, 0, (info_12910233).length-1)];
              L10: do {
                var url_12910583 = nimCopy(null, url_12910234, NTI1188013);
++excHandler;
                Tmp12 = framePtr;
                try {
                switch (toJSStr(cstrToNimstr(item_12910582.name))) {
                case "3dexport.com":
                  url_12910583 = nimCopy(null, (url_12910583 || []).concat(makeNimstrLit("/3dexport.com") || []), NTI1188013);
                  url_12910583 = nimCopy(null, refineurl_12895053(url_12910583), NTI1188013);
                  var _ = (new Promise(HEX3Aanonymous_12910584));
                  break;
                case "clara.io":
                  url_12910583 = nimCopy(null, (url_12910583 || []).concat(makeNimstrLit("/clara.io") || []), NTI1188013);
                  url_12910583 = nimCopy(null, refineurl_12895053(url_12910583), NTI1188013);
                  var _ = (new Promise(HEX3Aanonymous_12910622));
                  break;
                case "blendswap.com":
                  url_12910583 = nimCopy(null, (url_12910583 || []).concat(makeNimstrLit("/blendswap.com") || []), NTI1188013);
                  url_12910583 = nimCopy(null, refineurl_12895053(url_12910583), NTI1188013);
                  var _ = (new Promise(HEX3Aanonymous_12910660));
                  break;
                case "opengameart.org":
                  url_12910583 = nimCopy(null, (url_12910583 || []).concat(makeNimstrLit("/opengameart.org") || []), NTI1188013);
                  url_12910583 = nimCopy(null, refineurl_12895053(url_12910583), NTI1188013);
                  var _ = (new Promise(HEX3Aanonymous_12910698));
                  break;
                case "craftpix.net":
                  url_12910583 = nimCopy(null, (url_12910583 || []).concat(makeNimstrLit("/craftpix.net") || []), NTI1188013);
                  url_12910583 = nimCopy(null, refineurl_12895053(url_12910583), NTI1188013);
                  var _ = (new Promise(HEX3Aanonymous_12910736));
                  break;
                default: 
                  break L10;
                  break;
                }
--excHandler;
} catch (EXC) {
 var prevJSError = lastJSError;
 lastJSError = EXC;
 --excHandler;
                framePtr = Tmp12;
                break L10;
                lastJSError = prevJSError;
                } finally {
                framePtr = Tmp12;
                }
              } while(false);
              i_12925036 = addInt(i_12925036, 1);
              if (!(((info_12910233).length == L_12925037))) {
              failedAssertImpl_1305480(makeNimstrLit("iterators.nim(204, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        } while(false);
      } while(false);
    }
    

  
}
function HEX3Aanonymous_12911053(e_12911055) {
      var Tmp1;
      var Tmp2;
      var Tmp3;

    var model_12911056 = document.getElementById("models");
    var top_12911057 = document.documentElement.scrollTop;
    var limit_12911058 = subInt(document.documentElement.scrollHeight, height_12911014[0]);
    if ((subInt(limit_12911058, toInt_1216693(HEX2F_1555648(height_12911014[0], 4))) < top_12911057)) {
      if (!(pos_12826031[0] < count_12826030[0])) Tmp2 = false; else {        Tmp2 = !(HEX3DHEX3D_12890018(model_12911056.children, []));      }      if (!Tmp2) Tmp1 = false; else {        Tmp1 = (condition_12826032[0] == true);      }    if (Tmp1) {
    pos_12826031[0] = addInt(pos_12826031[0], 1);
    condition_12826032[0] = false;
    getdata_12910230(geturl(), cstrToNimstr(url_12911052[0]), cstrToNimstr(getkeyword()), pos_12826031[0]);
    }
    else {
      if ((count_12826030[0] < pos_12826031[0])) Tmp3 = true; else {        Tmp3 = (pos_12826031[0] == count_12826030[0]);      }    if (Tmp3) {
    var modelcon_12925001 = document.getElementById("modelcon");
    var child_12925002 = document.getElementById("loadimg");
    modelcon_12925001.removeChild(child_12925002);
    }
    }
    }
    

  
}
var url_12911052 = [window.location.href];
getdata_12910230(geturl(), cstrToNimstr(url_12911052[0]), cstrToNimstr(getkeyword()), 1);
window.addEventListener("scroll", HEX3Aanonymous_12911053, true);
function nsuNormalize(s_9470016) {
  var result_9470017 = [];

    result_9470017 = nimCopy(null, mnewString(chckRange((s_9470016).length, 0, 2147483647)), NTI1188013);
    var j_9470019 = 0;
    L1: do {
      var i_9470028 = 0;
      var colontmp__12927037 = 0;
      colontmp__12927037 = subInt((s_9470016).length, 1);
      var res_12927038 = 0;
      L2: do {
          L3: while (true) {
          if (!(res_12927038 <= colontmp__12927037)) break L3;
            i_9470028 = res_12927038;
            if ((ConstSet42[s_9470016[chckIndx(i_9470028, 0, (s_9470016).length-1)]] != undefined)) {
            result_9470017[chckIndx(j_9470019, 0, (result_9470017).length-1)] = chckRange(addInt(s_9470016[chckIndx(i_9470028, 0, (s_9470016).length-1)], 32), 0, 255);
            j_9470019 = addInt(j_9470019, 1);
            }
            else {
            if (!((s_9470016[chckIndx(i_9470028, 0, (s_9470016).length-1)] == 95))) {
            result_9470017[chckIndx(j_9470019, 0, (result_9470017).length-1)] = s_9470016[chckIndx(i_9470028, 0, (s_9470016).length-1)];
            j_9470019 = addInt(j_9470019, 1);
            }
            }
            res_12927038 = addInt(res_12927038, 1);
          }
      } while(false);
    } while(false);
    if (!((j_9470019 == (s_9470016).length))) {
    (result_9470017.length = chckRange(j_9470019, 0, 2147483647));
    }
    

  return result_9470017;

}
function parseBool_9930022(s_9930024) {
  var result_9930025 = false;

    switch (toJSStr(nsuNormalize(s_9930024))) {
    case "y":
    case "yes":
    case "true":
    case "1":
    case "on":
      result_9930025 = true;
      break;
    case "n":
    case "no":
    case "false":
    case "0":
    case "off":
      result_9930025 = false;
      break;
    default: 
      raiseException({message: (makeNimstrLit("cannot interpret as a bool: ") || []).concat(s_9930024 || []), parent: null, m_type: NTI1194643, name: null, trace: [], up: null}, "ValueError");
      break;
    }

  return result_9930025;

}
function clean_12850245() {
  var result_12850254 = {Field0: null, Field1: null, Field2: null, Field3: null, Field4: null, Field5: false};

    var youtube_12850255 = document.getElementById("youtubelink");
    var twitter_12850256 = document.getElementById("twitterlink");
    var mail_12850257 = document.getElementById("maillink");
    var logo_12850258 = document.getElementById("logoname");
    var notification_12850259 = document.getElementById("notifyinfo");
    var notify_12850260 = document.getElementById("notifybool");
    var parent_12850261 = logo_12850258.parentNode;
    result_12850254.Field0 = youtube_12850255.value;
    result_12850254.Field1 = twitter_12850256.value;
    result_12850254.Field2 = mail_12850257.value;
    result_12850254.Field3 = logo_12850258.value;
    result_12850254.Field4 = notification_12850259.value;
    result_12850254.Field5 = parseBool_9930022(cstrToNimstr(notify_12850260.value));
    parent_12850261.removeChild(logo_12850258);
    parent_12850261.removeChild(youtube_12850255);
    parent_12850261.removeChild(twitter_12850256);
    parent_12850261.removeChild(mail_12850257);
    parent_12850261.removeChild(notification_12850259);
    parent_12850261.removeChild(notify_12850260);

  return result_12850254;

}
var info_12927006 = [clean_12850245()];
function newSeq_11455012(len_11455015) {
  var result_11455017 = [];

    result_11455017 = new Array(len_11455015); for (var i=0;i<len_11455015;++i) {result_11455017[i]=({k: 0, parent: null, current: null, newNode: null, oldNode: null});}
  return result_11455017;

}
function newSeq_11455064(len_11455067) {
  var result_11455069 = [];

    result_11455069 = new Array(len_11455067); for (var i=0;i<len_11455067;++i) {result_11455069[i]=({parent: null, newChild: null, pos: 0});}
  return result_11455069;

}
function init_11450646(ev_11450648) {
    function HEX3Aanonymous_11450649() {
        dodraw_11425262(kxi_10897284[0]);

      
    }

    kxi_10897284[0].renderId = window.requestAnimationFrame(HEX3Aanonymous_11450649);

  
}
function setRenderer_11450693(renderer_11450698, root_11450699, clientPostRenderCallback_11450703) {
    function HEX3Aanonymous_11455135() {
        redraw_11450414(kxi_10897284[0]);

      
    }

  var result_11450704 = null;

    if ((document.getElementById(root_11450699) == null)) {
    var msg_11450710 = (("Could not find a <div> with id=" + root_11450699) + ". Karax needs it as its rendering target.");
    raiseException({message: cstrToNimstr(msg_11450710), parent: null, m_type: NTI1194617, name: null, trace: [], up: null}, "Exception");
    }
    
    result_11450704 = {rootId: root_11450699, renderer: renderer_11450698, postRenderCallback: clientPostRenderCallback_11450703, patches: newSeq_11455012(60), patchesV: newSeq_11455064(30), components: [], surpressRedraws: false, byId: {}, orphans: {}, currentTree: null, toFocus: null, toFocusV: null, renderId: 0, patchLen: 0, patchLenV: 0, runCount: 0};
    kxi_10897284[0] = result_11450704;
    window.onload = init_11450646;
    window.onhashchange = HEX3Aanonymous_11455135;

  return result_11450704;

}
function setRenderer_11455238(renderer_11455242, root_11455243, clientPostRenderCallback_11455246) {
    function wrapRenderer_11455248(data_11455250) {
      var result_11455251 = null;

        result_11455251 = renderer_11455242();

      return result_11455251;

    }
    function wrapPostRender_11455265(data_11455267) {
        if (!((clientPostRenderCallback_11455246 == null))) {
        clientPostRenderCallback_11455246();
        }
        

      
    }

  var result_11455247 = null;

    result_11455247 = setRenderer_11450693(wrapRenderer_11455248, root_11455243, wrapPostRender_11455265);

  return result_11455247;

}
function add_10550072(parent_10550074, kid_10550075) {
    parent_10550074.kids.push(kid_10550075);;

  
}
function tree_10560445(kind_10560447, kids_10560449) {
  var result_10560450 = null;

    result_10560450 = newVNode_10560428(kind_10560447);
    L1: do {
      var k_10560483 = null;
      var k_10560483_Idx = 0;
      var i_12930284 = 0;
      L2: do {
          L3: while (true) {
          if (!(i_12930284 < (kids_10560449).length)) break L3;
            k_10560483 = kids_10560449; k_10560483_Idx = chckIndx(i_12930284, 0, (kids_10560449).length-1);
            add_10550072(result_10560450, k_10560483[k_10560483_Idx]);
            i_12930284 = addInt(i_12930284, 1);
          }
      } while(false);
    } while(false);

  return result_10560450;

}
function addEventListener_10565014(n_10565016, event_10565017, handler_10565018) {
    n_10565016.events.push({Field0: event_10565017, Field1: handler_10565018, Field2: null});;

  
}
function addEventHandler_11460118(n_11460120, k_11460121, action_11460122, kxi_11460123) {
    function wrapper_11460124(ev_11460126, n_11460127) {
        action_11460122(ev_11460126, n_11460127);
        if (!(kxi_11460123.surpressRedraws)) {
        redraw_11450414(kxi_11460123);
        }
        

      
    }

    addEventListener_10565014(n_11460120, k_11460121, wrapper_11460124);

  
}
function setdimension_12926984(e_12926986, n_12926987) {
    var dimension_12926988 = getdimension();
    if ((dimension_12926988 == "3D")) {
    var box_12926989 = document.getElementById("3dbox");
    box_12926989.checked = true;
    }
    else {
    if ((dimension_12926988 == "2D")) {
    var box_12926990 = document.getElementById("2dbox");
    box_12926990.checked = true;
    }
    else {
      var box_12926991 = document.getElementById("3dbox");
      var box2_12926992 = document.getElementById("2dbox");
      box_12926991.checked = true;
      box2_12926992.checked = true;
    }
    }

  
}
function text_10560582(s_10560584) {
  var result_10560585 = null;

    result_10560585 = {kind: 0, text: toJSStr(s_10560584), index: -1, m_type: NTI10465031, id: null, class: null, kids: [], attrs: [], events: [], style: null, dom: null};

  return result_10560585;

}
function menu_12911028(e_12911030, n_12911031) {
    var line1_12911032 = document.getElementById("line1");
    var line2_12911033 = document.getElementById("line2");
    var line3_12911034 = document.getElementById("line3");
    var menu_12911035 = document.getElementById("menu");
    var legal_12911036 = document.getElementById("legal");
    var social_12911037 = document.getElementById("social");
    var img_12911038 = document.getElementById("loadimg");
    if ((menu_12911035.className == "menu1")) {
    line1_12911032.className = "line11";
    line2_12911033.className = "line21";
    line3_12911034.className = "line31";
    menu_12911035.className = "menu2";
    legal_12911036.style.display = "block";
    social_12911037.style.display = "block";
    img_12911038.style.display = "none";
    }
    else {
    if ((menu_12911035.className == "menu2")) {
    line1_12911032.className = "";
    line2_12911033.className = "";
    line3_12911034.className = "";
    menu_12911035.className = "menu1";
    legal_12911036.style.display = "none";
    social_12911037.style.display = "none";
    img_12911038.style.display = "block";
    }
    }

  
}
function home_12927043() {
  var result_12927045 = null;

    var tmp_12927082 = tree_10560445(30, []);
    tmp_12927082.id = "canvas";
    var tmp_12927088 = tree_10560445(18, []);
    tmp_12927088.id = "nav";
    var tmp_12927089 = tree_10560445(101, []);
    setAttr_10500105(tmp_12927089, "action", "/");
    setAttr_10500105(tmp_12927089, "Method", "POST");
    tmp_12927089.id = "mainsearch";
    setAttr_10500105(tmp_12927089, "enctype", "multipart/form-data");
    var tmp_12927090 = tree_10560445(43, []);
    tmp_12927090.id = "searchgroup";
    var tmp_12927091 = tree_10560445(43, []);
    tmp_12927091.id = "searchbar";
    var tmp_12927092 = tree_10560445(105, []);
    setAttr_10500105(tmp_12927092, "Type", "text");
    setAttr_10500105(tmp_12927092, "placeholder", "Search Assets");
    setAttr_10500105(tmp_12927092, "name", "tag");
    valueHEX3D_10465140(tmp_12927092, getkeyword());
    setAttr_10500105(tmp_12927092, "value", getkeyword());
    add_10550072(tmp_12927091, tmp_12927092);
    var tmp_12927093 = tree_10560445(106, []);
    setAttr_10500105(tmp_12927093, "Type", "search");
    tmp_12927093.id = "searchbtn";
    var tmp_12927094 = tree_10560445(75, []);
    setAttr_10500105(tmp_12927094, "src", "../../../../img/search.svg");
    addEventHandler_11460118(tmp_12927094, 31, setdimension_12926984, kxi_10897284[0]);
    add_10550072(tmp_12927093, tmp_12927094);
    add_10550072(tmp_12927091, tmp_12927093);
    add_10550072(tmp_12927090, tmp_12927091);
    add_10550072(tmp_12927089, tmp_12927090);
    var tmp_12927095 = tree_10560445(36, []);
    tmp_12927095.class = "unorder";
    var tmp_12927096 = tree_10560445(37, []);
    tmp_12927096.class = "order";
    var tmp_12927097 = tree_10560445(23, []);
    add_10550072(tmp_12927097, text_10560582(makeNimstrLit("3D")));
    add_10550072(tmp_12927096, tmp_12927097);
    var tmp_12927098 = tree_10560445(105, []);
    setAttr_10500105(tmp_12927098, "Type", "checkbox");
    setAttr_10500105(tmp_12927098, "name", "3D");
    tmp_12927098.id = "3dbox";
    add_10550072(tmp_12927096, tmp_12927098);
    add_10550072(tmp_12927095, tmp_12927096);
    var tmp_12927099 = tree_10560445(37, []);
    tmp_12927099.class = "order";
    var tmp_12927100 = tree_10560445(23, []);
    add_10550072(tmp_12927100, text_10560582(makeNimstrLit("2D")));
    add_10550072(tmp_12927099, tmp_12927100);
    var tmp_12927101 = tree_10560445(105, []);
    setAttr_10500105(tmp_12927101, "Type", "checkbox");
    setAttr_10500105(tmp_12927101, "name", "2D");
    tmp_12927101.id = "2dbox";
    add_10550072(tmp_12927099, tmp_12927101);
    add_10550072(tmp_12927095, tmp_12927099);
    add_10550072(tmp_12927089, tmp_12927095);
    add_10550072(tmp_12927088, tmp_12927089);
    var tmp_12927102 = tree_10560445(43, []);
    tmp_12927102.id = "burg";
    addEventHandler_11460118(tmp_12927102, 0, menu_12911028, kxi_10897284[0]);
    var tmp_12927103 = tree_10560445(43, []);
    tmp_12927103.id = "line1";
    tmp_12927103.class = "";
    add_10550072(tmp_12927102, tmp_12927103);
    var tmp_12927104 = tree_10560445(43, []);
    tmp_12927104.id = "line2";
    tmp_12927104.class = "";
    add_10550072(tmp_12927102, tmp_12927104);
    var tmp_12927105 = tree_10560445(43, []);
    tmp_12927105.id = "line3";
    tmp_12927105.class = "";
    add_10550072(tmp_12927102, tmp_12927105);
    add_10550072(tmp_12927088, tmp_12927102);
    add_10550072(tmp_12927082, tmp_12927088);
    var tmp_12927106 = tree_10560445(43, []);
    tmp_12927106.id = "menu";
    tmp_12927106.class = "menu1";
    var tmp_12927107 = tree_10560445(43, []);
    tmp_12927107.id = "legal";
    var tmp_12927108 = tree_10560445(44, []);
    setAttr_10500105(tmp_12927108, "href", "/policy");
    add_10550072(tmp_12927108, text_10560582(makeNimstrLit("Privacy Policies")));
    add_10550072(tmp_12927107, tmp_12927108);
    var tmp_12927109 = tree_10560445(44, []);
    setAttr_10500105(tmp_12927109, "href", "/");
    add_10550072(tmp_12927109, text_10560582(makeNimstrLit("Home")));
    add_10550072(tmp_12927107, tmp_12927109);
    add_10550072(tmp_12927106, tmp_12927107);
    var tmp_12927110 = tree_10560445(43, []);
    tmp_12927110.id = "social";
    var tmp_12927111 = tree_10560445(44, []);
    setAttr_10500105(tmp_12927111, "href", info_12927006[0].Field0);
    var tmp_12927112 = tree_10560445(31, []);
    add_10550072(tmp_12927112, text_10560582(makeNimstrLit("Youtube")));
    add_10550072(tmp_12927111, tmp_12927112);
    var tmp_12927113 = tree_10560445(43, []);
    tmp_12927113.id = "youtube";
    tmp_12927113.class = "social";
    add_10550072(tmp_12927111, tmp_12927113);
    add_10550072(tmp_12927110, tmp_12927111);
    var tmp_12927114 = tree_10560445(44, []);
    setAttr_10500105(tmp_12927114, "href", info_12927006[0].Field1);
    var tmp_12927115 = tree_10560445(31, []);
    add_10550072(tmp_12927115, text_10560582(makeNimstrLit("Twitter")));
    add_10550072(tmp_12927114, tmp_12927115);
    var tmp_12927116 = tree_10560445(43, []);
    tmp_12927116.id = "twitter";
    tmp_12927116.class = "social";
    add_10550072(tmp_12927114, tmp_12927116);
    add_10550072(tmp_12927110, tmp_12927114);
    var tmp_12927117 = tree_10560445(44, []);
    setAttr_10500105(tmp_12927117, "href", info_12927006[0].Field2);
    var tmp_12927118 = tree_10560445(31, []);
    add_10550072(tmp_12927118, text_10560582(makeNimstrLit("Contact me via gmail")));
    add_10550072(tmp_12927117, tmp_12927118);
    var tmp_12927119 = tree_10560445(43, []);
    tmp_12927119.id = "gmail";
    tmp_12927119.class = "social";
    add_10550072(tmp_12927117, tmp_12927119);
    add_10550072(tmp_12927110, tmp_12927117);
    add_10550072(tmp_12927106, tmp_12927110);
    add_10550072(tmp_12927082, tmp_12927106);
    var tmp_12927120 = tree_10560445(43, []);
    tmp_12927120.id = "modelcon";
    var tmp_12927121 = tree_10560445(43, []);
    tmp_12927121.id = "models";
    add_10550072(tmp_12927120, tmp_12927121);
    var tmp_12927122 = tree_10560445(43, []);
    tmp_12927122.id = "loadimg";
    add_10550072(tmp_12927120, tmp_12927122);
    add_10550072(tmp_12927082, tmp_12927120);
    result_12927045 = tmp_12927082;

  return result_12927045;

}
setRenderer_11455238(home_12927043, "ROOT", null);
